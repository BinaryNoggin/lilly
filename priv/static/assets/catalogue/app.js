(()=>{var Yt=Object.create;var Te=Object.defineProperty;var Zt=Object.getOwnPropertyDescriptor;var Qt=Object.getOwnPropertyNames,ct=Object.getOwnPropertySymbols,ei=Object.getPrototypeOf,ut=Object.prototype.hasOwnProperty,ti=Object.prototype.propertyIsEnumerable;var ft=(e,t,i)=>t in e?Te(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,ge=(e,t)=>{for(var i in t||(t={}))ut.call(t,i)&&ft(e,i,t[i]);if(ct)for(var i of ct(t))ti.call(t,i)&&ft(e,i,t[i]);return e};var ii=e=>Te(e,"__esModule",{value:!0});var ni=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var si=(e,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Qt(t))!ut.call(e,n)&&n!=="default"&&Te(e,n,{get:()=>t[n],enumerable:!(i=Zt(t,n))||i.enumerable});return e},ri=e=>si(ii(Te(e!=null?Yt(ei(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var Wt=ni((wn,je)=>{var sn=typeof window!="undefined"?window:typeof WorkerGlobalScope!="undefined"&&self instanceof WorkerGlobalScope?self:{},w=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,i=0,n={},s={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function h(u){return u instanceof r?new r(u.type,h(u.content),u.alias):Array.isArray(u)?u.map(h):u.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(h){return Object.prototype.toString.call(h).slice(8,-1)},objId:function(h){return h.__id||Object.defineProperty(h,"__id",{value:++i}),h.__id},clone:function h(u,f){var b,y;switch(f=f||{},s.util.type(u)){case"Object":if(y=s.util.objId(u),f[y])return f[y];for(var S in b={},f[y]=b,u)u.hasOwnProperty(S)&&(b[S]=h(u[S],f));return b;case"Array":return y=s.util.objId(u),f[y]?f[y]:(b=[],f[y]=b,u.forEach(function(d,k){b[k]=h(d,f)}),b);default:return u}},getLanguage:function(h){for(;h&&!t.test(h.className);)h=h.parentElement;return h?(h.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if(typeof document=="undefined")return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(b){var h=(/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(b.stack)||[])[1];if(h){var u=document.getElementsByTagName("script");for(var f in u)if(u[f].src==h)return u[f]}return null}},isActive:function(h,u,f){for(var b="no-"+u;h;){var y=h.classList;if(y.contains(u))return!0;if(y.contains(b))return!1;h=h.parentElement}return!!f}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(h,u){var f=s.util.clone(s.languages[h]);for(var b in u)f[b]=u[b];return f},insertBefore:function(h,u,f,b){var y=(b=b||s.languages)[h],S={};for(var d in y)if(y.hasOwnProperty(d)){if(d==u)for(var k in f)f.hasOwnProperty(k)&&(S[k]=f[k]);f.hasOwnProperty(d)||(S[d]=y[d])}var T=b[h];return b[h]=S,s.languages.DFS(s.languages,function(F,q){q===T&&F!=h&&(this[F]=S)}),S},DFS:function h(u,f,b,y){y=y||{};var S=s.util.objId;for(var d in u)if(u.hasOwnProperty(d)){f.call(u,d,u[d],b||d);var k=u[d],T=s.util.type(k);T!=="Object"||y[S(k)]?T!=="Array"||y[S(k)]||(y[S(k)]=!0,h(k,f,d,y)):(y[S(k)]=!0,h(k,f,null,y))}}},plugins:{},highlightAll:function(h,u){s.highlightAllUnder(document,h,u)},highlightAllUnder:function(h,u,f){var b={callback:f,container:h,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};s.hooks.run("before-highlightall",b),b.elements=Array.prototype.slice.apply(b.container.querySelectorAll(b.selector)),s.hooks.run("before-all-elements-highlight",b);for(var y,S=0;y=b.elements[S++];)s.highlightElement(y,u===!0,b.callback)},highlightElement:function(h,u,f){var b=s.util.getLanguage(h),y=s.languages[b];h.className=h.className.replace(t,"").replace(/\s+/g," ")+" language-"+b;var S=h.parentElement;S&&S.nodeName.toLowerCase()==="pre"&&(S.className=S.className.replace(t,"").replace(/\s+/g," ")+" language-"+b);var d={element:h,language:b,grammar:y,code:h.textContent};function k(F){d.highlightedCode=F,s.hooks.run("before-insert",d),d.element.innerHTML=d.highlightedCode,s.hooks.run("after-highlight",d),s.hooks.run("complete",d),f&&f.call(d.element)}if(s.hooks.run("before-sanity-check",d),!d.code)return s.hooks.run("complete",d),void(f&&f.call(d.element));if(s.hooks.run("before-highlight",d),d.grammar)if(u&&e.Worker){var T=new Worker(s.filename);T.onmessage=function(F){k(F.data)},T.postMessage(JSON.stringify({language:d.language,code:d.code,immediateClose:!0}))}else k(s.highlight(d.code,d.grammar,d.language));else k(s.util.encode(d.code))},highlight:function(h,u,f){var b={code:h,grammar:u,language:f};return s.hooks.run("before-tokenize",b),b.tokens=s.tokenize(b.code,b.grammar),s.hooks.run("after-tokenize",b),r.stringify(s.util.encode(b.tokens),b.language)},tokenize:function(h,u){var f=u.rest;if(f){for(var b in f)u[b]=f[b];delete u.rest}var y=new o;return l(y,y.head,h),function S(d,k,T,F,q,M){for(var x in T)if(T.hasOwnProperty(x)&&T[x]){var R=T[x];R=Array.isArray(R)?R:[R];for(var I=0;I<R.length;++I){if(M&&M.cause==x+","+I)return;var L=R[I],D=L.inside,U=!!L.lookbehind,E=!!L.greedy,C=L.alias;if(E&&!L.pattern.global){var A=L.pattern.toString().match(/[imsuy]*$/)[0];L.pattern=RegExp(L.pattern.source,A+"g")}for(var _=L.pattern||L,P=F.next,O=q;P!==k.tail&&!(M&&O>=M.reach);O+=P.value.length,P=P.next){var B=P.value;if(k.length>d.length)return;if(!(B instanceof r)){var J,z=1;if(E){if(!(J=a(_,O,d,U)))break;var oe=J.index,ce=J.index+J[0].length,N=O;for(N+=P.value.length;N<=oe;)P=P.next,N+=P.value.length;if(N-=P.value.length,O=N,P.value instanceof r)continue;for(var te=P;te!==k.tail&&(N<ce||typeof te.value=="string");te=te.next)z++,N+=te.value.length;z--,B=d.slice(O,N),J.index-=O}else if(!(J=a(_,0,B,U)))continue;var oe=J.index,_e=J[0],Be=B.slice(0,oe),dt=B.slice(oe+_e.length),Je=O+B.length;M&&Je>M.reach&&(M.reach=Je);var xe=P.prev;Be&&(xe=l(k,xe,Be),O+=Be.length),c(k,xe,z);var Gt=new r(x,D?s.tokenize(_e,D):_e,C,_e);if(P=l(k,xe,Gt),dt&&l(k,P,dt),1<z){var ze={cause:x+","+I,reach:Je};S(d,k,T,P.prev,O,ze),M&&ze.reach>M.reach&&(M.reach=ze.reach)}}}}}}(h,y,u,y.head,0),function(S){for(var d=[],k=S.head.next;k!==S.tail;)d.push(k.value),k=k.next;return d}(y)},hooks:{all:{},add:function(h,u){var f=s.hooks.all;f[h]=f[h]||[],f[h].push(u)},run:function(h,u){var f=s.hooks.all[h];if(f&&f.length)for(var b,y=0;b=f[y++];)b(u)}},Token:r};function r(h,u,f,b){this.type=h,this.content=u,this.alias=f,this.length=0|(b||"").length}function a(h,u,f,b){h.lastIndex=u;var y=h.exec(f);if(y&&b&&y[1]){var S=y[1].length;y.index+=S,y[0]=y[0].slice(S)}return y}function o(){var h={value:null,prev:null,next:null},u={value:null,prev:h,next:null};h.next=u,this.head=h,this.tail=u,this.length=0}function l(h,u,f){var b=u.next,y={value:f,prev:u,next:b};return u.next=y,b.prev=y,h.length++,y}function c(h,u,f){for(var b=u.next,y=0;y<f&&b!==h.tail;y++)b=b.next;(u.next=b).prev=u,h.length-=y}if(e.Prism=s,r.stringify=function h(u,f){if(typeof u=="string")return u;if(Array.isArray(u)){var b="";return u.forEach(function(T){b+=h(T,f)}),b}var y={type:u.type,content:h(u.content,f),tag:"span",classes:["token",u.type],attributes:{},language:f},S=u.alias;S&&(Array.isArray(S)?Array.prototype.push.apply(y.classes,S):y.classes.push(S)),s.hooks.run("wrap",y);var d="";for(var k in y.attributes)d+=" "+k+'="'+(y.attributes[k]||"").replace(/"/g,"&quot;")+'"';return"<"+y.tag+' class="'+y.classes.join(" ")+'"'+d+">"+y.content+"</"+y.tag+">"},!e.document)return e.addEventListener&&(s.disableWorkerMessageHandler||e.addEventListener("message",function(h){var u=JSON.parse(h.data),f=u.language,b=u.code,y=u.immediateClose;e.postMessage(s.highlight(b,s.languages[f],f)),y&&e.close()},!1)),s;var p=s.util.currentScript();function v(){s.manual||s.highlightAll()}if(p&&(s.filename=p.src,p.hasAttribute("data-manual")&&(s.manual=!0)),!s.manual){var g=document.readyState;g==="loading"||g==="interactive"&&p&&p.defer?document.addEventListener("DOMContentLoaded",v):window.requestAnimationFrame?window.requestAnimationFrame(v):window.setTimeout(v,16)}return s}(sn);typeof je!="undefined"&&je.exports&&(je.exports=w),typeof global!="undefined"&&(global.Prism=w);w.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/,name:/[^\s<>'"]+/}},cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},w.languages.markup.tag.inside["attr-value"].inside.entity=w.languages.markup.entity,w.languages.markup.doctype.inside["internal-subset"].inside=w.languages.markup,w.hooks.add("wrap",function(e){e.type==="entity"&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(w.languages.markup.tag,"addInlined",{value:function(e,t){var i={};i["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:w.languages[t]},i.cdata=/^<!\[CDATA\[|\]\]>$/i;var n={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:i}};n["language-"+t]={pattern:/[\s\S]+/,inside:w.languages[t]};var s={};s[e]={pattern:RegExp("(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[^])*?(?=</__>)".replace(/__/g,function(){return e}),"i"),lookbehind:!0,greedy:!0,inside:n},w.languages.insertBefore("markup","cdata",s)}}),Object.defineProperty(w.languages.markup.tag,"addAttribute",{value:function(e,t){w.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(`(^|["'\\s])(?:`+e+`)\\s*=\\s*(?:"[^"]*"|'[^']*'|[^\\s'">=]+(?=[\\s>]))`,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:w.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),w.languages.html=w.languages.markup,w.languages.mathml=w.languages.markup,w.languages.svg=w.languages.markup,w.languages.xml=w.languages.extend("markup",{}),w.languages.ssml=w.languages.xml,w.languages.atom=w.languages.xml,w.languages.rss=w.languages.xml;(function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+`|(?:[^\\\\\r
()"']|\\\\[^])*)\\)`,"i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:RegExp(`[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|`+t.source+")*(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var i=e.languages.markup;i&&(i.tag.addInlined("style","css"),i.tag.addAttribute("style","css"))})(w);w.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/};w.languages.javascript=w.languages.extend("clike",{"class-name":[w.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),w.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,w.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:w.languages.regex},"regex-flags":/[a-z]+$/,"regex-delimiter":/^\/|\/$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:w.languages.javascript},{pattern:/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,inside:w.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:w.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:w.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),w.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:w.languages.javascript}},string:/[\s\S]+/}}}),w.languages.markup&&(w.languages.markup.tag.addInlined("script","javascript"),w.languages.markup.tag.addAttribute("on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)","javascript")),w.languages.js=w.languages.javascript;w.languages.elixir={doc:{pattern:/@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,inside:{attribute:/^@\w+/,string:/['"][\s\S]+/}},comment:{pattern:/#.*/m,greedy:!0},regex:{pattern:/~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/("""|''')[\s\S]*?\1/,greedy:!0,inside:{}},{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\w+/,lookbehind:!0,alias:"symbol"},module:{pattern:/\b[A-Z]\w*\b/,alias:"class-name"},"attr-name":/\w+\??:(?!:)/,argument:{pattern:/(^|[^&])&\d+/,lookbehind:!0,alias:"variable"},attribute:{pattern:/@\w+/,alias:"variable"},function:/\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d+))/,number:/\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,keyword:/\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct|delegate)?|do|else|end|fn|for|if|import|not|or|raise|require|rescue|try|unless|use|when)\b/,boolean:/\b(?:true|false|nil)\b/,operator:[/\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\[\]{}()]/},w.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"punctuation"},rest:w.languages.elixir}}}});(function(e){var t=e.util.clone(e.languages.elixir),i="(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})";function n(a,o){return a=a.replace(/<S>/g,function(){return"(?:\\s|//.*(?!.)|/\\*(?:[^*]|\\*(?!/))\\*/)"}).replace(/<BRACES>/g,function(){return"(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})"}).replace(/<SPREAD>/g,function(){return i}),RegExp(a,o)}i=n(i).source,e.languages.surface=e.languages.extend("markup",t),e.languages.surface.tag.pattern=n(`</?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:"(?:\\\\[^]|[^\\\\"])*"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>`),e.languages.surface.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.surface.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[^]|[^\\"])*"|'(?:\\[^]|[^\\'])*'|[^\s'">]+)/i,e.languages.surface.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.surface.tag.inside.tag.inside["tag-name"]=/^[a-z]\w*(?:\.[a-z]\w*)*$/,e.languages.surface.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:n("<SPREAD>"),inside:e.languages.surface}},e.languages.surface.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:n("=<BRACES>"),inside:{"script-punctuation":{pattern:/^=(?={)/,alias:"punctuation"},rest:e.languages.surface},alias:"language-elixir"}},e.languages.surface.tag),e.languages.insertBefore("elixir","atom",{"embedded-surface":{pattern:/~H(""")[\s\S]*?\1/,greedy:!0,inside:{"embedded-surface-open":{pattern:/^~H"""/,alias:"punctuation"},"embedded-surface-close":{pattern:/"""$/,alias:"punctuation"},surface:{pattern:/[\s\S]+/,inside:e.languages.surface}}},"surface-api":{pattern:/^\s+\b(?:prop|data|slot)\b\s+/,alias:"class-name"}});var s=function(a){return a?typeof a=="string"?a:typeof a.content=="string"?a.content:a.content.map(s).join(""):""},r=function(a,o){o==="surface"&&a.unshift(new e.Token("tag",[new e.Token("tag",[new e.Token("punctuation","<")]),new e.Token("punctuation",">")]));for(var l=[],c=0;c<a.length;c++){var p=a[c],v=!1;if(typeof p!="string"&&(p.type==="tag"&&p.content[0]&&p.content[0].type==="tag"?p.content[0].content[0].content==="</"?0<l.length&&l[l.length-1].tagName===s(p.content[0].content[1])&&l.pop():p.content[p.content.length-1].content==="/>"||l.push({tagName:s(p.content[0].content[1]),openedBraces:0}):0<l.length&&p.type==="punctuation"&&p.content==="{"?l[l.length-1].openedBraces++:0<l.length&&0<l[l.length-1].openedBraces&&p.type==="punctuation"&&p.content==="}"?l[l.length-1].openedBraces--:v=!0),(v||typeof p=="string")&&0<l.length&&l[l.length-1].openedBraces===0){var g=s(p);c<a.length-1&&(typeof a[c+1]=="string"||a[c+1].type==="plain-text")&&(g+=s(a[c+1]),a.splice(c+1,1)),0<c&&(typeof a[c-1]=="string"||a[c-1].type==="plain-text")&&(g=s(a[c-1])+g,a.splice(c-1,1),c--),a[c]=new e.Token("plain-text",g,null,g)}p.content&&typeof p.content!="string"&&r(p.content,p.type)}o==="surface"&&a.shift()};e.hooks.add("after-tokenize",function(a){a.language!=="surface"&&a.language!=="elixir"||r(a.tokens,a.language)})})(w);(function(){if(typeof self!="undefined"&&self.Prism&&self.document&&document.querySelector){var e,t="line-numbers",i="linkable-line-numbers",n=function(){if(e===void 0){var g=document.createElement("div");g.style.fontSize="13px",g.style.lineHeight="1.5",g.style.padding="0",g.style.border="0",g.innerHTML="&nbsp;<br />&nbsp;",document.body.appendChild(g),e=g.offsetHeight===38,document.body.removeChild(g)}return e},s=!0,r=0;w.hooks.add("before-sanity-check",function(g){var h=g.element.parentElement;if(c(h)){var u=0;a(".line-highlight",h).forEach(function(f){u+=f.textContent.length,f.parentNode.removeChild(f)}),u&&/^( \n)+$/.test(g.code.slice(-u))&&(g.code=g.code.slice(0,-u))}}),w.hooks.add("complete",function g(h){var u=h.element.parentElement;if(c(u)){clearTimeout(r);var f=w.plugins.lineNumbers,b=h.plugins&&h.plugins.lineNumbers;o(u,t)&&f&&!b?w.hooks.add("line-numbers",g):(p(u)(),r=setTimeout(v,1))}}),window.addEventListener("hashchange",v),window.addEventListener("resize",function(){a("pre").filter(c).map(function(g){return p(g)}).forEach(l)})}function a(g,h){return Array.prototype.slice.call((h||document).querySelectorAll(g))}function o(g,h){return g.classList.contains(h)}function l(g){g()}function c(g){return!(!g||!/pre/i.test(g.nodeName))&&(!!g.hasAttribute("data-line")||!(!g.id||!w.util.isActive(g,i)))}function p(g,h,u){var f=(h=typeof h=="string"?h:g.getAttribute("data-line")||"").replace(/\s+/g,"").split(",").filter(Boolean),b=+g.getAttribute("data-line-offset")||0,y=(n()?parseInt:parseFloat)(getComputedStyle(g).lineHeight),S=w.util.isActive(g,t),d=g.querySelector("code"),k=S?g:d||g,T=[],F=d&&k!=d?function(x,R){var I=getComputedStyle(x),L=getComputedStyle(R);function D(U){return+U.substr(0,U.length-2)}return R.offsetTop+D(L.borderTopWidth)+D(L.paddingTop)-D(I.paddingTop)}(g,d):0;f.forEach(function(x){var R=x.split("-"),I=+R[0],L=+R[1]||I,D=g.querySelector('.line-highlight[data-range="'+x+'"]')||document.createElement("div");if(T.push(function(){D.setAttribute("aria-hidden","true"),D.setAttribute("data-range",x),D.className=(u||"")+" line-highlight"}),S&&w.plugins.lineNumbers){var U=w.plugins.lineNumbers.getLine(g,I),E=w.plugins.lineNumbers.getLine(g,L);if(U){var C=U.offsetTop+F+"px";T.push(function(){D.style.top=C})}if(E){var A=E.offsetTop-U.offsetTop+E.offsetHeight+"px";T.push(function(){D.style.height=A})}}else T.push(function(){D.setAttribute("data-start",String(I)),I<L&&D.setAttribute("data-end",String(L)),D.style.top=(I-b-1)*y+F+"px",D.textContent=new Array(L-I+2).join(` 
`)});T.push(function(){k.appendChild(D)})});var q=g.id;if(S&&w.util.isActive(g,i)&&q){o(g,i)||T.push(function(){g.classList.add(i)});var M=parseInt(g.getAttribute("data-start")||"1");a(".line-numbers-rows > span",g).forEach(function(x,R){var I=R+M;x.onclick=function(){var L=q+"."+I;s=!1,location.hash=L,setTimeout(function(){s=!0},1)}})}return function(){T.forEach(l)}}function v(){var g=location.hash.slice(1);a(".temporary.line-highlight").forEach(function(b){b.parentNode.removeChild(b)});var h=(g.match(/\.([\d,-]+)$/)||[,""])[1];if(h&&!document.getElementById(g)){var u=g.slice(0,g.lastIndexOf(".")),f=document.getElementById(u);f&&(f.hasAttribute("data-line")||f.setAttribute("data-line",""),p(f,h,"temporary ")(),s&&document.querySelector(".temporary.line-highlight").scrollIntoView())}}})();(function(){if(typeof self!="undefined"&&self.Prism&&self.document){var e="line-numbers",t=/\n(?!$)/g,i=w.plugins.lineNumbers={getLine:function(a,o){if(a.tagName==="PRE"&&a.classList.contains(e)){var l=a.querySelector(".line-numbers-rows");if(l){var c=parseInt(a.getAttribute("data-start"),10)||1,p=c+(l.children.length-1);o<c&&(o=c),p<o&&(o=p);var v=o-c;return l.children[v]}}},resize:function(a){r([a])},assumeViewportIndependence:!0},n=function(a){return a?window.getComputedStyle?getComputedStyle(a):a.currentStyle||null:null},s=void 0;window.addEventListener("resize",function(){i.assumeViewportIndependence&&s===window.innerWidth||(s=window.innerWidth,r(Array.prototype.slice.call(document.querySelectorAll("pre."+e))))}),w.hooks.add("complete",function(a){if(a.code){var o=a.element,l=o.parentNode;if(l&&/pre/i.test(l.nodeName)&&!o.querySelector(".line-numbers-rows")&&w.util.isActive(o,e)){o.classList.remove(e),l.classList.add(e);var c,p=a.code.match(t),v=p?p.length+1:1,g=new Array(v+1).join("<span></span>");(c=document.createElement("span")).setAttribute("aria-hidden","true"),c.className="line-numbers-rows",c.innerHTML=g,l.hasAttribute("data-start")&&(l.style.counterReset="linenumber "+(parseInt(l.getAttribute("data-start"),10)-1)),a.element.appendChild(c),r([l]),w.hooks.run("line-numbers",a)}}}),w.hooks.add("line-numbers",function(a){a.plugins=a.plugins||{},a.plugins.lineNumbers=!0})}function r(a){if((a=a.filter(function(l){var c=n(l)["white-space"];return c==="pre-wrap"||c==="pre-line"})).length!=0){var o=a.map(function(l){var c=l.querySelector("code"),p=l.querySelector(".line-numbers-rows");if(c&&p){var v=l.querySelector(".line-numbers-sizer"),g=c.textContent.split(t);v||((v=document.createElement("span")).className="line-numbers-sizer",c.appendChild(v)),v.innerHTML="0",v.style.display="block";var h=v.getBoundingClientRect().height;return v.innerHTML="",{element:l,lines:g,lineHeights:[],oneLinerHeight:h,sizer:v}}}).filter(Boolean);o.forEach(function(l){var c=l.sizer,p=l.lines,v=l.lineHeights,g=l.oneLinerHeight;v[p.length-1]=void 0,p.forEach(function(h,u){if(h&&1<h.length){var f=c.appendChild(document.createElement("span"));f.style.display="block",f.textContent=h}else v[u]=g})}),o.forEach(function(l){for(var c=l.sizer,p=l.lineHeights,v=0,g=0;g<p.length;g++)p[g]===void 0&&(p[g]=c.children[v++].getBoundingClientRect().height)}),o.forEach(function(l){var c=l.sizer,p=l.element.querySelector(".line-numbers-rows");c.style.display="none",c.innerHTML="",l.lineHeights.forEach(function(v,g){p.children[g].style.height=v+"px"})})}}})()});"use strict";(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(r,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var o=document.createEvent("CustomEvent");return o.initCustomEvent(r,a.bubbles,a.cancelable,a.detail),o}return s.prototype=window.Event.prototype,s}function i(s,r){var a=document.createElement("input");return a.type="hidden",a.name=s,a.value=r,a}function n(s,r){var a=s.getAttribute("data-to"),o=i("_method",s.getAttribute("data-method")),l=i("_csrf_token",s.getAttribute("data-csrf")),c=document.createElement("form"),p=s.getAttribute("target");c.method=s.getAttribute("data-method")==="get"?"get":"post",c.action=a,c.style.display="hidden",p?c.target=p:r&&(c.target="_blank"),c.appendChild(l),c.appendChild(o),document.body.appendChild(c),c.submit()}window.addEventListener("click",function(s){var r=s.target;if(!s.defaultPrevented)for(;r&&r.getAttribute;){var a=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!r.dispatchEvent(a))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(r.getAttribute("data-method"))return n(r,s.metaKey||s.shiftKey),s.preventDefault(),!1;r=r.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var r=s.target.getAttribute("data-confirm");r&&!window.confirm(r)&&s.preventDefault()},!1)})();var me=e=>typeof e=="function"?e:function(){return e},ai=typeof self!="undefined"?self:null,ve=typeof window!="undefined"?window:null,Pe=ai||ve||void 0,oi="2.0.0",G={connecting:0,open:1,closing:2,closed:3},li=1e4,hi=1e3,V={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},ie={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Ve={longpoll:"longpoll",websocket:"websocket"},di={complete:4},Le=class{constructor(e,t,i,n){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(n=>n.status===e).forEach(n=>n.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},pt=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},ci=class{constructor(e,t,i){this.state=V.closed,this.topic=e,this.params=me(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Le(this,ie.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new pt(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=V.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=V.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=V.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=V.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Le(this,ie.leave,me({}),this.timeout).send(),this.state=V.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(ie.reply,(n,s)=>{this.trigger(this.replyEventName(s),n)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(ie.close,e)}onError(e){return this.on(ie.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t=="undefined"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new Le(this,e,function(){return t},i);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=V.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(ie.close,"leave")},i=new Le(this,ie.leave,me({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,n){return this.topic!==e?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=V.joining,this.joinPush.resend(e))}trigger(e,t,i,n){let s=this.onMessage(e,t,i,n);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let r=this.bindings.filter(a=>a.event===e);for(let a=0;a<r.length;a++)r[a].callback(s,i,n||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===V.closed}isErrored(){return this.state===V.errored}isJoined(){return this.state===V.joined}isJoining(){return this.state===V.joining}isLeaving(){return this.state===V.leaving}},be=class{static request(e,t,i,n,s,r,a){if(Pe.XDomainRequest){let o=new Pe.XDomainRequest;this.xdomainRequest(o,e,t,n,s,r,a)}else{let o=new Pe.XMLHttpRequest;this.xhrRequest(o,e,t,i,n,s,r,a)}}static xdomainRequest(e,t,i,n,s,r,a){e.timeout=s,e.open(t,i),e.onload=()=>{let o=this.parseJSON(e.responseText);a&&a(o)},r&&(e.ontimeout=r),e.onprogress=()=>{},e.send(n)}static xhrRequest(e,t,i,n,s,r,a,o){e.open(t,i,!0),e.timeout=r,e.setRequestHeader("Content-Type",n),e.onerror=()=>{o&&o(null)},e.onreadystatechange=()=>{if(e.readyState===di.complete&&o){let l=this.parseJSON(e.responseText);o(l)}},a&&(e.ontimeout=a),e.send(s)}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var n in e){if(!Object.prototype.hasOwnProperty.call(e,n))continue;let s=t?`${t}[${n}]`:n,r=e[n];typeof r=="object"?i.push(this.serialize(r,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(r))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},gt=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=G.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Ve.websocket),"$1/"+Ve.longpoll)}endpointURL(){return be.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(){this.close(),this.readyState=G.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry()}poll(){(this.readyState===G.open||this.readyState===G.connecting)&&be.request("GET",this.endpointURL(),"application/json",null,this.timeout,this.ontimeout.bind(this),e=>{if(e){var{status:t,token:i,messages:n}=e;this.token=i}else t=0;switch(t){case 200:n.forEach(s=>{setTimeout(()=>{this.onmessage({data:s})},0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=G.open,this.onopen(),this.poll();break;case 403:this.onerror(),this.close();break;case 0:case 500:this.onerror(),this.closeAndRetry();break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){be.request("POST",this.endpointURL(),"application/json",e,this.timeout,this.onerror.bind(this,"timeout"),t=>{(!t||t.status!==200)&&(this.onerror(t&&t.status),this.closeAndRetry())})}close(e,t){this.readyState=G.closed,this.onclose()}};var Re={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,n,s,r,a]=JSON.parse(e);return t({join_ref:i,ref:n,topic:s,event:r,payload:a})}},binaryEncode(e){let{join_ref:t,ref:i,event:n,topic:s,payload:r}=e,a=this.META_LENGTH+t.length+i.length+s.length+n.length,o=new ArrayBuffer(this.HEADER_LENGTH+a),l=new DataView(o),c=0;l.setUint8(c++,this.KINDS.push),l.setUint8(c++,t.length),l.setUint8(c++,i.length),l.setUint8(c++,s.length),l.setUint8(c++,n.length),Array.from(t,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(i,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(s,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(n,v=>l.setUint8(c++,v.charCodeAt(0)));var p=new Uint8Array(o.byteLength+r.byteLength);return p.set(new Uint8Array(o),0),p.set(new Uint8Array(r),o.byteLength),p.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),n=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,n);case this.KINDS.reply:return this.decodeReply(e,t,n);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,n)}},decodePush(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,o=i.decode(e.slice(a,a+n));a=a+n;let l=i.decode(e.slice(a,a+s));a=a+s;let c=i.decode(e.slice(a,a+r));a=a+r;let p=e.slice(a,e.byteLength);return{join_ref:o,ref:null,topic:l,event:c,payload:p}},decodeReply(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=t.getUint8(4),o=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(o,o+n));o=o+n;let c=i.decode(e.slice(o,o+s));o=o+s;let p=i.decode(e.slice(o,o+r));o=o+r;let v=i.decode(e.slice(o,o+a));o=o+a;let g=e.slice(o,e.byteLength),h={status:v,response:g};return{join_ref:l,ref:c,topic:p,event:ie.reply,payload:h}},decodeBroadcast(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=this.HEADER_LENGTH+2,a=i.decode(e.slice(r,r+n));r=r+n;let o=i.decode(e.slice(r,r+s));r=r+s;let l=e.slice(r,e.byteLength);return{join_ref:null,ref:null,topic:a,event:o,payload:l}}},mt=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||li,this.transport=t.transport||Pe.WebSocket||gt,this.establishedConnections=0,this.defaultEncoder=Re.encode.bind(Re),this.defaultDecoder=Re.decode.bind(Re),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==gt?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;ve&&ve.addEventListener&&(ve.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),i=this.connectClock)}),ve.addEventListener("pageshow",n=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>t.rejoinAfterMs?t.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>t.reconnectAfterMs?t.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=me(t.params||{}),this.endPoint=`${e}/${Ve.websocket}`,this.vsn=t.vsn||oi,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new pt(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}replaceTransport(e){this.disconnect(),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=be.appendParams(be.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){this.connectClock++,e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=me(e)),!this.conn&&(this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.abnormalClose("heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearTimeout(this.heartbeatTimer),setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===G.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearTimeout(this.heartbeatTimer),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(ie.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case G.connecting:return"connecting";case G.open:return"open";case G.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new ci(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:n,ref:s,join_ref:r}=e;this.log("push",`${t} ${i} (${r}, ${s})`,n)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}abnormalClose(e){this.closeWasClean=!1,this.isConnected()&&this.conn.close(hi,e)}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:n,payload:s,ref:r,join_ref:a}=t;r&&r===this.pendingHeartbeatRef&&(clearTimeout(this.heartbeatTimer),this.pendingHeartbeatRef=null,setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${n} ${r&&"("+r+")"||""}`,s);for(let o=0;o<this.channels.length;o++){let l=this.channels[o];!l.isMember(i,n,s,a)||l.trigger(n,s,r,a)}for(let o=0;o<this.stateChangeCallbacks.message.length;o++){let[,l]=this.stateChangeCallbacks.message[o];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var vt="consecutive-reloads",ui=10,fi=1e3,pi=3e3,gi=3e4,bt=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],W="data-phx-component",We="data-phx-link",mi="track-static",vi="data-phx-link-state",Y="data-phx-ref",le="data-phx-ref-src",yt="track-uploads",he="data-phx-upload-ref",Xe="data-phx-preflighted-refs",bi="data-phx-done-refs",wt="drop-target",qe="data-phx-active-refs",Ke="phx:live-file:updated",Ge="data-phx-skip",kt="data-phx-prune",St="page-loading",At="phx-connected",Ye="phx-loading",Et="phx-no-feedback",Ct="phx-error",ue="data-phx-parent-id",Ze="data-phx-main",ye="data-phx-root-id",yi="trigger-action",Qe="feedback-for",_t="phx-has-focused",wi=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],xt=["checkbox","radio"],Tt="phx-has-submitted",se="data-phx-session",fe=`[${se}]`,Pt="data-phx-sticky",we="data-phx-static",et="data-phx-readonly",Ie="data-phx-disabled",tt="disable-with",De="data-phx-disable-with-restore",Oe="hook",ki="debounce",Si="throttle",it="update",Ai="key",Z="phxPrivate",Lt="auto-recover",nt="phx:live-socket:debug",st="phx:live-socket:profiling",rt="phx:live-socket:latency-sim",Ei="progress",Ci=1,_i=200,xi="phx-",Ti=3e4,ke="debounce-trigger",Ne="throttled",Rt="debounce-prev-key",Pi={debounce:300,throttle:300},It="d",Q="s",X="c",Dt="e",Ot="r",Nt="t",Li="p",Ri=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return H("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},H=(e,t)=>console.error&&console.error(e,t),re=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function Ii(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,n=t.length;i<n;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var Di=(e,t,i,n)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n)},at=e=>typeof e=="function"?e:function(){return e},Fe=e=>JSON.parse(JSON.stringify(e)),Se=(e,t,i)=>{do{if(e.matches(`[${t}]`))return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(fe)));return null},Ae=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),Oi=(e,t)=>JSON.stringify(e)===JSON.stringify(t),Ft=e=>{for(let t in e)return!1;return!0},ne=(e,t)=>e&&t(e),Ni=function(e,t,i,n){e.forEach(s=>{new Ri(s,i.config.chunk_size,n).upload()})},Ht={canPushState(){return typeof history.pushState!="undefined"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,n,s){let r=this.getLocal(e,t,i),a=this.localKey(t,i),o=r===null?n:s(r);return e.setItem(a,JSON.stringify(o)),o},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&Ht.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},ae=Ht,K={byId(e){return document.getElementById(e)||H(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let n=Array.from(e.querySelectorAll(t));return i?n.forEach(i):n},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(he)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${he}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${W}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&K.private(e,"destroyed"))},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(se,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${Pt}]`)},findPhxChildren(e,t){return this.all(e,`${fe}[${ue}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t);return t.reduce((n,s)=>{let r=`[${W}="${s}"] [${W}]`;return this.filterWithinSameLiveView(this.all(e,r),e).map(a=>parseInt(a.getAttribute(W))).forEach(a=>n.delete(a)),n},i)},filterWithinSameLiveView(e,t){return t.querySelector(fe)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(se)!==null)return!1}},private(e,t){return e[Z]&&e[Z][t]},deletePrivate(e,t){e[Z]&&delete e[Z][t]},putPrivate(e,t,i){e[Z]||(e[Z]={}),e[Z][t]=i},updatePrivate(e,t,i,n){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,n(i)):this.putPrivate(e,t,n(s))},copyPrivates(e,t){t[Z]&&(e[Z]=t[Z])},putTitle(e){let t=document.querySelector("title"),{prefix:i,suffix:n}=t.dataset;document.title=`${i||""}${e}${n||""}`},debounce(e,t,i,n,s,r,a){let o=e.getAttribute(i),l=e.getAttribute(s);o===""&&(o=n),l===""&&(l=r);let c=o||l;switch(c){case null:return a();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>a());return;default:let p=parseInt(c),v=()=>l?this.deletePrivate(e,Ne):a(),g=this.incCycle(e,ke,v);if(isNaN(p))return H(`invalid throttle/debounce value: ${c}`);if(l){let u=!1;if(t.type==="keydown"){let f=this.private(e,Rt);this.putPrivate(e,Rt,t.key),u=f!==t.key}if(!u&&this.private(e,Ne))return!1;a(),this.putPrivate(e,Ne,!0),setTimeout(()=>this.triggerCycle(e,ke),p)}else setTimeout(()=>this.triggerCycle(e,ke,g),p);let h=e.form;h&&this.once(h,"bind-debounce")&&h.addEventListener("submit",()=>{Array.from(new FormData(h).entries(),([u])=>{let f=h.querySelector(`[name="${u}"]`);this.incCycle(f,ke),this.deletePrivate(f,Ne)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,ke))}},triggerCycle(e,t,i){let[n,s]=this.private(e,t);i||(i=n),i===n&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[n]=this.private(e,t)||[0,i];return n++,this.putPrivate(e,t,[n,i]),n},discardError(e,t,i){let n=t.getAttribute&&t.getAttribute(i),s=n&&e.querySelector(`[id="${n}"], [name="${n}"]`);!s||this.private(s,_t)||this.private(s.form,Tt)||t.classList.add(Et)},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,Et)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(ue)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(Pt)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${ue}]`)[0]},dispatchEvent(e,t,i={}){let n=new CustomEvent(t,{bubbles:!0,cancelable:!0,detail:i});e.dispatchEvent(n)},cloneNode(e,t){if(typeof t=="undefined")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let n=i.exclude||[],s=i.isIgnored,r=t.attributes;for(let o=r.length-1;o>=0;o--){let l=r[o].name;n.indexOf(l)<0&&e.setAttribute(l,t.getAttribute(l))}let a=e.attributes;for(let o=a.length-1;o>=0;o--){let l=a[o].name;s?l.startsWith("data-")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||K.mergeAttrs(e,t,{except:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!K.isTextualInput(e))return;let n=e.matches(":focus");e.readOnly&&e.blur(),n||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&xt.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return wi.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let n=e.getAttribute(Y);if(n===null)return!0;let s=e.getAttribute(le);return K.isFormInput(e)||e.getAttribute(i)!==null?(K.isUploadInput(e)&&K.mergeAttrs(e,t,{isIgnored:!0}),K.putPrivate(e,Y,t),!1):(bt.forEach(r=>{e.classList.contains(r)&&t.classList.add(r)}),t.setAttribute(Y,n),t.setAttribute(le,s),!0)},cleanChildNodes(e,t){if(K.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(n=>{n.id||(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()===""||H(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),i.push(n))}),i.forEach(n=>n.remove())}},replaceRootContainer(e,t,i){let n=new Set(["id",se,we,Ze,ye]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!n.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!n.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(r=>s.setAttribute(r,i[r])),n.forEach(r=>s.setAttribute(r,e.getAttribute(r))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let n=(K.private(e,"sticky")||[]).find(([s])=>t===s);if(n){let[s,r,a]=n;return a}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([n,s])=>n!==t))},putSticky(e,t,i){let n=i(e);this.updatePrivate(e,"sticky",[],s=>{let r=s.findIndex(([a])=>t===a);return r>=0?s[r]=[t,i,n]:s.push([t,i,n]),s})},applyStickyOperations(e){let t=K.private(e,"sticky");!t||t.forEach(([i,n,s])=>this.putSticky(e,i,n))}},m=K,ot=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(qe).split(",").indexOf($.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(Xe).split(",").indexOf($.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=$.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Ke,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{$.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),$.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(Ke,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(qe).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||H(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:Ni}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||H(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},Fi=0,$=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(Fi++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return m.findUploadInputs(e).forEach(i=>{i.getAttribute(Xe)!==i.getAttribute(bi)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},r=e.getAttribute(he);i[r]=i[r]||[],s.ref=this.genFileRef(n),s.name=n.name||s.ref,s.type=n.type,s.size=n.size,i[r].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(he),m.putPrivate(e,"files",[])}static untrackFile(e,t){m.putPrivate(e,"files",m.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t){if(e.getAttribute("multiple")!==null){let i=t.filter(n=>!this.activeFiles(e).find(s=>Object.is(s,n)));m.putPrivate(e,"files",this.activeFiles(e).concat(i)),e.value=null}else m.putPrivate(e,"files",t)}static activeFileInputs(e){let t=m.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(m.private(e,"files")||[]).filter(t=>ot.isActive(e,t))}static inputsAwaitingPreflight(e){let t=m.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!ot.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from($.filesAwaitingPreflight(e)||[]).map(n=>new ot(e,n,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),s));let n=this._entries.reduce((s,r)=>{let{name:a,callback:o}=r.uploader(i.uploaders);return s[a]=s[a]||{callback:o,entries:[]},s[a].entries.push(r),s},{});for(let s in n){let{callback:r,entries:a}=n[s];r(a,t,e,i)}}},Hi={LiveFileUpload:{activeRefs(){return this.el.getAttribute(qe)},preflightedRefs(){return this.el.getAttribute(Xe)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Ke))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(he)),$.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}}},$i=Hi,Mi=class{constructor(e,t,i){let n=new Set,s=new Set([...t.children].map(a=>a.id)),r=[];Array.from(e.children).forEach(a=>{if(a.id&&(n.add(a.id),s.has(a.id))){let o=a.previousElementSibling&&a.previousElementSibling.id;r.push({elementId:a.id,previousElementId:o})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=r,this.elementIdsToAdd=[...s].filter(a=>!n.has(a))}perform(){let e=m.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?ne(document.getElementById(t.previousElementId),i=>{ne(document.getElementById(t.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",n)})}):ne(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{ne(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},$t=11;function ji(e,t){var i=t.attributes,n,s,r,a,o;if(!(t.nodeType===$t||e.nodeType===$t)){for(var l=i.length-1;l>=0;l--)n=i[l],s=n.name,r=n.namespaceURI,a=n.value,r?(s=n.localName||s,o=e.getAttributeNS(r,s),o!==a&&(n.prefix==="xmlns"&&(s=n.name),e.setAttributeNS(r,s,a))):(o=e.getAttribute(s),o!==a&&e.setAttribute(s,a));for(var c=e.attributes,p=c.length-1;p>=0;p--)n=c[p],s=n.name,r=n.namespaceURI,r?(s=n.localName||s,t.hasAttributeNS(r,s)||e.removeAttributeNS(r,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var He,Ui="http://www.w3.org/1999/xhtml",j=typeof document=="undefined"?void 0:document,Bi=!!j&&"content"in j.createElement("template"),Ji=!!j&&j.createRange&&"createContextualFragment"in j.createRange();function zi(e){var t=j.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function Vi(e){He||(He=j.createRange(),He.selectNode(j.body));var t=He.createContextualFragment(e);return t.childNodes[0]}function Wi(e){var t=j.createElement("body");return t.innerHTML=e,t.childNodes[0]}function Xi(e){return e=e.trim(),Bi?zi(e):Ji?Vi(e):Wi(e)}function $e(e,t){var i=e.nodeName,n=t.nodeName,s,r;return i===n?!0:(s=i.charCodeAt(0),r=n.charCodeAt(0),s<=90&&r>=97?i===n.toUpperCase():r<=90&&s>=97?n===i.toUpperCase():!1)}function qi(e,t){return!t||t===Ui?j.createElement(e):j.createElementNS(t,e)}function Ki(e,t){for(var i=e.firstChild;i;){var n=i.nextSibling;t.appendChild(i),i=n}return t}function lt(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var Mt={OPTION:function(e,t){var i=e.parentNode;if(i){var n=i.nodeName.toUpperCase();n==="OPTGROUP"&&(i=i.parentNode,n=i&&i.nodeName.toUpperCase()),n==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}lt(e,t,"selected")},INPUT:function(e,t){lt(e,t,"checked"),lt(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var n=e.firstChild;if(n){var s=n.nodeValue;if(s==i||!i&&s==e.placeholder)return;n.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,n=0,s=e.firstChild,r,a;s;)if(a=s.nodeName&&s.nodeName.toUpperCase(),a==="OPTGROUP")r=s,s=r.firstChild;else{if(a==="OPTION"){if(s.hasAttribute("selected")){i=n;break}n++}s=s.nextSibling,!s&&r&&(s=r.nextSibling,r=null)}e.selectedIndex=i}}},Ee=1,Gi=11,jt=3,Ut=8;function de(){}function Yi(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function Zi(e){return function(i,n,s){if(s||(s={}),typeof n=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var r=n;n=j.createElement("html"),n.innerHTML=r}else n=Xi(n);var a=s.getNodeKey||Yi,o=s.onBeforeNodeAdded||de,l=s.onNodeAdded||de,c=s.onBeforeElUpdated||de,p=s.onElUpdated||de,v=s.onBeforeNodeDiscarded||de,g=s.onNodeDiscarded||de,h=s.onBeforeElChildrenUpdated||de,u=s.childrenOnly===!0,f=Object.create(null),b=[];function y(E){b.push(E)}function S(E,C){if(E.nodeType===Ee)for(var A=E.firstChild;A;){var _=void 0;C&&(_=a(A))?y(_):(g(A),A.firstChild&&S(A,C)),A=A.nextSibling}}function d(E,C,A){v(E)!==!1&&(C&&C.removeChild(E),g(E),S(E,A))}function k(E){if(E.nodeType===Ee||E.nodeType===Gi)for(var C=E.firstChild;C;){var A=a(C);A&&(f[A]=C),k(C),C=C.nextSibling}}k(i);function T(E){l(E);for(var C=E.firstChild;C;){var A=C.nextSibling,_=a(C);if(_){var P=f[_];P&&$e(C,P)?(C.parentNode.replaceChild(P,C),q(P,C)):T(C)}else T(C);C=A}}function F(E,C,A){for(;C;){var _=C.nextSibling;(A=a(C))?y(A):d(C,E,!0),C=_}}function q(E,C,A){var _=a(C);_&&delete f[_],!(!A&&(c(E,C)===!1||(e(E,C),p(E),h(E,C)===!1)))&&(E.nodeName!=="TEXTAREA"?M(E,C):Mt.TEXTAREA(E,C))}function M(E,C){var A=C.firstChild,_=E.firstChild,P,O,B,J,z;e:for(;A;){for(J=A.nextSibling,P=a(A);_;){if(B=_.nextSibling,A.isSameNode&&A.isSameNode(_)){A=J,_=B;continue e}O=a(_);var ce=_.nodeType,N=void 0;if(ce===A.nodeType&&(ce===Ee?(P?P!==O&&((z=f[P])?B===z?N=!1:(E.insertBefore(z,_),O?y(O):d(_,E,!0),_=z):N=!1):O&&(N=!1),N=N!==!1&&$e(_,A),N&&q(_,A)):(ce===jt||ce==Ut)&&(N=!0,_.nodeValue!==A.nodeValue&&(_.nodeValue=A.nodeValue))),N){A=J,_=B;continue e}O?y(O):d(_,E,!0),_=B}if(P&&(z=f[P])&&$e(z,A))E.appendChild(z),q(z,A);else{var te=o(A);te!==!1&&(te&&(A=te),A.actualize&&(A=A.actualize(E.ownerDocument||j)),E.appendChild(A),T(A))}A=J,_=B}F(E,_,O);var oe=Mt[E.nodeName];oe&&oe(E,C)}var x=i,R=x.nodeType,I=n.nodeType;if(!u){if(R===Ee)I===Ee?$e(i,n)||(g(i),x=Ki(i,qi(n.nodeName,n.namespaceURI))):x=n;else if(R===jt||R===Ut){if(I===R)return x.nodeValue!==n.nodeValue&&(x.nodeValue=n.nodeValue),x;x=n}}if(x===n)g(i);else{if(n.isSameNode&&n.isSameNode(x))return;if(q(x,n,u),b)for(var L=0,D=b.length;L<D;L++){var U=f[b[L]];U&&d(U,U.parentNode,!1)}}return!u&&x!==i&&i.parentNode&&(x.actualize&&(x=x.actualize(i.ownerDocument||j)),i.parentNode.replaceChild(x,i)),x}}var Qi=Zi(ji),Bt=Qi,Me=class{static patchEl(e,t,i){Bt(e,t,{childrenOnly:!1,onBeforeElUpdated:(n,s)=>{if(i&&i.isSameNode(n)&&m.isFormInput(n))return m.mergeFocusedInput(n,s),!1}})}constructor(e,t,i,n,s){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=n,this.targetCID=s,this.cidPatch=re(this.targetCID),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){m.all(this.container,"[phx-update=append] > *, [phx-update=prepend] > *",e=>{e.setAttribute(kt,"")})}perform(){let{view:e,liveSocket:t,container:i,html:n}=this,s=this.isCIDPatch()?this.targetCIDContainer(n):i;if(this.isCIDPatch()&&!s)return;let r=t.getActiveElement(),{selectionStart:a,selectionEnd:o}=r&&m.hasSelectionRange(r)?r:{},l=t.binding(it),c=t.binding(Qe),p=t.binding(tt),v=t.binding(yi),g=t.binding("remove"),h=[],u=[],f=[],b=[],y=null,S=t.time("premorph container prep",()=>this.buildDiffHTML(i,n,l,s));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{Bt(s,S,{childrenOnly:s.getAttribute(W)===null,getNodeKey:d=>m.isPhxDestroyed(d)?null:d.id,onBeforeNodeAdded:d=>(this.trackBefore("added",d),d),onNodeAdded:d=>{d instanceof HTMLImageElement&&d.srcset?d.srcset=d.srcset:d instanceof HTMLVideoElement&&d.autoplay&&d.play(),m.isNowTriggerFormExternal(d,v)&&(y=d),m.discardError(s,d,c),(m.isPhxChild(d)&&e.ownsElement(d)||m.isPhxSticky(d)&&e.ownsElement(d.parentNode))&&this.trackAfter("phxChildAdded",d),h.push(d)},onNodeDiscarded:d=>{(m.isPhxChild(d)||m.isPhxSticky(d))&&t.destroyViewByEl(d),this.trackAfter("discarded",d)},onBeforeNodeDiscarded:d=>d.getAttribute&&d.getAttribute(kt)!==null?!0:d.parentNode!==null&&m.isPhxUpdate(d.parentNode,l,["append","prepend"])&&d.id?!1:d.getAttribute&&d.getAttribute(g)?(b.push(d),!1):!this.skipCIDSibling(d),onElUpdated:d=>{m.isNowTriggerFormExternal(d,v)&&(y=d),u.push(d)},onBeforeElUpdated:(d,k)=>{if(m.cleanChildNodes(k,l),this.skipCIDSibling(k)||m.isPhxSticky(d))return!1;if(m.isIgnored(d,l))return this.trackBefore("updated",d,k),m.mergeAttrs(d,k,{isIgnored:!0}),u.push(d),m.applyStickyOperations(d),!1;if(d.type==="number"&&d.validity&&d.validity.badInput)return!1;if(!m.syncPendingRef(d,k,p))return m.isUploadInput(d)&&(this.trackBefore("updated",d,k),u.push(d)),m.applyStickyOperations(d),!1;if(m.isPhxChild(k)){let F=d.getAttribute(se);return m.mergeAttrs(d,k,{exclude:[we]}),F!==""&&d.setAttribute(se,F),d.setAttribute(ye,this.rootID),m.applyStickyOperations(d),!1}return m.copyPrivates(k,d),m.discardError(s,k,c),r&&d.isSameNode(r)&&m.isFormInput(d)?(this.trackBefore("updated",d,k),m.mergeFocusedInput(d,k),m.syncAttrsToProps(d),u.push(d),m.applyStickyOperations(d),!1):(m.isPhxUpdate(k,l,["append","prepend"])&&f.push(new Mi(d,k,k.getAttribute(l))),m.syncAttrsToProps(k),m.applyStickyOperations(k),this.trackBefore("updated",d,k),!0)}})}),t.isDebugEnabled()&&Ii(),f.length>0&&t.time("post-morph append/prepend restoration",()=>{f.forEach(d=>d.perform())}),t.silenceEvents(()=>m.restoreFocus(r,a,o)),m.dispatchEvent(document,"phx:update"),h.forEach(d=>this.trackAfter("added",d)),u.forEach(d=>this.trackAfter("updated",d)),b.length>0&&(t.transitionRemoves(b),t.requestDOMUpdate(()=>{b.forEach(d=>{let k=m.firstPhxChild(d);k&&t.destroyViewByEl(k),d.remove()}),this.trackAfter("transitionsDiscarded",b)})),y&&(t.disconnect(),y.submit()),!0}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(Ge)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=m.findComponentNodeList(this.container,this.targetCID);return i.length===0&&m.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,n){let s=this.isCIDPatch(),r=s&&n.getAttribute(W)===this.targetCID.toString();if(!s||r)return t;{let a=null,o=document.createElement("template");a=m.cloneNode(n);let[l,...c]=m.findComponentNodeList(a,this.targetCID);return o.innerHTML=t,c.forEach(p=>p.remove()),Array.from(a.childNodes).forEach(p=>{p.id&&p.nodeType===Node.ELEMENT_NODE&&p.getAttribute(W)!==this.targetCID.toString()&&(p.setAttribute(Ge,""),p.innerHTML="")}),Array.from(o.content.childNodes).forEach(p=>a.insertBefore(p,l)),l.remove(),a.outerHTML}}},Jt=class{static extract(e){let{[Ot]:t,[Dt]:i,[Nt]:n}=e;return delete e[Ot],delete e[Dt],delete e[Nt],{diff:e,title:n,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){return this.recursiveToString(this.rendered,this.rendered[X],e)}recursiveToString(e,t=e[X],i){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i};return this.toOutputBuffer(e,null,n),n.buffer}componentCIDs(e){return Object.keys(e[X]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[X]?Object.keys(e).length===1:!1}getComponent(e,t){return e[X][t]}mergeDiff(e){let t=e[X],i={};if(delete e[X],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[X]=this.rendered[X]||{},t){let n=this.rendered[X];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],n,t,i);for(let s in t)n[s]=t[s];e[X]=t}}cachedFindComponent(e,t,i,n,s){if(s[e])return s[e];{let r,a,o=t[Q];if(re(o)){let l;o>0?l=this.cachedFindComponent(o,n[o],i,n,s):l=i[-o],a=l[Q],r=this.cloneMerge(l,t),r[Q]=a}else r=t[Q]!==void 0?t:this.cloneMerge(i[e]||{},t);return s[e]=r,r}}mutableMerge(e,t){return t[Q]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let n=t[i],s=e[i];Ae(n)&&n[Q]===void 0&&Ae(s)?this.doMutableMerge(s,n):e[i]=n}}cloneMerge(e,t){let i=ge(ge({},e),t);for(let n in i){let s=t[n],r=e[n];Ae(s)&&s[Q]===void 0&&Ae(r)&&(i[n]=this.cloneMerge(r,s))}return i}componentToString(e){return this.recursiveCIDToString(this.rendered[X],e)}pruneCIDs(e){e.forEach(t=>delete this.rendered[X][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[Q]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[It])return this.comprehensionToBuffer(e,t,i);let{[Q]:n}=e;n=this.templateStatic(n,t),i.buffer+=n[0];for(let s=1;s<n.length;s++)this.dynamicToBuffer(e[s-1],t,i),i.buffer+=n[s]}comprehensionToBuffer(e,t,i){let{[It]:n,[Q]:s}=e;s=this.templateStatic(s,t);let r=t||e[Li];for(let a=0;a<n.length;a++){let o=n[a];i.buffer+=s[0];for(let l=1;l<s.length;l++)this.dynamicToBuffer(o[l-1],r,i),i.buffer+=s[l]}}dynamicToBuffer(e,t,i){typeof e=="number"?i.buffer+=this.recursiveCIDToString(i.components,e,i.onlyCids):Ae(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let n=e[t]||H(`no component for CID ${t}`,e),s=document.createElement("template");s.innerHTML=this.recursiveToString(n,e,i);let r=s.content,a=i&&!i.has(t),[o,l]=Array.from(r.childNodes).reduce(([c,p],v,g)=>v.nodeType===Node.ELEMENT_NODE?v.getAttribute(W)?[c,!0]:(v.setAttribute(W,t),v.id||(v.id=`${this.parentViewId()}-${t}-${g}`),a&&(v.setAttribute(Ge,""),v.innerHTML=""),[!0,p]):v.nodeValue.trim()!==""?(H(`only HTML element tags are allowed at the root of components.

got: "${v.nodeValue.trim()}"

within:
`,s.innerHTML.trim()),v.replaceWith(this.createSpan(v.nodeValue,t)),[!0,p]):(v.remove(),[c,p]),[!1,!1]);return!o&&!l?(H(`expected at least one HTML element tag inside a component, but the component is empty:
`,s.innerHTML.trim()),this.createSpan("",t).outerHTML):(!o&&l&&H("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",s.innerHTML.trim()),s.innerHTML)}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(W,t),i}},en=1,Ce=class{static makeID(){return en++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.__liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(null,e,t,i)}pushEventTo(e,t,i={},n=function(){}){return this.__view.withinTargets(e,(s,r)=>s.pushHookEvent(r,t,i,n))}handleEvent(e,t){let i=(n,s)=>s?e:t(n.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,n=>n.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},tn={exec(e,t,i,n,s){let[r,a]=s||[null,{}];(t.charAt(0)==="["?JSON.parse(t):[[r,a]]).forEach(([l,c])=>{l===r&&a.data&&(c.data=Object.assign(c.data||{},a.data)),this.filterToEls(n,c).forEach(p=>{this[`exec_${l}`](e,t,i,n,p,c)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_dispatch(e,t,i,n,s,{to:r,event:a,detail:o}){m.dispatchEvent(s,a,o)},exec_push(e,t,i,n,s,r){let{event:a,data:o,target:l,page_loading:c,loading:p,value:v}=r,g={loading:p,value:v,target:l,page_loading:!!c},h=e==="change"?n.form:n,u=l||h.getAttribute(i.binding("target"))||h;i.withinTargets(u,(f,b)=>{if(e==="change"){let{newCid:y,_target:S,callback:d}=r;S&&(g._target=S),f.pushInput(n,b,y,a||t,g,d)}else e==="submit"?f.submitForm(n,b,a||t,g):f.pushEvent(e,n,b,a||t,o,g)})},exec_add_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,r,[],a,o,i)},exec_remove_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,[],r,a,o,i)},exec_transition(e,t,i,n,s,{time:r,transition:a}){let[o,l,c]=a,p=()=>this.addOrRemoveClasses(s,o.concat(l),[]),v=()=>this.addOrRemoveClasses(s,c,o.concat(l));i.transition(r,p,v)},exec_toggle(e,t,i,n,s,{display:r,ins:a,outs:o,time:l}){this.toggle(e,i,s,r,a,o,l)},exec_show(e,t,i,n,s,{display:r,transition:a,time:o}){this.show(e,i,s,r,a,o)},exec_hide(e,t,i,n,s,{display:r,transition:a,time:o}){this.hide(e,i,s,r,a,o)},exec_set_attr(e,t,i,n,s,{attr:[r,a]}){this.setOrRemoveAttrs(s,[[r,a]],[])},exec_remove_attr(e,t,i,n,s,{attr:r}){this.setOrRemoveAttrs(s,[],[r])},show(e,t,i,n,s,r){this.isVisible(i)||this.toggle(e,t,i,n,s,null,r)},hide(e,t,i,n,s,r){this.isVisible(i)&&this.toggle(e,t,i,n,null,s,r)},toggle(e,t,i,n,s,r,a){let[o,l,c]=s||[[],[],[]],[p,v,g]=r||[[],[],[]];if(o.length>0||p.length>0)if(this.isVisible(i)){let h=()=>{this.addOrRemoveClasses(i,v,o.concat(l).concat(c)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,p,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,g,v))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(a,h,()=>{this.addOrRemoveClasses(i,[],p.concat(g)),m.putSticky(i,"toggle",u=>u.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let h=()=>{this.addOrRemoveClasses(i,l,p.concat(v).concat(g)),m.putSticky(i,"toggle",u=>u.style.display=n||"block"),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,o,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,c,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(a,h,()=>{this.addOrRemoveClasses(i,[],o.concat(c)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),m.putSticky(i,"toggle",h=>h.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start")),m.putSticky(i,"toggle",h=>h.style.display=n||"block"),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,n,s,r){let[a,o,l]=n||[[],[],[]];if(a.length>0){let c=()=>this.addOrRemoveClasses(e,o.concat(a),[]),p=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(a).concat(o));return r.transition(s,c,p)}window.requestAnimationFrame(()=>{let[c,p]=m.getSticky(e,"classes",[[],[]]),v=t.filter(f=>c.indexOf(f)<0&&!e.classList.contains(f)),g=i.filter(f=>p.indexOf(f)<0&&e.classList.contains(f)),h=c.filter(f=>i.indexOf(f)<0).concat(v),u=p.filter(f=>t.indexOf(f)<0).concat(g);m.putSticky(e,"classes",f=>(f.classList.remove(...u),f.classList.add(...h),[h,u]))})},setOrRemoveAttrs(e,t,i){let[n,s]=m.getSticky(e,"attrs",[[],[]]),r=t.filter(([c,p])=>!this.hasSet(n,c)&&!e.attributes.getNamedItem(c)),a=i.filter(c=>s.indexOf(c)<0&&e.attributes.getNamedItem(c)),o=n.filter(([c,p])=>i.indexOf(c)<0).concat(r),l=s.filter(c=>!this.hasSet(t,c)).concat(a);m.putSticky(e,"attrs",c=>(l.forEach(p=>c.removeAttribute(p)),o.forEach(([p,v])=>c.setAttribute(p,v)),[o,l]))},hasSet(e,t){return e.find(([i,n])=>i===t)},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?m.all(document,t):[e]}},ee=tn,ht=(e,t={})=>{let i=new FormData(e),n=[];i.forEach((r,a,o)=>{r instanceof File&&n.push(a)}),n.forEach(r=>i.delete(r));let s=new URLSearchParams;for(let[r,a]of i.entries())s.append(r,a);for(let r in t)s.append(r,t[r]);return s.toString()},zt=class{constructor(e,t,i,n){this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(s){s&&s()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(),session:this.getSession(),static:this.getStatic(),flash:this.flash})),this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel()}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.getAttribute(Ze)!==null}connectParams(){let e=this.liveSocket.params(this.el),t=m.all(document,`[${this.binding(mi)}]`).map(i=>i.src||i.href).filter(i=>typeof i=="string");return t.length>0&&(e._track_static=t),e._mounts=this.joinCount,e}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(se)}getStatic(){let e=this.el.getAttribute(we);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};m.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(At,Ye,Ct),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(Ye)}}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(At)}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(re(e))m.findComponentNodeList(this.el,e).length===0?H(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&H(`nothing found matching the phx-target selector "${e}"`),i.forEach(n=>this.liveSocket.owner(n,s=>t(s,n)))}}applyDiff(e,t,i){this.log(e,()=>["",Fe(t)]);let{diff:n,reply:s,events:r,title:a}=Jt.extract(t);return a&&m.putTitle(a),i({diff:n,reply:s,events:r}),s}onJoin(e){let{rendered:t,container:i}=e;if(i){let[n,s]=i;this.el=m.replaceRootContainer(this.el,n,s)}this.childJoins=0,this.joinPending=!0,this.flash=null,ae.dropLocal(this.liveSocket.localStorage,window.location.pathname,vt),this.applyDiff("mount",t,({diff:n,events:s})=>{this.rendered=new Jt(this.id,n);let r=this.renderContainer(null,"join");this.dropPendingRefs();let a=this.formsForRecovery(r);this.joinCount++,a.length>0?a.forEach(([o,l,c],p)=>{this.pushFormRecovery(o,c,v=>{p===a.length-1&&this.onJoinComplete(v,r,s)})}):this.onJoinComplete(e,r,s)})}dropPendingRefs(){m.all(document,`[${le}="${this.id}"][${Y}]`,e=>{e.removeAttribute(Y),e.removeAttribute(le)})}onJoinComplete({live_patch:e},t,i){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i);m.findPhxChildrenInFragment(t,this.id).filter(s=>{let r=s.id&&this.el.querySelector(`[id="${s.id}"]`),a=r&&r.getAttribute(we);return a&&s.setAttribute(we,a),this.joinChild(s)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)])}attachTrueDocEl(){this.el=m.byId(this.id),this.el.setAttribute(ye,this.root.id)}applyJoinPatch(e,t,i){this.attachTrueDocEl();let n=new Me(this,this.el,this.id,t,null);if(n.markPrunableContentForRemoval(),this.performPatch(n,!1),this.joinNewChildren(),m.all(this.el,`[${this.binding(Oe)}], [data-phx-${Oe}]`,s=>{let r=this.addHook(s);r&&r.__mounted()}),this.joinPending=!1,this.liveSocket.dispatchEvents(i),this.applyPendingUpdates(),e){let{kind:s,to:r}=e;this.liveSocket.historyPatch(r,s)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&m.isIgnored(e,this.binding(it));if(i&&!e.isEqualNode(t)&&!(n&&Oi(e.dataset,t.dataset)))return i.__beforeUpdate(),i}performPatch(e,t){let i=[],n=!1,s=new Set;return e.after("added",r=>{this.liveSocket.triggerDOM("onNodeAdded",[r]);let a=this.addHook(r);a&&a.__mounted()}),e.after("phxChildAdded",r=>{m.isPhxSticky(r)?this.liveSocket.joinRootViews():n=!0}),e.before("updated",(r,a)=>{this.triggerBeforeUpdateHook(r,a)&&s.add(r.id)}),e.after("updated",r=>{s.has(r.id)&&this.getHook(r).__updated()}),e.after("discarded",r=>{r.nodeType===Node.ELEMENT_NODE&&i.push(r)}),e.after("transitionsDiscarded",r=>this.afterElementsRemoved(r,t)),e.perform(),this.afterElementsRemoved(i,t),n}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{m.all(n,`[${W}]`).concat(n).forEach(r=>{let a=this.componentID(r);re(a)&&i.indexOf(a)===-1&&i.push(a);let o=this.getHook(r);o&&this.destroyHook(o)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){m.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(ue)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new zt(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{m.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):Ft(e)||this.liveSocket.time("full patch complete",()=>{let n=this.renderContainer(e,"update"),s=new Me(this,this.el,this.id,n,null);i=this.performPatch(s,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,s=this.rendered.toString(n);return`<${i}>${s}</${i}>`})}componentPatch(e,t){if(Ft(e))return!1;let i=this.rendered.componentToString(t),n=new Me(this,this.el,this.id,i,t);return this.performPatch(n,!0)}getHook(e){return this.viewHooks[Ce.elementID(e)]}addHook(e){if(Ce.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Oe}`)||e.getAttribute(this.binding(Oe));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||H(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let n=new Ce(this,e,i);return this.viewHooks[Ce.elementID(n.el)]=n,n}else t!==null&&H(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[Ce.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[]}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){for(let e in this.root.children[this.id])this.getChildById(e).destroy()}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}join(e){this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){return e.reason==="unauthorized"||e.reason==="stale"?(this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href})):((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect?this.onRedirect(e.redirect):e.live_redirect?this.onLiveRedirect(e.live_redirect):(this.log("error",()=>["unable to join",e]),this.liveSocket.reloadWithJitter(this)))}onClose(e){if(!this.isDestroyed()){if(this.isJoinPending()&&document.visibilityState!=="hidden"||this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(_i)}}onError(e){this.onClose(e),this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||this.displayError()}displayError(){this.isMain()&&m.dispatchEvent(window,"phx:page-loading-start",{to:this.href,kind:"error"}),this.showLoader(),this.setContainerClasses(Ye,Ct)}pushWithReply(e,t,i,n=function(){}){if(!this.isConnected())return;let[s,[r],a]=e?e():[null,[],{}],o=function(){};return(a.page_loading||r&&r.getAttribute(this.binding(St))!==null)&&(o=this.liveSocket.withPageLoading({kind:"element",target:r})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,Ti).receive("ok",l=>{s!==null&&this.undoRefs(s);let c=p=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),o(),n(l,p)};l.diff?this.liveSocket.requestDOMUpdate(()=>{let p=this.applyDiff("update",l.diff,({diff:v,events:g})=>{this.update(v,g)});c(p)}):c(null)}))}undoRefs(e){m.all(document,`[${le}="${this.id}"][${Y}="${e}"]`,t=>{let i=t.getAttribute(Ie);t.removeAttribute(Y),t.removeAttribute(le),t.getAttribute(et)!==null&&(t.readOnly=!1,t.removeAttribute(et)),i!==null&&(t.disabled=i==="true",t.removeAttribute(Ie)),bt.forEach(r=>m.removeClass(t,r));let n=t.getAttribute(De);n!==null&&(t.innerText=n,t.removeAttribute(De));let s=m.private(t,Y);if(s){let r=this.triggerBeforeUpdateHook(t,s);Me.patchEl(t,s,this.liveSocket.getActiveElement()),r&&r.__updated(),m.deletePrivate(t,Y)}})}putRef(e,t,i={}){let n=this.ref++,s=this.binding(tt);return i.loading&&(e=e.concat(m.all(document,i.loading))),e.forEach(r=>{r.classList.add(`phx-${t}-loading`),r.setAttribute(Y,n),r.setAttribute(le,this.el.id);let a=r.getAttribute(s);a!==null&&(r.getAttribute(De)||r.setAttribute(De,r.innerText),a!==""&&(r.innerText=a),r.setAttribute("disabled",""))}),[n,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(W);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(re(t))return t;let n=e.getAttribute(this.binding("target"));return re(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return re(e)?e:e?ne(e.closest(`[${W}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",t,i]),!1;let[s,r,a]=this.putRef([],"hook");return this.pushWithReply(()=>[s,r,a],"event",{type:"hook",event:t,value:i,cid:this.closestComponentID(e)},(o,l)=>n(l,s)),s}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let r=e.attributes[s].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&xt.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,r={}){this.pushWithReply(()=>this.putRef([t],e,r),"event",{type:e,event:n,value:this.extractMeta(t,s,r.value),cid:this.targetComponentID(t,i,r)})}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,r)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(Ei)),ref:e.getAttribute(he),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,r)},n)})}pushInput(e,t,i,n,s,r){let a,o=re(i)?i:this.targetComponentID(e.form,t),l=()=>this.putRef([e,e.form],"change",s),c=ht(e.form,{_target:s._target});m.isUploadInput(e)&&e.files&&e.files.length>0&&$.trackFiles(e,Array.from(e.files)),a=$.serializeUploads(e);let p={type:"form",event:n,value:c,uploads:a,cid:o};this.pushWithReply(l,"event",p,v=>{if(m.showError(e,this.liveSocket.binding(Qe)),m.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if($.filesAwaitingPreflight(e).length>0){let[g,h]=l();this.uploadFiles(e.form,t,g,o,u=>{r&&r(v),this.triggerAwaitingSubmit(e.form)})}}else r&&r(v)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,n,s,r]=t;this.cancelSubmit(e),r()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,n])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}pushFormSubmit(e,t,i,n,s){let r=v=>!(Se(v,`${this.binding(it)}=ignore`,v.form)||Se(v,"data-phx-update=ignore",v.form)),a=v=>v.hasAttribute(this.binding(tt)),o=v=>v.tagName=="BUTTON",l=v=>["INPUT","TEXTAREA","SELECT"].includes(v.tagName),c=()=>{let v=Array.from(e.elements),g=v.filter(a),h=v.filter(o).filter(r),u=v.filter(l).filter(r);return h.forEach(f=>{f.setAttribute(Ie,f.disabled),f.disabled=!0}),u.forEach(f=>{f.setAttribute(et,f.readOnly),f.readOnly=!0,f.files&&(f.setAttribute(Ie,f.disabled),f.disabled=!0)}),e.setAttribute(this.binding(St),""),this.putRef([e].concat(g).concat(h).concat(u),"submit",n)},p=this.targetComponentID(e,t);if($.hasUploadsInProgress(e)){let[v,g]=c(),h=()=>this.pushFormSubmit(e,t,i,n,s);return this.scheduleSubmit(e,v,n,h)}else if($.inputsAwaitingPreflight(e).length>0){let[v,g]=c(),h=()=>[v,g,n];this.uploadFiles(e,t,v,p,u=>{let f=ht(e,{});this.pushWithReply(h,"event",{type:"form",event:i,value:f,cid:p},s)})}else{let v=ht(e);this.pushWithReply(c,"event",{type:"form",event:i,value:v,cid:p},s)}}uploadFiles(e,t,i,n,s){let r=this.joinCount,a=$.activeFileInputs(e),o=a.length;a.forEach(l=>{let c=new $(l,this,()=>{o--,o===0&&s()});this.uploaders[l]=c;let p=c.entries().map(g=>g.toPreflightPayload()),v={ref:l.getAttribute(he),entries:p,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",v]),this.pushWithReply(null,"allow_upload",v,g=>{if(this.log("upload",()=>["got preflight response",g]),g.error){this.undoRefs(i);let[h,u]=g.error;this.log("upload",()=>[`error for entry ${h}`,u])}else{let h=u=>{this.channel.onError(()=>{this.joinCount===r&&u()})};c.initAdapterUpload(g,h,this.liveSocket)}})})}dispatchUploads(e,t){let i=m.findUploadInputs(this.el).filter(n=>n.name===e);i.length===0?H(`no live file inputs found matching the name "${e}"`):i.length>1?H(`duplicate live file inputs found matching the name "${e}"`):m.dispatchEvent(i[0],yt,{files:t})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(n,s)=>{let r=e.elements[0],a=e.getAttribute(this.binding(Lt))||e.getAttribute(this.binding("change"));ee.exec("change",a,n,r,["push",{_target:r.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let n=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,r=()=>this.liveSocket.redirect(window.location.href),a=this.pushWithReply(s,"live_patch",{url:e},o=>{this.liveSocket.requestDOMUpdate(()=>{o.link_redirect?this.liveSocket.replaceMain(e,null,i,n):(this.liveSocket.commitPendingLink(n)&&(this.href=e),this.applyPendingUpdates(),i&&i(n))})});a?a.receive("timeout",r):r()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,m.all(this.el,`form[${t}]`).filter(n=>n.id&&this.ownsElement(n)).filter(n=>n.elements.length>0).filter(n=>n.getAttribute(this.binding(Lt))!=="ignore").map(n=>{let s=i.content.querySelector(`form[id="${n.id}"][${t}="${n.getAttribute(t)}"]`);return s?[n,s,this.targetComponentID(s)]:[n,null,null]}).filter(([n,s,r])=>s)}maybePushComponentsDestroyed(e){let t=e.filter(i=>m.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(n=>t.indexOf(n)!==-1);let i=t.filter(n=>m.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},n=>{this.rendered.pruneCIDs(n.cids)})}))}ownsElement(e){return e.getAttribute(ue)===this.id||ne(e.closest(fe),t=>t.id)===this.id}submitForm(e,t,i,n={}){m.putPrivate(e,Tt,!0);let s=this.liveSocket.binding(Qe),r=Array.from(e.elements);this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,()=>{r.forEach(a=>m.showError(a,s)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},Vt=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||xi,this.opts=i,this.params=at(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(Fe(Pi),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.linkRef=1,this.clickRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Fe(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||Ci,this.maxReloads=i.maxReloads||ui,this.reloadJitterMin=i.reloadJitterMin||fi,this.reloadJitterMax=i.reloadJitterMax||pi,this.failsafeJitter=i.failsafeJitter||gi,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:at(),onBeforeElUpdated:at()},i.dom||{}),this.transitions=new nn,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(st)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(nt)==="true"}enableDebug(){this.sessionStorage.setItem(nt,"true")}enableProfiling(){this.sessionStorage.setItem(st,"true")}disableDebug(){this.sessionStorage.removeItem(nt)}disableProfiling(){this.sessionStorage.removeItem(st)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(rt,e)}disableLatencySim(){this.sessionStorage.removeItem(rt)}getLatencySim(){let e=this.sessionStorage.getItem(rt);return e?parseInt(e):null}getSocket(){return this.socket}connect(){let e=()=>{this.joinRootViews()&&(this.bindTopLevelEvents(),this.socket.connect())};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){this.socket.disconnect(e)}execJS(e,t,i=null){this.owner(e,n=>ee.exec(i,t,n,e))}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[n,s]=i();this.viewLogger(e,t,n,s)}else if(this.isDebugEnabled()){let[n,s]=i();Di(e,t,n,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,n=>{let s=this.getLatencySim();s?(console.log(`simulating ${s}ms of latency from server to client`),setTimeout(()=>i(n),s)):i(n)})}wrapPush(e,t,i){let n=this.getLatencySim(),s=e.joinCount;if(!n)return t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();console.log(`simulating ${n}ms of latency from client to server`);let r={receives:[],receive(a,o){this.receives.push([a,o])}};return setTimeout(()=>{e.isDestroyed()||r.receives.reduce((a,[o,l])=>a.receive(o,l),i())},n),r}reloadWithJitter(e,t){e.destroy(),this.disconnect();let i=this.reloadJitterMin,n=this.reloadJitterMax,s=Math.floor(Math.random()*(n-i+1))+i,r=ae.updateLocal(this.localStorage,window.location.pathname,vt,0,a=>a+1);t?t():this.log(e,"join",()=>[`encountered ${r} consecutive reloads`]),r>this.maxReloads&&(this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),s=this.failsafeJitter),setTimeout(()=>{this.hasPendingLink()?window.location=this.pendingLink:window.location.reload()},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?$i[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinRootViews(){let e=!1;return m.all(document,`${fe}:not([${ue}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.getAttribute(Ze)&&(this.main=i)}e=!0}),e}redirect(e,t){this.disconnect(),ae.redirect(e,t)}replaceMain(e,t,i=null,n=this.setPendingLink(e)){let s=this.main.el,r=m.cloneNode(s,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(r,t),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((a,o)=>{a===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{m.findPhxSticky(document).forEach(l=>r.appendChild(l)),s.replaceWith(r),i&&i(),o()})})}transitionRemoves(e){let t=this.binding("remove");e=e||m.all(document,`[${t}]`),e.forEach(i=>{document.body.contains(i)&&this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(se)!==null}newRootView(e,t){let i=new zt(e,this,null,t);return this.roots[i.id]=i,i}owner(e,t){let i=ne(e.closest(fe),n=>this.getViewByEl(n))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(ye);return ne(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e]}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(ye));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents(){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(e=>{e.code===1e3&&this.main&&this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),this.bindNav(),this.bindClicks(),this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,i,n,s,r)=>{let a=n.getAttribute(this.binding(Ai)),o=e.key&&e.key.toLowerCase();if(a&&a.toLowerCase()!==o)return;let l=ge({key:e.key},this.eventMeta(t,e,n));ee.exec(t,s,i,n,["push",{data:l}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,i,n,s,r)=>{if(!r){let a=ge({key:e.key},this.eventMeta(t,e,n));ee.exec(t,s,i,n,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,i,n,s,r,a)=>{if(a==="window"){let o=this.eventMeta(t,e,n);ee.exec(t,r,i,n,["push",{data:o}])}}),window.addEventListener("dragover",e=>e.preventDefault()),window.addEventListener("drop",e=>{e.preventDefault();let t=ne(Se(e.target,this.binding(wt)),s=>s.getAttribute(this.binding(wt))),i=t&&document.getElementById(t),n=Array.from(e.dataTransfer.files||[]);!i||i.disabled||n.length===0||!(i.files instanceof FileList)||($.trackFiles(i,n),i.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(yt,e=>{let t=e.target;if(!m.isUploadInput(t))return;let i=Array.from(e.detail.files||[]).filter(n=>n instanceof File||n instanceof Blob);$.trackFiles(t,i),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let n=this.metadataCallbacks[e];return n?n(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let n=e[i];this.on(n,s=>{let r=this.binding(i),a=this.binding(`window-${i}`),o=s.target.getAttribute&&s.target.getAttribute(r);o?this.debounce(s.target,s,()=>{this.withinOwners(s.target,l=>{t(s,i,l,s.target,o,null)})}):m.all(document,`[${a}]`,l=>{let c=l.getAttribute(a);this.debounce(l,s,()=>{this.withinOwners(l,p=>{t(s,i,p,l,c,"window")})})})})}}bindClicks(){this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let n=this.binding(t);window.addEventListener(e,s=>{if(!this.isConnected())return;this.clickRef++;let r=this.clickRef,a=null;i?a=s.target.matches(`[${n}]`)?s.target:s.target.querySelector(`[${n}]`):(a=Se(s.target,n),this.dispatchClickAway(s,r));let o=a&&a.getAttribute(n);!o||(a.getAttribute("href")==="#"&&s.preventDefault(),this.debounce(a,s,()=>{this.withinOwners(a,l=>{ee.exec("click",o,l,a,["push",{data:this.eventMeta("click",s,a)}])})}))},i)}dispatchClickAway(e,t){let i=this.binding("click-away"),n=this.binding("click");m.all(document,`[${i}]`,s=>{s.isSameNode(e.target)||s.contains(e.target)||this.withinOwners(e.target,r=>{let a=s.getAttribute(i);if(ee.isVisible(s)){let o=e.target.closest(`[${n}]`)||e.target;ee.exec("click",a,r,s,["push",{data:this.eventMeta("click",e,e.target)}])}})})}bindNav(){if(!ae.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{ae.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:n,root:s,scroll:r}=t.state||{},a=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&n===this.main.id?this.main.pushLinkPatch(a,null):this.replaceMain(a,null,()=>{s&&this.replaceRootHistory(),typeof r=="number"&&setTimeout(()=>{window.scrollTo(0,r)},0)})})},!1),window.addEventListener("click",t=>{let i=Se(t.target,We),n=i&&i.getAttribute(We),s=t.metaKey||t.ctrlKey||t.button===1;if(!n||!this.isConnected()||!this.main||s)return;let r=i.href,a=i.getAttribute(vi);t.preventDefault(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(r,a,i);else if(n==="redirect")this.historyRedirect(r,a);else throw new Error(`expected ${We} to be "patch" or "redirect", got: ${n}`)})},!1)}dispatchEvent(e,t={}){m.dispatchEvent(window,`phx:${e}`,t)}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){m.dispatchEvent(window,"phx:page-loading-start",e);let i=()=>m.dispatchEvent(window,"phx:page-loading-stop",e);return t?t(i):i}pushHistoryPatch(e,t,i){this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(ae.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){let n=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,()=>{ae.pushState(t,{type:"redirect",id:this.main.id,scroll:n},e),this.registerNewLocation(window.location),s()})})}replaceRootHistory(){ae.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=Fe(e),!0)}bindForms(){let e=0;this.on("submit",t=>{let i=t.target.getAttribute(this.binding("submit"));!i||(t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,n=>{ee.exec("submit",i,n,t.target,["push",{}])}))},!1);for(let t of["change","input"])this.on(t,i=>{let n=i.target,s=n.form&&n.form.getAttribute(this.binding("change"));if(!s||n.type==="number"&&n.validity&&n.validity.badInput)return;let r=e;e++;let{at:a,type:o}=m.private(n,"prev-iteration")||{};a===r-1&&t!==o||(m.putPrivate(n,"prev-iteration",{at:r,type:t}),this.debounce(n,i,()=>{this.withinOwners(n.form,l=>{m.putPrivate(n,_t,!0),m.isTextualInput(n)||this.setActiveElement(n),ee.exec("change",s,l,n,["push",{_target:i.target.name}])})}))},!1)}debounce(e,t,i){let n=this.binding(ki),s=this.binding(Si),r=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();m.debounce(e,t,n,r,s,a,i)}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},nn=class{constructor(){this.transitions=new Set,this.pendingOps=[],this.reset()}reset(){this.transitions.forEach(e=>{cancelTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let n=setTimeout(()=>{this.transitions.delete(n),i(),this.size()===0&&this.flushPendingOps()},e);this.transitions.add(n)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){this.pendingOps.forEach(e=>e()),this.pendingOps=[]}};var Ue=ri(Wt());window.toggleNode=e=>{e.parentNode.querySelector(".menu-list").classList.toggle("is-hidden");let t=e.querySelector("span.icon > i");t.classList.toggle("fa-folder-open"),t.classList.toggle("fa-folder")};var pe={};pe.EventLog={updated(){let e=this.el.parentNode;e.scrollTop=e.scrollHeight}};window.handleEnableLatencySimClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=document.getElementById("debug_profile_latency_sim_value");if(e.checked){i.disabled=!1;let n=i.value||100;i.value=n,t.enableLatencySim(n)}else t.disableLatencySim(),i.disabled=!0;Xt()};window.handleEnableDebugClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableDebug():t.disableDebug()};window.handleEnableProfileClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableProfiling():t.disableProfiling()};window.handleLatencySimValueBlur=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=t.getLatencySim();if(e.value!=i){let n=e.value||1e3;e.value=n,t.enableLatencySim(n)}};function rn(e){let t=document.getElementById("playground-tools-debug-profile"),i=document.getElementById("playground-tools-debug-profile-disabled");if(!e){t.hidden=!0,i.hidden=!1;return}t.hidden=!1,i.hidden=!0;let n=document.getElementById("debug_profile_enable_debug");n.checked=e.isDebugEnabled();let s=document.getElementById("debug_profile_enable_profile");s.checked=e.isProfileEnabled();let r=document.getElementById("debug_profile_enable_latency_sim"),a=document.getElementById("debug_profile_latency_sim_value"),o=e.getLatencySim();o&&(r.checked=!0,a.value=o),Xt()}function Xt(){let e=document.getElementById("playground-iframe").contentWindow.liveSocket,t=document.getElementById("playground-tab-label");e.getLatencySim()?t.innerHTML='Playground <span class="is-size-6" title="Latency simulator is enabled">\u26A0\uFE0F</span>':t.innerText="Playground"}function qt(e){if(!e){console.log("[Catalogue] window.liveSocket has not been set. Debug/Profile tab will be disabled.");return}if(e.patched)return;let t=e.currentLocation.pathname,i=`phx:live-socket:debug:${t}`,n=`phx:live-socket:profiling:${t}`,s=`phx:live-socket:latency-sim:${t}`;e.enableLatencySim=function(r){console.log(`latency simulator enabled as ${r}ms for the duration of this browser session.`),sessionStorage.setItem(s,r)},e.disableLatencySim=function(){sessionStorage.removeItem(s)},e.getLatencySim=function(){let r=sessionStorage.getItem(s);return r?parseInt(r):null},e.isDebugEnabled=function(){return sessionStorage.getItem(i)==="true"},e.enableDebug=function(){sessionStorage.setItem(i,"true")},e.disableDebug=function(){sessionStorage.removeItem(i)},e.isProfileEnabled=function(){return sessionStorage.getItem(n)==="true"},e.enableProfiling=function(){sessionStorage.setItem(n,"true")},e.disableProfiling=function(){sessionStorage.removeItem(n)},e.patched=!0}var an=(e,t,i,n)=>{window.liveSocket.isDebugEnabled()?console.log(`${e.id} ${t}: ${i} - `,n):e.id=="playground"&&(qt(e.liveSocket),e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n))};pe.IframeBody={mounted(){let e=this.el;e.addEventListener("load",i=>{if(e.id=="playground-iframe"){let n=e.contentWindow.liveSocket;qt(n),rn(n)}});let t;e.contentWindow.addEventListener("resize",i=>{if(e.id=="playground-iframe"){e.offsetWidth>e.parentElement.offsetWidth&&(e.style.width="100%");let n=this;clearTimeout(t),t=setTimeout(function(){n.pushEvent("playground_resize",{height:e.style.height,width:e.style.width})},300)}})}};pe.Highlight={mounted(){Ue.default.highlightElement(this.el),Ue.default.highlightElement(this.el)},updated(){Ue.default.highlightElement(this.el)}};pe.Mermaid={mounted(){mermaid.init(void 0,`#${this.el.id}`)}};pe.SectionHeading={mounted(){let e=document.createElement("div");e.innerHTML=`<a href="#${this.el.id}" class="hover-link">
      <span class="icon-link" aria-hidden="true">
        <svg viewBox="0 0 16 16" version="1.1" width="20" height="20" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>
      </span>
    </a>`,this.el.insertBefore(e.firstChild,this.el.firstChild)}};var on=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Kt=new Vt("/live",mt,{params:{_csrf_token:on},hooks:pe,viewLogger:an});Kt.connect();window.liveSocket=Kt;})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vZGVwcy9zdXJmYWNlX2NhdGFsb2d1ZS9hc3NldHMvdmVuZG9yL3ByaXNtLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdXRpbHMuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvcHVzaC5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdGltZXIuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2NoYW5uZWwuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2FqYXguanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2xvbmdwb2xsLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9wcmVzZW5jZS5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvc2VyaWFsaXplci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvc29ja2V0LmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbnRyeV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91dGlscy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9icm93c2VyLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbS5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91cGxvYWRfZW50cnkuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvbGl2ZV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9ob29rcy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcG9zdF9tb3JwaF9yZXN0b3Jlci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9ub2RlX21vZHVsZXMvbW9ycGhkb20vZGlzdC9tb3JwaGRvbS1lc20uanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvZG9tX3BhdGNoLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3JlbmRlcmVkLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXdfaG9vay5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9qcy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy92aWV3LmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2xpdmVfc29ja2V0LmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvc3VyZmFjZV9jYXRhbG9ndWUvYXNzZXRzL2pzL2FwcC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLyogUHJpc21KUyAxLjIzLjBcbmh0dHA6Ly8xMjcuMC4wLjE6ODA4MC9kb3dubG9hZC5odG1sI3RoZW1lcz1wcmlzbSZsYW5ndWFnZXM9bWFya3VwK2NzcytjbGlrZStqYXZhc2NyaXB0K3N1cmZhY2UrZWxpeGlyJnBsdWdpbnM9bGluZS1oaWdobGlnaHQrbGluZS1udW1iZXJzICovXG52YXIgX3NlbGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlJiZzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGU/c2VsZjp7fSxQcmlzbT1mdW5jdGlvbih1KXt2YXIgYz0vXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaSxuPTAsZT17fSxNPXttYW51YWw6dS5QcmlzbSYmdS5QcmlzbS5tYW51YWwsZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyOnUuUHJpc20mJnUuUHJpc20uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyLHV0aWw6e2VuY29kZTpmdW5jdGlvbiBlKG4pe3JldHVybiBuIGluc3RhbmNlb2YgVz9uZXcgVyhuLnR5cGUsZShuLmNvbnRlbnQpLG4uYWxpYXMpOkFycmF5LmlzQXJyYXkobik/bi5tYXAoZSk6bi5yZXBsYWNlKC8mL2csXCImYW1wO1wiKS5yZXBsYWNlKC88L2csXCImbHQ7XCIpLnJlcGxhY2UoL1xcdTAwYTAvZyxcIiBcIil9LHR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKX0sb2JqSWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuX19pZHx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2lkXCIse3ZhbHVlOisrbn0pLGUuX19pZH0sY2xvbmU6ZnVuY3Rpb24gdChlLHIpe3ZhciBhLG47c3dpdGNoKHI9cnx8e30sTS51dGlsLnR5cGUoZSkpe2Nhc2VcIk9iamVjdFwiOmlmKG49TS51dGlsLm9iaklkKGUpLHJbbl0pcmV0dXJuIHJbbl07Zm9yKHZhciBpIGluIGE9e30scltuXT1hLGUpZS5oYXNPd25Qcm9wZXJ0eShpKSYmKGFbaV09dChlW2ldLHIpKTtyZXR1cm4gYTtjYXNlXCJBcnJheVwiOnJldHVybiBuPU0udXRpbC5vYmpJZChlKSxyW25dP3Jbbl06KGE9W10scltuXT1hLGUuZm9yRWFjaChmdW5jdGlvbihlLG4pe2Fbbl09dChlLHIpfSksYSk7ZGVmYXVsdDpyZXR1cm4gZX19LGdldExhbmd1YWdlOmZ1bmN0aW9uKGUpe2Zvcig7ZSYmIWMudGVzdChlLmNsYXNzTmFtZSk7KWU9ZS5wYXJlbnRFbGVtZW50O3JldHVybiBlPyhlLmNsYXNzTmFtZS5tYXRjaChjKXx8WyxcIm5vbmVcIl0pWzFdLnRvTG93ZXJDYXNlKCk6XCJub25lXCJ9LGN1cnJlbnRTY3JpcHQ6ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnQpcmV0dXJuIG51bGw7aWYoXCJjdXJyZW50U2NyaXB0XCJpbiBkb2N1bWVudClyZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdDt0cnl7dGhyb3cgbmV3IEVycm9yfWNhdGNoKGUpe3ZhciBuPSgvYXQgW14oXFxyXFxuXSpcXCgoLiopOi4rOi4rXFwpJC9pLmV4ZWMoZS5zdGFjayl8fFtdKVsxXTtpZihuKXt2YXIgdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtmb3IodmFyIHIgaW4gdClpZih0W3JdLnNyYz09bilyZXR1cm4gdFtyXX1yZXR1cm4gbnVsbH19LGlzQWN0aXZlOmZ1bmN0aW9uKGUsbix0KXtmb3IodmFyIHI9XCJuby1cIituO2U7KXt2YXIgYT1lLmNsYXNzTGlzdDtpZihhLmNvbnRhaW5zKG4pKXJldHVybiEwO2lmKGEuY29udGFpbnMocikpcmV0dXJuITE7ZT1lLnBhcmVudEVsZW1lbnR9cmV0dXJuISF0fX0sbGFuZ3VhZ2VzOntwbGFpbjplLHBsYWludGV4dDplLHRleHQ6ZSx0eHQ6ZSxleHRlbmQ6ZnVuY3Rpb24oZSxuKXt2YXIgdD1NLnV0aWwuY2xvbmUoTS5sYW5ndWFnZXNbZV0pO2Zvcih2YXIgciBpbiBuKXRbcl09bltyXTtyZXR1cm4gdH0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBhPShyPXJ8fE0ubGFuZ3VhZ2VzKVt0XSxpPXt9O2Zvcih2YXIgbCBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkobCkpe2lmKGw9PWUpZm9yKHZhciBvIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShvKSYmKGlbb109bltvXSk7bi5oYXNPd25Qcm9wZXJ0eShsKXx8KGlbbF09YVtsXSl9dmFyIHM9clt0XTtyZXR1cm4gclt0XT1pLE0ubGFuZ3VhZ2VzLkRGUyhNLmxhbmd1YWdlcyxmdW5jdGlvbihlLG4pe249PT1zJiZlIT10JiYodGhpc1tlXT1pKX0pLGl9LERGUzpmdW5jdGlvbiBlKG4sdCxyLGEpe2E9YXx8e307dmFyIGk9TS51dGlsLm9iaklkO2Zvcih2YXIgbCBpbiBuKWlmKG4uaGFzT3duUHJvcGVydHkobCkpe3QuY2FsbChuLGwsbltsXSxyfHxsKTt2YXIgbz1uW2xdLHM9TS51dGlsLnR5cGUobyk7XCJPYmplY3RcIiE9PXN8fGFbaShvKV0/XCJBcnJheVwiIT09c3x8YVtpKG8pXXx8KGFbaShvKV09ITAsZShvLHQsbCxhKSk6KGFbaShvKV09ITAsZShvLHQsbnVsbCxhKSl9fX0scGx1Z2luczp7fSxoaWdobGlnaHRBbGw6ZnVuY3Rpb24oZSxuKXtNLmhpZ2hsaWdodEFsbFVuZGVyKGRvY3VtZW50LGUsbil9LGhpZ2hsaWdodEFsbFVuZGVyOmZ1bmN0aW9uKGUsbix0KXt2YXIgcj17Y2FsbGJhY2s6dCxjb250YWluZXI6ZSxzZWxlY3RvcjonY29kZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0sIFtjbGFzcyo9XCJsYW5ndWFnZS1cIl0gY29kZSwgY29kZVtjbGFzcyo9XCJsYW5nLVwiXSwgW2NsYXNzKj1cImxhbmctXCJdIGNvZGUnfTtNLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRhbGxcIixyKSxyLmVsZW1lbnRzPUFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShyLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHIuc2VsZWN0b3IpKSxNLmhvb2tzLnJ1bihcImJlZm9yZS1hbGwtZWxlbWVudHMtaGlnaGxpZ2h0XCIscik7Zm9yKHZhciBhLGk9MDthPXIuZWxlbWVudHNbaSsrXTspTS5oaWdobGlnaHRFbGVtZW50KGEsITA9PT1uLHIuY2FsbGJhY2spfSxoaWdobGlnaHRFbGVtZW50OmZ1bmN0aW9uKGUsbix0KXt2YXIgcj1NLnV0aWwuZ2V0TGFuZ3VhZ2UoZSksYT1NLmxhbmd1YWdlc1tyXTtlLmNsYXNzTmFtZT1lLmNsYXNzTmFtZS5yZXBsYWNlKGMsXCJcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKStcIiBsYW5ndWFnZS1cIityO3ZhciBpPWUucGFyZW50RWxlbWVudDtpJiZcInByZVwiPT09aS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiYoaS5jbGFzc05hbWU9aS5jbGFzc05hbWUucmVwbGFjZShjLFwiXCIpLnJlcGxhY2UoL1xccysvZyxcIiBcIikrXCIgbGFuZ3VhZ2UtXCIrcik7dmFyIGw9e2VsZW1lbnQ6ZSxsYW5ndWFnZTpyLGdyYW1tYXI6YSxjb2RlOmUudGV4dENvbnRlbnR9O2Z1bmN0aW9uIG8oZSl7bC5oaWdobGlnaHRlZENvZGU9ZSxNLmhvb2tzLnJ1bihcImJlZm9yZS1pbnNlcnRcIixsKSxsLmVsZW1lbnQuaW5uZXJIVE1MPWwuaGlnaGxpZ2h0ZWRDb2RlLE0uaG9va3MucnVuKFwiYWZ0ZXItaGlnaGxpZ2h0XCIsbCksTS5ob29rcy5ydW4oXCJjb21wbGV0ZVwiLGwpLHQmJnQuY2FsbChsLmVsZW1lbnQpfWlmKE0uaG9va3MucnVuKFwiYmVmb3JlLXNhbml0eS1jaGVja1wiLGwpLCFsLmNvZGUpcmV0dXJuIE0uaG9va3MucnVuKFwiY29tcGxldGVcIixsKSx2b2lkKHQmJnQuY2FsbChsLmVsZW1lbnQpKTtpZihNLmhvb2tzLnJ1bihcImJlZm9yZS1oaWdobGlnaHRcIixsKSxsLmdyYW1tYXIpaWYobiYmdS5Xb3JrZXIpe3ZhciBzPW5ldyBXb3JrZXIoTS5maWxlbmFtZSk7cy5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7byhlLmRhdGEpfSxzLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtsYW5ndWFnZTpsLmxhbmd1YWdlLGNvZGU6bC5jb2RlLGltbWVkaWF0ZUNsb3NlOiEwfSkpfWVsc2UgbyhNLmhpZ2hsaWdodChsLmNvZGUsbC5ncmFtbWFyLGwubGFuZ3VhZ2UpKTtlbHNlIG8oTS51dGlsLmVuY29kZShsLmNvZGUpKX0saGlnaGxpZ2h0OmZ1bmN0aW9uKGUsbix0KXt2YXIgcj17Y29kZTplLGdyYW1tYXI6bixsYW5ndWFnZTp0fTtyZXR1cm4gTS5ob29rcy5ydW4oXCJiZWZvcmUtdG9rZW5pemVcIixyKSxyLnRva2Vucz1NLnRva2VuaXplKHIuY29kZSxyLmdyYW1tYXIpLE0uaG9va3MucnVuKFwiYWZ0ZXItdG9rZW5pemVcIixyKSxXLnN0cmluZ2lmeShNLnV0aWwuZW5jb2RlKHIudG9rZW5zKSxyLmxhbmd1YWdlKX0sdG9rZW5pemU6ZnVuY3Rpb24oZSxuKXt2YXIgdD1uLnJlc3Q7aWYodCl7Zm9yKHZhciByIGluIHQpbltyXT10W3JdO2RlbGV0ZSBuLnJlc3R9dmFyIGE9bmV3IGk7cmV0dXJuIEkoYSxhLmhlYWQsZSksZnVuY3Rpb24gZShuLHQscixhLGksbCl7Zm9yKHZhciBvIGluIHIpaWYoci5oYXNPd25Qcm9wZXJ0eShvKSYmcltvXSl7dmFyIHM9cltvXTtzPUFycmF5LmlzQXJyYXkocyk/czpbc107Zm9yKHZhciB1PTA7dTxzLmxlbmd0aDsrK3Upe2lmKGwmJmwuY2F1c2U9PW8rXCIsXCIrdSlyZXR1cm47dmFyIGM9c1t1XSxnPWMuaW5zaWRlLGY9ISFjLmxvb2tiZWhpbmQsaD0hIWMuZ3JlZWR5LGQ9Yy5hbGlhcztpZihoJiYhYy5wYXR0ZXJuLmdsb2JhbCl7dmFyIHY9Yy5wYXR0ZXJuLnRvU3RyaW5nKCkubWF0Y2goL1tpbXN1eV0qJC8pWzBdO2MucGF0dGVybj1SZWdFeHAoYy5wYXR0ZXJuLnNvdXJjZSx2K1wiZ1wiKX1mb3IodmFyIHA9Yy5wYXR0ZXJufHxjLG09YS5uZXh0LHk9aTttIT09dC50YWlsJiYhKGwmJnk+PWwucmVhY2gpO3krPW0udmFsdWUubGVuZ3RoLG09bS5uZXh0KXt2YXIgaz1tLnZhbHVlO2lmKHQubGVuZ3RoPm4ubGVuZ3RoKXJldHVybjtpZighKGsgaW5zdGFuY2VvZiBXKSl7dmFyIGIseD0xO2lmKGgpe2lmKCEoYj16KHAseSxuLGYpKSlicmVhazt2YXIgdz1iLmluZGV4LEE9Yi5pbmRleCtiWzBdLmxlbmd0aCxQPXk7Zm9yKFArPW0udmFsdWUubGVuZ3RoO1A8PXc7KW09bS5uZXh0LFArPW0udmFsdWUubGVuZ3RoO2lmKFAtPW0udmFsdWUubGVuZ3RoLHk9UCxtLnZhbHVlIGluc3RhbmNlb2YgVyljb250aW51ZTtmb3IodmFyIFM9bTtTIT09dC50YWlsJiYoUDxBfHxcInN0cmluZ1wiPT10eXBlb2YgUy52YWx1ZSk7Uz1TLm5leHQpeCsrLFArPVMudmFsdWUubGVuZ3RoO3gtLSxrPW4uc2xpY2UoeSxQKSxiLmluZGV4LT15fWVsc2UgaWYoIShiPXoocCwwLGssZikpKWNvbnRpbnVlO3ZhciB3PWIuaW5kZXgsRT1iWzBdLE89ay5zbGljZSgwLHcpLEw9ay5zbGljZSh3K0UubGVuZ3RoKSxOPXkray5sZW5ndGg7bCYmTj5sLnJlYWNoJiYobC5yZWFjaD1OKTt2YXIgaj1tLnByZXY7TyYmKGo9SSh0LGosTykseSs9Ty5sZW5ndGgpLHEodCxqLHgpO3ZhciBDPW5ldyBXKG8sZz9NLnRva2VuaXplKEUsZyk6RSxkLEUpO2lmKG09SSh0LGosQyksTCYmSSh0LG0sTCksMTx4KXt2YXIgXz17Y2F1c2U6bytcIixcIit1LHJlYWNoOk59O2Uobix0LHIsbS5wcmV2LHksXyksbCYmXy5yZWFjaD5sLnJlYWNoJiYobC5yZWFjaD1fLnJlYWNoKX19fX19fShlLGEsbixhLmhlYWQsMCksZnVuY3Rpb24oZSl7dmFyIG49W10sdD1lLmhlYWQubmV4dDtmb3IoO3QhPT1lLnRhaWw7KW4ucHVzaCh0LnZhbHVlKSx0PXQubmV4dDtyZXR1cm4gbn0oYSl9LGhvb2tzOnthbGw6e30sYWRkOmZ1bmN0aW9uKGUsbil7dmFyIHQ9TS5ob29rcy5hbGw7dFtlXT10W2VdfHxbXSx0W2VdLnB1c2gobil9LHJ1bjpmdW5jdGlvbihlLG4pe3ZhciB0PU0uaG9va3MuYWxsW2VdO2lmKHQmJnQubGVuZ3RoKWZvcih2YXIgcixhPTA7cj10W2ErK107KXIobil9fSxUb2tlbjpXfTtmdW5jdGlvbiBXKGUsbix0LHIpe3RoaXMudHlwZT1lLHRoaXMuY29udGVudD1uLHRoaXMuYWxpYXM9dCx0aGlzLmxlbmd0aD0wfChyfHxcIlwiKS5sZW5ndGh9ZnVuY3Rpb24geihlLG4sdCxyKXtlLmxhc3RJbmRleD1uO3ZhciBhPWUuZXhlYyh0KTtpZihhJiZyJiZhWzFdKXt2YXIgaT1hWzFdLmxlbmd0aDthLmluZGV4Kz1pLGFbMF09YVswXS5zbGljZShpKX1yZXR1cm4gYX1mdW5jdGlvbiBpKCl7dmFyIGU9e3ZhbHVlOm51bGwscHJldjpudWxsLG5leHQ6bnVsbH0sbj17dmFsdWU6bnVsbCxwcmV2OmUsbmV4dDpudWxsfTtlLm5leHQ9bix0aGlzLmhlYWQ9ZSx0aGlzLnRhaWw9bix0aGlzLmxlbmd0aD0wfWZ1bmN0aW9uIEkoZSxuLHQpe3ZhciByPW4ubmV4dCxhPXt2YWx1ZTp0LHByZXY6bixuZXh0OnJ9O3JldHVybiBuLm5leHQ9YSxyLnByZXY9YSxlLmxlbmd0aCsrLGF9ZnVuY3Rpb24gcShlLG4sdCl7Zm9yKHZhciByPW4ubmV4dCxhPTA7YTx0JiZyIT09ZS50YWlsO2ErKylyPXIubmV4dDsobi5uZXh0PXIpLnByZXY9bixlLmxlbmd0aC09YX1pZih1LlByaXNtPU0sVy5zdHJpbmdpZnk9ZnVuY3Rpb24gbihlLHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBlO2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciByPVwiXCI7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKXtyKz1uKGUsdCl9KSxyfXZhciBhPXt0eXBlOmUudHlwZSxjb250ZW50Om4oZS5jb250ZW50LHQpLHRhZzpcInNwYW5cIixjbGFzc2VzOltcInRva2VuXCIsZS50eXBlXSxhdHRyaWJ1dGVzOnt9LGxhbmd1YWdlOnR9LGk9ZS5hbGlhcztpJiYoQXJyYXkuaXNBcnJheShpKT9BcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhLmNsYXNzZXMsaSk6YS5jbGFzc2VzLnB1c2goaSkpLE0uaG9va3MucnVuKFwid3JhcFwiLGEpO3ZhciBsPVwiXCI7Zm9yKHZhciBvIGluIGEuYXR0cmlidXRlcylsKz1cIiBcIitvKyc9XCInKyhhLmF0dHJpYnV0ZXNbb118fFwiXCIpLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIikrJ1wiJztyZXR1cm5cIjxcIithLnRhZysnIGNsYXNzPVwiJythLmNsYXNzZXMuam9pbihcIiBcIikrJ1wiJytsK1wiPlwiK2EuY29udGVudCtcIjwvXCIrYS50YWcrXCI+XCJ9LCF1LmRvY3VtZW50KXJldHVybiB1LmFkZEV2ZW50TGlzdGVuZXImJihNLmRpc2FibGVXb3JrZXJNZXNzYWdlSGFuZGxlcnx8dS5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGUpe3ZhciBuPUpTT04ucGFyc2UoZS5kYXRhKSx0PW4ubGFuZ3VhZ2Uscj1uLmNvZGUsYT1uLmltbWVkaWF0ZUNsb3NlO3UucG9zdE1lc3NhZ2UoTS5oaWdobGlnaHQocixNLmxhbmd1YWdlc1t0XSx0KSksYSYmdS5jbG9zZSgpfSwhMSkpLE07dmFyIHQ9TS51dGlsLmN1cnJlbnRTY3JpcHQoKTtmdW5jdGlvbiByKCl7TS5tYW51YWx8fE0uaGlnaGxpZ2h0QWxsKCl9aWYodCYmKE0uZmlsZW5hbWU9dC5zcmMsdC5oYXNBdHRyaWJ1dGUoXCJkYXRhLW1hbnVhbFwiKSYmKE0ubWFudWFsPSEwKSksIU0ubWFudWFsKXt2YXIgYT1kb2N1bWVudC5yZWFkeVN0YXRlO1wibG9hZGluZ1wiPT09YXx8XCJpbnRlcmFjdGl2ZVwiPT09YSYmdCYmdC5kZWZlcj9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLHIpOndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyKTp3aW5kb3cuc2V0VGltZW91dChyLDE2KX1yZXR1cm4gTX0oX3NlbGYpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9UHJpc20pLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJihnbG9iYWwuUHJpc209UHJpc20pO1xuUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cD17Y29tbWVudDovPCEtLVtcXHNcXFNdKj8tLT4vLHByb2xvZzovPFxcP1tcXHNcXFNdKz9cXD8+Lyxkb2N0eXBlOntwYXR0ZXJuOi88IURPQ1RZUEUoPzpbXj5cIidbXFxdXXxcIlteXCJdKlwifCdbXiddKicpKyg/OlxcWyg/OltePFwiJ1xcXV18XCJbXlwiXSpcInwnW14nXSonfDwoPyEhLS0pfDwhLS0oPzpbXi1dfC0oPyEtPikpKi0tPikqXFxdXFxzKik/Pi9pLGdyZWVkeTohMCxpbnNpZGU6e1wiaW50ZXJuYWwtc3Vic2V0XCI6e3BhdHRlcm46LyhcXFspW1xcc1xcU10rKD89XFxdPiQpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMCxpbnNpZGU6bnVsbH0sc3RyaW5nOntwYXR0ZXJuOi9cIlteXCJdKlwifCdbXiddKicvLGdyZWVkeTohMH0scHVuY3R1YXRpb246L148IXw+JHxbW1xcXV0vLFwiZG9jdHlwZS10YWdcIjovXkRPQ1RZUEUvLG5hbWU6L1teXFxzPD4nXCJdKy99fSxjZGF0YTovPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9dXT4vaSx0YWc6e3BhdHRlcm46LzxcXC8/KD8hXFxkKVteXFxzPlxcLz0kPCVdKyg/Olxccyg/OlxccypbXlxccz5cXC89XSsoPzpcXHMqPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKD89W1xccz5dKSl8KD89W1xccy8+XSkpKSspP1xccypcXC8/Pi8sZ3JlZWR5OiEwLGluc2lkZTp7dGFnOntwYXR0ZXJuOi9ePFxcLz9bXlxccz5cXC9dKy8saW5zaWRlOntwdW5jdHVhdGlvbjovXjxcXC8/LyxuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319LFwic3BlY2lhbC1hdHRyXCI6W10sXCJhdHRyLXZhbHVlXCI6e3BhdHRlcm46Lz1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKykvLGluc2lkZTp7cHVuY3R1YXRpb246W3twYXR0ZXJuOi9ePS8sYWxpYXM6XCJhdHRyLWVxdWFsc1wifSwvXCJ8Jy9dfX0scHVuY3R1YXRpb246L1xcLz8+LyxcImF0dHItbmFtZVwiOntwYXR0ZXJuOi9bXlxccz5cXC9dKy8saW5zaWRlOntuYW1lc3BhY2U6L15bXlxccz5cXC86XSs6L319fX0sZW50aXR5Olt7cGF0dGVybjovJltcXGRhLXpdezEsOH07L2ksYWxpYXM6XCJuYW1lZC1lbnRpdHlcIn0sLyYjeD9bXFxkYS1mXXsxLDh9Oy9pXX0sUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlW1wiYXR0ci12YWx1ZVwiXS5pbnNpZGUuZW50aXR5PVByaXNtLmxhbmd1YWdlcy5tYXJrdXAuZW50aXR5LFByaXNtLmxhbmd1YWdlcy5tYXJrdXAuZG9jdHlwZS5pbnNpZGVbXCJpbnRlcm5hbC1zdWJzZXRcIl0uaW5zaWRlPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20uaG9va3MuYWRkKFwid3JhcFwiLGZ1bmN0aW9uKGEpe1wiZW50aXR5XCI9PT1hLnR5cGUmJihhLmF0dHJpYnV0ZXMudGl0bGU9YS5jb250ZW50LnJlcGxhY2UoLyZhbXA7LyxcIiZcIikpfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLFwiYWRkSW5saW5lZFwiLHt2YWx1ZTpmdW5jdGlvbihhLGUpe3ZhciBzPXt9O3NbXCJsYW5ndWFnZS1cIitlXT17cGF0dGVybjovKF48IVxcW0NEQVRBXFxbKVtcXHNcXFNdKz8oPz1cXF1cXF0+JCkvaSxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXNbZV19LHMuY2RhdGE9L148IVxcW0NEQVRBXFxbfFxcXVxcXT4kL2k7dmFyIHQ9e1wiaW5jbHVkZWQtY2RhdGFcIjp7cGF0dGVybjovPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksaW5zaWRlOnN9fTt0W1wibGFuZ3VhZ2UtXCIrZV09e3BhdHRlcm46L1tcXHNcXFNdKy8saW5zaWRlOlByaXNtLmxhbmd1YWdlc1tlXX07dmFyIG49e307blthXT17cGF0dGVybjpSZWdFeHAoXCIoPF9fW14+XSo+KSg/OjwhXFxcXFtDREFUQVxcXFxbKD86W15cXFxcXV18XFxcXF0oPyFcXFxcXT4pKSpcXFxcXVxcXFxdPnwoPyE8IVxcXFxbQ0RBVEFcXFxcWylbXl0pKj8oPz08L19fPilcIi5yZXBsYWNlKC9fXy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSxcImlcIiksbG9va2JlaGluZDohMCxncmVlZHk6ITAsaW5zaWRlOnR9LFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJtYXJrdXBcIixcImNkYXRhXCIsbil9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLFwiYWRkQXR0cmlidXRlXCIse3ZhbHVlOmZ1bmN0aW9uKGEsZSl7UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuaW5zaWRlW1wic3BlY2lhbC1hdHRyXCJdLnB1c2goe3BhdHRlcm46UmVnRXhwKFwiKF58W1xcXCInXFxcXHNdKSg/OlwiK2ErXCIpXFxcXHMqPVxcXFxzKig/OlxcXCJbXlxcXCJdKlxcXCJ8J1teJ10qJ3xbXlxcXFxzJ1xcXCI+PV0rKD89W1xcXFxzPl0pKVwiLFwiaVwiKSxsb29rYmVoaW5kOiEwLGluc2lkZTp7XCJhdHRyLW5hbWVcIjovXlteXFxzPV0rLyxcImF0dHItdmFsdWVcIjp7cGF0dGVybjovPVtcXHNcXFNdKy8saW5zaWRlOnt2YWx1ZTp7cGF0dGVybjovKD1cXHMqKFtcIiddfCg/IVtcIiddKSkpXFxTW1xcc1xcU10qKD89XFwyJCkvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6W2UsXCJsYW5ndWFnZS1cIitlXSxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzW2VdfSxwdW5jdHVhdGlvbjpbe3BhdHRlcm46L149LyxhbGlhczpcImF0dHItZXF1YWxzXCJ9LC9cInwnL119fX19KX19KSxQcmlzbS5sYW5ndWFnZXMuaHRtbD1QcmlzbS5sYW5ndWFnZXMubWFya3VwLFByaXNtLmxhbmd1YWdlcy5tYXRobWw9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMuc3ZnPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLnhtbD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwibWFya3VwXCIse30pLFByaXNtLmxhbmd1YWdlcy5zc21sPVByaXNtLmxhbmd1YWdlcy54bWwsUHJpc20ubGFuZ3VhZ2VzLmF0b209UHJpc20ubGFuZ3VhZ2VzLnhtbCxQcmlzbS5sYW5ndWFnZXMucnNzPVByaXNtLmxhbmd1YWdlcy54bWw7XG4hZnVuY3Rpb24ocyl7dmFyIGU9LyhcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvO3MubGFuZ3VhZ2VzLmNzcz17Y29tbWVudDovXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sYXRydWxlOntwYXR0ZXJuOi9AW1xcdy1dKD86W147e1xcc118XFxzKyg/IVtcXHN7XSkpKig/Ojt8KD89XFxzKlxceykpLyxpbnNpZGU6e3J1bGU6L15AW1xcdy1dKy8sXCJzZWxlY3Rvci1mdW5jdGlvbi1hcmd1bWVudFwiOntwYXR0ZXJuOi8oXFxic2VsZWN0b3JcXHMqXFwoXFxzKig/IVtcXHMpXSkpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCkpKyg/PVxccypcXCkpLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwic2VsZWN0b3JcIn0sa2V5d29yZDp7cGF0dGVybjovKF58W15cXHctXSkoPzphbmR8bm90fG9ubHl8b3IpKD8hW1xcdy1dKS8sbG9va2JlaGluZDohMH19fSx1cmw6e3BhdHRlcm46UmVnRXhwKFwiXFxcXGJ1cmxcXFxcKCg/OlwiK2Uuc291cmNlK1wifCg/OlteXFxcXFxcXFxcXHJcXG4oKVxcXCInXXxcXFxcXFxcXFteXSkqKVxcXFwpXCIsXCJpXCIpLGdyZWVkeTohMCxpbnNpZGU6e2Z1bmN0aW9uOi9edXJsL2kscHVuY3R1YXRpb246L15cXCh8XFwpJC8sc3RyaW5nOntwYXR0ZXJuOlJlZ0V4cChcIl5cIitlLnNvdXJjZStcIiRcIiksYWxpYXM6XCJ1cmxcIn19fSxzZWxlY3RvcjpSZWdFeHAoXCJbXnt9XFxcXHNdKD86W157fTtcXFwiJ1xcXFxzXXxcXFxccysoPyFbXFxcXHN7XSl8XCIrZS5zb3VyY2UrXCIpKig/PVxcXFxzKlxcXFx7KVwiKSxzdHJpbmc6e3BhdHRlcm46ZSxncmVlZHk6ITB9LHByb3BlcnR5Oi8oPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKjopL2ksaW1wb3J0YW50Oi8haW1wb3J0YW50XFxiL2ksZnVuY3Rpb246L1stYS16MC05XSsoPz1cXCgpL2kscHVuY3R1YXRpb246L1soKXt9OzosXS99LHMubGFuZ3VhZ2VzLmNzcy5hdHJ1bGUuaW5zaWRlLnJlc3Q9cy5sYW5ndWFnZXMuY3NzO3ZhciB0PXMubGFuZ3VhZ2VzLm1hcmt1cDt0JiYodC50YWcuYWRkSW5saW5lZChcInN0eWxlXCIsXCJjc3NcIiksdC50YWcuYWRkQXR0cmlidXRlKFwic3R5bGVcIixcImNzc1wiKSl9KFByaXNtKTtcblByaXNtLmxhbmd1YWdlcy5jbGlrZT17Y29tbWVudDpbe3BhdHRlcm46LyhefFteXFxcXF0pXFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9LHtwYXR0ZXJuOi8oXnxbXlxcXFw6XSlcXC9cXC8uKi8sbG9va2JlaGluZDohMCxncmVlZHk6ITB9XSxzdHJpbmc6e3BhdHRlcm46LyhbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxncmVlZHk6ITB9LFwiY2xhc3MtbmFtZVwiOntwYXR0ZXJuOi8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3x0cmFpdHxpbnN0YW5jZW9mfG5ldylcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntwdW5jdHVhdGlvbjovWy5cXFxcXS99fSxrZXl3b3JkOi9cXGIoPzppZnxlbHNlfHdoaWxlfGRvfGZvcnxyZXR1cm58aW58aW5zdGFuY2VvZnxmdW5jdGlvbnxuZXd8dHJ5fHRocm93fGNhdGNofGZpbmFsbHl8bnVsbHxicmVha3xjb250aW51ZSlcXGIvLGJvb2xlYW46L1xcYig/OnRydWV8ZmFsc2UpXFxiLyxmdW5jdGlvbjovXFx3Kyg/PVxcKCkvLG51bWJlcjovXFxiMHhbXFxkYS1mXStcXGJ8KD86XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrKSg/OmVbKy1dP1xcZCspPy9pLG9wZXJhdG9yOi9bPD5dPT98WyE9XT0/PT98LS0/fFxcK1xcKz98JiY/fFxcfFxcfD98Wz8qL35eJV0vLHB1bmN0dWF0aW9uOi9be31bXFxdOygpLC46XS99O1xuUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ9UHJpc20ubGFuZ3VhZ2VzLmV4dGVuZChcImNsaWtlXCIse1wiY2xhc3MtbmFtZVwiOltQcmlzbS5sYW5ndWFnZXMuY2xpa2VbXCJjbGFzcy1uYW1lXCJdLHtwYXR0ZXJuOi8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpW18kQS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFwuKD86cHJvdG90eXBlfGNvbnN0cnVjdG9yKSkvLGxvb2tiZWhpbmQ6ITB9XSxrZXl3b3JkOlt7cGF0dGVybjovKCg/Ol58fSlcXHMqKWNhdGNoXFxiLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKF58W14uXXxcXC5cXC5cXC5cXHMqKVxcYig/OmFzfGFzeW5jKD89XFxzKig/OmZ1bmN0aW9uXFxifFxcKHxbJFxcd1xceEEwLVxcdUZGRkZdfCQpKXxhd2FpdHxicmVha3xjYXNlfGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5KD89XFxzKig/Olxce3wkKSl8Zm9yfGZyb20oPz1cXHMqKD86WydcIl18JCkpfGZ1bmN0aW9ufCg/OmdldHxzZXQpKD89XFxzKig/OltcXFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxsb29rYmVoaW5kOiEwfV0sZnVuY3Rpb246LyM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyooPzpcXC5cXHMqKD86YXBwbHl8YmluZHxjYWxsKVxccyopP1xcKCkvLG51bWJlcjovXFxiKD86KD86MFt4WF0oPzpbXFxkQS1GYS1mXSg/Ol9bXFxkQS1GYS1mXSk/KSt8MFtiQl0oPzpbMDFdKD86X1swMV0pPykrfDBbb09dKD86WzAtN10oPzpfWzAtN10pPykrKW4/fCg/OlxcZCg/Ol9cXGQpPykrbnxOYU58SW5maW5pdHkpXFxifCg/OlxcYig/OlxcZCg/Ol9cXGQpPykrXFwuPyg/OlxcZCg/Ol9cXGQpPykqfFxcQlxcLig/OlxcZCg/Ol9cXGQpPykrKSg/OltFZV1bKy1dPyg/OlxcZCg/Ol9cXGQpPykrKT8vLG9wZXJhdG9yOi8tLXxcXCtcXCt8XFwqXFwqPT98PT58JiY9P3xcXHxcXHw9P3xbIT1dPT18PDw9P3w+Pj4/PT98Wy0rKi8lJnxeIT08Pl09P3xcXC57M318XFw/XFw/PT98XFw/XFwuP3xbfjpdL30pLFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0W1wiY2xhc3MtbmFtZVwiXVswXS5wYXR0ZXJuPS8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfG5ldylcXHMrKVtcXHcuXFxcXF0rLyxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwia2V5d29yZFwiLHtyZWdleDp7cGF0dGVybjovKCg/Ol58W14kXFx3XFx4QTAtXFx1RkZGRi5cIidcXF0pXFxzXXxcXGIoPzpyZXR1cm58eWllbGQpKVxccyopXFwvKD86XFxbKD86W15cXF1cXFxcXFxyXFxuXXxcXFxcLikqXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2dpbXl1c117MCw2fSg/PSg/Olxcc3xcXC9cXCooPzpbXipdfFxcKig/IVxcLykpKlxcKlxcLykqKD86JHxbXFxyXFxuLC47On0pXFxdXXxcXC9cXC8pKS8sbG9va2JlaGluZDohMCxncmVlZHk6ITAsaW5zaWRlOntcInJlZ2V4LXNvdXJjZVwiOntwYXR0ZXJuOi9eKFxcLylbXFxzXFxTXSsoPz1cXC9bYS16XSokKS8sbG9va2JlaGluZDohMCxhbGlhczpcImxhbmd1YWdlLXJlZ2V4XCIsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5yZWdleH0sXCJyZWdleC1mbGFnc1wiOi9bYS16XSskLyxcInJlZ2V4LWRlbGltaXRlclwiOi9eXFwvfFxcLyQvfX0sXCJmdW5jdGlvbi12YXJpYWJsZVwiOntwYXR0ZXJuOi8jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqWz06XVxccyooPzphc3luY1xccyopPyg/OlxcYmZ1bmN0aW9uXFxifCg/OlxcKCg/OlteKCldfFxcKFteKCldKlxcKSkqXFwpfCg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSopXFxzKj0+KSkvLGFsaWFzOlwiZnVuY3Rpb25cIn0scGFyYW1ldGVyOlt7cGF0dGVybjovKGZ1bmN0aW9uKD86XFxzKyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSopP1xccypcXChcXHMqKSg/IVxccykoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXChbXigpXSpcXCkpKyg/PVxccypcXCkpLyxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdH0se3BhdHRlcm46Lyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqPT4pL2ksaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKFxcKFxccyopKD8hXFxzKSg/OlteKClcXHNdfFxccysoPyFbXFxzKV0pfFxcKFteKCldKlxcKSkrKD89XFxzKlxcKVxccyo9PikvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKCg/OlxcYnxcXHN8XikoPyEoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZCkoPyFbJFxcd1xceEEwLVxcdUZGRkZdKSkoPzooPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKilcXChcXHMqfFxcXVxccypcXChcXHMqKSg/IVxccykoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXChbXigpXSpcXCkpKyg/PVxccypcXClcXHMqXFx7KS8sbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9XSxjb25zdGFudDovXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi99KSxQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiamF2YXNjcmlwdFwiLFwic3RyaW5nXCIse1widGVtcGxhdGUtc3RyaW5nXCI6e3BhdHRlcm46L2AoPzpcXFxcW1xcc1xcU118XFwkeyg/Oltee31dfHsoPzpbXnt9XXx7W159XSp9KSp9KSt9fCg/IVxcJHspW15cXFxcYF0pKmAvLGdyZWVkeTohMCxpbnNpZGU6e1widGVtcGxhdGUtcHVuY3R1YXRpb25cIjp7cGF0dGVybjovXmB8YCQvLGFsaWFzOlwic3RyaW5nXCJ9LGludGVycG9sYXRpb246e3BhdHRlcm46LygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJHsoPzpbXnt9XXx7KD86W157fV18e1tefV0qfSkqfSkrfS8sbG9va2JlaGluZDohMCxpbnNpZGU6e1wiaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvblwiOntwYXR0ZXJuOi9eXFwke3x9JC8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0OlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fX0sc3RyaW5nOi9bXFxzXFxTXSsvfX19KSxQcmlzbS5sYW5ndWFnZXMubWFya3VwJiYoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuYWRkSW5saW5lZChcInNjcmlwdFwiLFwiamF2YXNjcmlwdFwiKSxQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRBdHRyaWJ1dGUoXCJvbig/OmFib3J0fGJsdXJ8Y2hhbmdlfGNsaWNrfGNvbXBvc2l0aW9uKD86ZW5kfHN0YXJ0fHVwZGF0ZSl8ZGJsY2xpY2t8ZXJyb3J8Zm9jdXMoPzppbnxvdXQpP3xrZXkoPzpkb3dufHVwKXxsb2FkfG1vdXNlKD86ZG93bnxlbnRlcnxsZWF2ZXxtb3ZlfG91dHxvdmVyfHVwKXxyZXNldHxyZXNpemV8c2Nyb2xsfHNlbGVjdHxzbG90Y2hhbmdlfHN1Ym1pdHx1bmxvYWR8d2hlZWwpXCIsXCJqYXZhc2NyaXB0XCIpKSxQcmlzbS5sYW5ndWFnZXMuanM9UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQ7XG5QcmlzbS5sYW5ndWFnZXMuZWxpeGlyPXtkb2M6e3BhdHRlcm46L0AoPzpkb2N8bW9kdWxlZG9jKVxccysoPzooXCJcIlwifCcnJylbXFxzXFxTXSo/XFwxfChcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMilbXlxcXFxcXHJcXG5dKSpcXDIpLyxpbnNpZGU6e2F0dHJpYnV0ZTovXkBcXHcrLyxzdHJpbmc6L1snXCJdW1xcc1xcU10rL319LGNvbW1lbnQ6e3BhdHRlcm46LyMuKi9tLGdyZWVkeTohMH0scmVnZXg6e3BhdHRlcm46L35bclJdKD86KFwiXCJcInwnJycpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKStcXDF8KFtcXC98XCInXSkoPzpcXFxcLnwoPyFcXDIpW15cXFxcXFxyXFxuXSkrXFwyfFxcKCg/OlxcXFwufFteXFxcXClcXHJcXG5dKStcXCl8XFxbKD86XFxcXC58W15cXFxcXFxdXFxyXFxuXSkrXFxdfFxceyg/OlxcXFwufFteXFxcXH1cXHJcXG5dKStcXH18PCg/OlxcXFwufFteXFxcXD5cXHJcXG5dKSs+KVt1aXNteGZyXSovLGdyZWVkeTohMH0sc3RyaW5nOlt7cGF0dGVybjovfltjQ3NTd1ddKD86KFwiXCJcInwnJycpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKStcXDF8KFtcXC98XCInXSkoPzpcXFxcLnwoPyFcXDIpW15cXFxcXFxyXFxuXSkrXFwyfFxcKCg/OlxcXFwufFteXFxcXClcXHJcXG5dKStcXCl8XFxbKD86XFxcXC58W15cXFxcXFxdXFxyXFxuXSkrXFxdfFxceyg/OlxcXFwufCNcXHtbXn1dK1xcfXwjKD8hXFx7KXxbXiNcXFxcfVxcclxcbl0pK1xcfXw8KD86XFxcXC58W15cXFxcPlxcclxcbl0pKz4pW2NzYV0/LyxncmVlZHk6ITAsaW5zaWRlOnt9fSx7cGF0dGVybjovKFwiXCJcInwnJycpW1xcc1xcU10qP1xcMS8sZ3JlZWR5OiEwLGluc2lkZTp7fX0se3BhdHRlcm46LyhcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLGdyZWVkeTohMCxpbnNpZGU6e319XSxhdG9tOntwYXR0ZXJuOi8oXnxbXjpdKTpcXHcrLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwic3ltYm9sXCJ9LG1vZHVsZTp7cGF0dGVybjovXFxiW0EtWl1cXHcqXFxiLyxhbGlhczpcImNsYXNzLW5hbWVcIn0sXCJhdHRyLW5hbWVcIjovXFx3K1xcPz86KD8hOikvLGFyZ3VtZW50OntwYXR0ZXJuOi8oXnxbXiZdKSZcXGQrLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwidmFyaWFibGVcIn0sYXR0cmlidXRlOntwYXR0ZXJuOi9AXFx3Ky8sYWxpYXM6XCJ2YXJpYWJsZVwifSxmdW5jdGlvbjovXFxiW19hLXpBLVpdXFx3Kls/IV0/KD86KD89XFxzKig/OlxcLlxccyopP1xcKCl8KD89XFwvXFxkKykpLyxudW1iZXI6L1xcYig/OjBbYm94XVthLWZcXGRfXSt8XFxkW1xcZF9dKikoPzpcXC5bXFxkX10rKT8oPzplWystXT9bXFxkX10rKT9cXGIvaSxrZXl3b3JkOi9cXGIoPzphZnRlcnxhbGlhc3xhbmR8Y2FzZXxjYXRjaHxjb25kfGRlZig/OmNhbGxiYWNrfGV4Y2VwdGlvbnxpbXBsfG1vZHVsZXxwfHByb3RvY29sfHN0cnVjdHxkZWxlZ2F0ZSk/fGRvfGVsc2V8ZW5kfGZufGZvcnxpZnxpbXBvcnR8bm90fG9yfHJhaXNlfHJlcXVpcmV8cmVzY3VlfHRyeXx1bmxlc3N8dXNlfHdoZW4pXFxiLyxib29sZWFuOi9cXGIoPzp0cnVlfGZhbHNlfG5pbClcXGIvLG9wZXJhdG9yOlsvXFxiaW5cXGJ8JiY/fFxcfFt8Pl0/fFxcXFxcXFxcfDo6fFxcLlxcLlxcLj98XFwrXFwrP3wtWy0+XT98PFstPT5dfD49fCE9PT98XFxCIXw9KD86PT0/fFs+fl0pP3xbKlxcL15dLyx7cGF0dGVybjovKFtePF0pPCg/ITwpLyxsb29rYmVoaW5kOiEwfSx7cGF0dGVybjovKFtePl0pPig/IT4pLyxsb29rYmVoaW5kOiEwfV0scHVuY3R1YXRpb246Lzw8fD4+fFsuLCVcXFtcXF17fSgpXS99LFByaXNtLmxhbmd1YWdlcy5lbGl4aXIuc3RyaW5nLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5pbnNpZGU9e2ludGVycG9sYXRpb246e3BhdHRlcm46LyNcXHtbXn1dK1xcfS8saW5zaWRlOntkZWxpbWl0ZXI6e3BhdHRlcm46L14jXFx7fFxcfSQvLGFsaWFzOlwicHVuY3R1YXRpb25cIn0scmVzdDpQcmlzbS5sYW5ndWFnZXMuZWxpeGlyfX19fSk7XG4hZnVuY3Rpb24oaSl7dmFyIGU9aS51dGlsLmNsb25lKGkubGFuZ3VhZ2VzLmVsaXhpciksdD1cIig/OlxcXFx7PFM+KlxcXFwuezN9KD86W157fV18PEJSQUNFUz4pKlxcXFx9KVwiO2Z1bmN0aW9uIG4oZSxuKXtyZXR1cm4gZT1lLnJlcGxhY2UoLzxTPi9nLGZ1bmN0aW9uKCl7cmV0dXJuXCIoPzpcXFxcc3wvLy4qKD8hLil8L1xcXFwqKD86W14qXXxcXFxcKig/IS8pKVxcXFwqLylcIn0pLnJlcGxhY2UoLzxCUkFDRVM+L2csZnVuY3Rpb24oKXtyZXR1cm5cIig/OlxcXFx7KD86XFxcXHsoPzpcXFxce1tee31dKlxcXFx9fFtee31dKSpcXFxcfXxbXnt9XSkqXFxcXH0pXCJ9KS5yZXBsYWNlKC88U1BSRUFEPi9nLGZ1bmN0aW9uKCl7cmV0dXJuIHR9KSxSZWdFeHAoZSxuKX10PW4odCkuc291cmNlLGkubGFuZ3VhZ2VzLnN1cmZhY2U9aS5sYW5ndWFnZXMuZXh0ZW5kKFwibWFya3VwXCIsZSksaS5sYW5ndWFnZXMuc3VyZmFjZS50YWcucGF0dGVybj1uKFwiPC8/KD86W1xcXFx3LjotXSsoPzo8Uz4rKD86W1xcXFx3LjokLV0rKD86PSg/OlxcXCIoPzpcXFxcXFxcXFteXXxbXlxcXFxcXFxcXFxcIl0pKlxcXCJ8Jyg/OlxcXFxcXFxcW15dfFteXFxcXFxcXFwnXSkqJ3xbXlxcXFxzeydcXFwiLz49XSt8PEJSQUNFUz4pKT98PFNQUkVBRD4pKSo8Uz4qLz8pPz5cIiksaS5sYW5ndWFnZXMuc3VyZmFjZS50YWcuaW5zaWRlLnRhZy5wYXR0ZXJuPS9ePFxcLz9bXlxccz5cXC9dKi9pLGkubGFuZ3VhZ2VzLnN1cmZhY2UudGFnLmluc2lkZVtcImF0dHItdmFsdWVcIl0ucGF0dGVybj0vPSg/IVxceykoPzpcIig/OlxcXFxbXl18W15cXFxcXCJdKSpcInwnKD86XFxcXFteXXxbXlxcXFwnXSkqJ3xbXlxccydcIj5dKykvaSxpLmxhbmd1YWdlcy5zdXJmYWNlLnRhZy5pbnNpZGUudGFnLmluc2lkZVtcImNsYXNzLW5hbWVcIl09L15bQS1aXVxcdyooPzpcXC5bQS1aXVxcdyopKiQvLGkubGFuZ3VhZ2VzLnN1cmZhY2UudGFnLmluc2lkZS50YWcuaW5zaWRlW1widGFnLW5hbWVcIl09L15bYS16XVxcdyooPzpcXC5bYS16XVxcdyopKiQvLGkubGFuZ3VhZ2VzLnN1cmZhY2UudGFnLmluc2lkZS5jb21tZW50PWUuY29tbWVudCxpLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJpbnNpZGVcIixcImF0dHItbmFtZVwiLHtzcHJlYWQ6e3BhdHRlcm46bihcIjxTUFJFQUQ+XCIpLGluc2lkZTppLmxhbmd1YWdlcy5zdXJmYWNlfX0saS5sYW5ndWFnZXMuc3VyZmFjZS50YWcpLGkubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImluc2lkZVwiLFwic3BlY2lhbC1hdHRyXCIse3NjcmlwdDp7cGF0dGVybjpuKFwiPTxCUkFDRVM+XCIpLGluc2lkZTp7XCJzY3JpcHQtcHVuY3R1YXRpb25cIjp7cGF0dGVybjovXj0oPz17KS8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0OmkubGFuZ3VhZ2VzLnN1cmZhY2V9LGFsaWFzOlwibGFuZ3VhZ2UtZWxpeGlyXCJ9fSxpLmxhbmd1YWdlcy5zdXJmYWNlLnRhZyksaS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiZWxpeGlyXCIsXCJhdG9tXCIse1wiZW1iZWRkZWQtc3VyZmFjZVwiOntwYXR0ZXJuOi9+SChcIlwiXCIpW1xcc1xcU10qP1xcMS8sZ3JlZWR5OiEwLGluc2lkZTp7XCJlbWJlZGRlZC1zdXJmYWNlLW9wZW5cIjp7cGF0dGVybjovXn5IXCJcIlwiLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LFwiZW1iZWRkZWQtc3VyZmFjZS1jbG9zZVwiOntwYXR0ZXJuOi9cIlwiXCIkLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LHN1cmZhY2U6e3BhdHRlcm46L1tcXHNcXFNdKy8saW5zaWRlOmkubGFuZ3VhZ2VzLnN1cmZhY2V9fX0sXCJzdXJmYWNlLWFwaVwiOntwYXR0ZXJuOi9eXFxzK1xcYig/OnByb3B8ZGF0YXxzbG90KVxcYlxccysvLGFsaWFzOlwiY2xhc3MtbmFtZVwifX0pO3ZhciB1PWZ1bmN0aW9uKGUpe3JldHVybiBlP1wic3RyaW5nXCI9PXR5cGVvZiBlP2U6XCJzdHJpbmdcIj09dHlwZW9mIGUuY29udGVudD9lLmNvbnRlbnQ6ZS5jb250ZW50Lm1hcCh1KS5qb2luKFwiXCIpOlwiXCJ9LGM9ZnVuY3Rpb24oZSxuKXtcInN1cmZhY2VcIj09PW4mJmUudW5zaGlmdChuZXcgaS5Ub2tlbihcInRhZ1wiLFtuZXcgaS5Ub2tlbihcInRhZ1wiLFtuZXcgaS5Ub2tlbihcInB1bmN0dWF0aW9uXCIsXCI8XCIpXSksbmV3IGkuVG9rZW4oXCJwdW5jdHVhdGlvblwiLFwiPlwiKV0pKTtmb3IodmFyIHQ9W10sYT0wO2E8ZS5sZW5ndGg7YSsrKXt2YXIgcz1lW2FdLHI9ITE7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHMmJihcInRhZ1wiPT09cy50eXBlJiZzLmNvbnRlbnRbMF0mJlwidGFnXCI9PT1zLmNvbnRlbnRbMF0udHlwZT9cIjwvXCI9PT1zLmNvbnRlbnRbMF0uY29udGVudFswXS5jb250ZW50PzA8dC5sZW5ndGgmJnRbdC5sZW5ndGgtMV0udGFnTmFtZT09PXUocy5jb250ZW50WzBdLmNvbnRlbnRbMV0pJiZ0LnBvcCgpOlwiLz5cIj09PXMuY29udGVudFtzLmNvbnRlbnQubGVuZ3RoLTFdLmNvbnRlbnR8fHQucHVzaCh7dGFnTmFtZTp1KHMuY29udGVudFswXS5jb250ZW50WzFdKSxvcGVuZWRCcmFjZXM6MH0pOjA8dC5sZW5ndGgmJlwicHVuY3R1YXRpb25cIj09PXMudHlwZSYmXCJ7XCI9PT1zLmNvbnRlbnQ/dFt0Lmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMrKzowPHQubGVuZ3RoJiYwPHRbdC5sZW5ndGgtMV0ub3BlbmVkQnJhY2VzJiZcInB1bmN0dWF0aW9uXCI9PT1zLnR5cGUmJlwifVwiPT09cy5jb250ZW50P3RbdC5sZW5ndGgtMV0ub3BlbmVkQnJhY2VzLS06cj0hMCksKHJ8fFwic3RyaW5nXCI9PXR5cGVvZiBzKSYmMDx0Lmxlbmd0aCYmMD09PXRbdC5sZW5ndGgtMV0ub3BlbmVkQnJhY2VzKXt2YXIgZz11KHMpO2E8ZS5sZW5ndGgtMSYmKFwic3RyaW5nXCI9PXR5cGVvZiBlW2ErMV18fFwicGxhaW4tdGV4dFwiPT09ZVthKzFdLnR5cGUpJiYoZys9dShlW2ErMV0pLGUuc3BsaWNlKGErMSwxKSksMDxhJiYoXCJzdHJpbmdcIj09dHlwZW9mIGVbYS0xXXx8XCJwbGFpbi10ZXh0XCI9PT1lW2EtMV0udHlwZSkmJihnPXUoZVthLTFdKStnLGUuc3BsaWNlKGEtMSwxKSxhLS0pLGVbYV09bmV3IGkuVG9rZW4oXCJwbGFpbi10ZXh0XCIsZyxudWxsLGcpfXMuY29udGVudCYmXCJzdHJpbmdcIiE9dHlwZW9mIHMuY29udGVudCYmYyhzLmNvbnRlbnQscy50eXBlKX1cInN1cmZhY2VcIj09PW4mJmUuc2hpZnQoKX07aS5ob29rcy5hZGQoXCJhZnRlci10b2tlbml6ZVwiLGZ1bmN0aW9uKGUpe1wic3VyZmFjZVwiIT09ZS5sYW5ndWFnZSYmXCJlbGl4aXJcIiE9PWUubGFuZ3VhZ2V8fGMoZS50b2tlbnMsZS5sYW5ndWFnZSl9KX0oUHJpc20pO1xuIWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuUHJpc20mJnNlbGYuZG9jdW1lbnQmJmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ipe3ZhciB0LG89XCJsaW5lLW51bWJlcnNcIixzPVwibGlua2FibGUtbGluZS1udW1iZXJzXCIsYT1mdW5jdGlvbigpe2lmKHZvaWQgMD09PXQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7ZS5zdHlsZS5mb250U2l6ZT1cIjEzcHhcIixlLnN0eWxlLmxpbmVIZWlnaHQ9XCIxLjVcIixlLnN0eWxlLnBhZGRpbmc9XCIwXCIsZS5zdHlsZS5ib3JkZXI9XCIwXCIsZS5pbm5lckhUTUw9XCImbmJzcDs8YnIgLz4mbmJzcDtcIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpLHQ9Mzg9PT1lLm9mZnNldEhlaWdodCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGUpfXJldHVybiB0fSxsPSEwLHU9MDtQcmlzbS5ob29rcy5hZGQoXCJiZWZvcmUtc2FuaXR5LWNoZWNrXCIsZnVuY3Rpb24oZSl7dmFyIHQ9ZS5lbGVtZW50LnBhcmVudEVsZW1lbnQ7aWYoYyh0KSl7dmFyIG49MDt2KFwiLmxpbmUtaGlnaGxpZ2h0XCIsdCkuZm9yRWFjaChmdW5jdGlvbihlKXtuKz1lLnRleHRDb250ZW50Lmxlbmd0aCxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KSxuJiYvXiggXFxuKSskLy50ZXN0KGUuY29kZS5zbGljZSgtbikpJiYoZS5jb2RlPWUuY29kZS5zbGljZSgwLC1uKSl9fSksUHJpc20uaG9va3MuYWRkKFwiY29tcGxldGVcIixmdW5jdGlvbiBlKHQpe3ZhciBuPXQuZWxlbWVudC5wYXJlbnRFbGVtZW50O2lmKGMobikpe2NsZWFyVGltZW91dCh1KTt2YXIgaT1QcmlzbS5wbHVnaW5zLmxpbmVOdW1iZXJzLHI9dC5wbHVnaW5zJiZ0LnBsdWdpbnMubGluZU51bWJlcnM7aWYoYihuLG8pJiZpJiYhcilQcmlzbS5ob29rcy5hZGQoXCJsaW5lLW51bWJlcnNcIixlKTtlbHNlIGQobikoKSx1PXNldFRpbWVvdXQoZiwxKX19KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIixmKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGZ1bmN0aW9uKCl7dihcInByZVwiKS5maWx0ZXIoYykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBkKGUpfSkuZm9yRWFjaCh5KX0pfWZ1bmN0aW9uIHYoZSx0KXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoKHR8fGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKGUpKX1mdW5jdGlvbiBiKGUsdCl7cmV0dXJuIGUuY2xhc3NMaXN0LmNvbnRhaW5zKHQpfWZ1bmN0aW9uIHkoZSl7ZSgpfWZ1bmN0aW9uIGMoZSl7cmV0dXJuISghZXx8IS9wcmUvaS50ZXN0KGUubm9kZU5hbWUpKSYmKCEhZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIil8fCEoIWUuaWR8fCFQcmlzbS51dGlsLmlzQWN0aXZlKGUscykpKX1mdW5jdGlvbiBkKHUsZSxjKXt2YXIgdD0oZT1cInN0cmluZ1wiPT10eXBlb2YgZT9lOnUuZ2V0QXR0cmlidXRlKFwiZGF0YS1saW5lXCIpfHxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCJcIikuc3BsaXQoXCIsXCIpLmZpbHRlcihCb29sZWFuKSxkPSt1LmdldEF0dHJpYnV0ZShcImRhdGEtbGluZS1vZmZzZXRcIil8fDAsZj0oYSgpP3BhcnNlSW50OnBhcnNlRmxvYXQpKGdldENvbXB1dGVkU3R5bGUodSkubGluZUhlaWdodCkscD1QcmlzbS51dGlsLmlzQWN0aXZlKHUsbyksbj11LnF1ZXJ5U2VsZWN0b3IoXCJjb2RlXCIpLGg9cD91Om58fHUsbT1bXSxnPW4mJmghPW4/ZnVuY3Rpb24oZSx0KXt2YXIgbj1nZXRDb21wdXRlZFN0eWxlKGUpLGk9Z2V0Q29tcHV0ZWRTdHlsZSh0KTtmdW5jdGlvbiByKGUpe3JldHVybitlLnN1YnN0cigwLGUubGVuZ3RoLTIpfXJldHVybiB0Lm9mZnNldFRvcCtyKGkuYm9yZGVyVG9wV2lkdGgpK3IoaS5wYWRkaW5nVG9wKS1yKG4ucGFkZGluZ1RvcCl9KHUsbik6MDt0LmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdChcIi1cIiksbj0rdFswXSxpPSt0WzFdfHxuLHI9dS5xdWVyeVNlbGVjdG9yKCcubGluZS1oaWdobGlnaHRbZGF0YS1yYW5nZT1cIicrZSsnXCJdJyl8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7aWYobS5wdXNoKGZ1bmN0aW9uKCl7ci5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxyLnNldEF0dHJpYnV0ZShcImRhdGEtcmFuZ2VcIixlKSxyLmNsYXNzTmFtZT0oY3x8XCJcIikrXCIgbGluZS1oaWdobGlnaHRcIn0pLHAmJlByaXNtLnBsdWdpbnMubGluZU51bWJlcnMpe3ZhciBvPVByaXNtLnBsdWdpbnMubGluZU51bWJlcnMuZ2V0TGluZSh1LG4pLHM9UHJpc20ucGx1Z2lucy5saW5lTnVtYmVycy5nZXRMaW5lKHUsaSk7aWYobyl7dmFyIGE9by5vZmZzZXRUb3ArZytcInB4XCI7bS5wdXNoKGZ1bmN0aW9uKCl7ci5zdHlsZS50b3A9YX0pfWlmKHMpe3ZhciBsPXMub2Zmc2V0VG9wLW8ub2Zmc2V0VG9wK3Mub2Zmc2V0SGVpZ2h0K1wicHhcIjttLnB1c2goZnVuY3Rpb24oKXtyLnN0eWxlLmhlaWdodD1sfSl9fWVsc2UgbS5wdXNoKGZ1bmN0aW9uKCl7ci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YXJ0XCIsU3RyaW5nKG4pKSxuPGkmJnIuc2V0QXR0cmlidXRlKFwiZGF0YS1lbmRcIixTdHJpbmcoaSkpLHIuc3R5bGUudG9wPShuLWQtMSkqZitnK1wicHhcIixyLnRleHRDb250ZW50PW5ldyBBcnJheShpLW4rMikuam9pbihcIiBcXG5cIil9KTttLnB1c2goZnVuY3Rpb24oKXtoLmFwcGVuZENoaWxkKHIpfSl9KTt2YXIgaT11LmlkO2lmKHAmJlByaXNtLnV0aWwuaXNBY3RpdmUodSxzKSYmaSl7Yih1LHMpfHxtLnB1c2goZnVuY3Rpb24oKXt1LmNsYXNzTGlzdC5hZGQocyl9KTt2YXIgcj1wYXJzZUludCh1LmdldEF0dHJpYnV0ZShcImRhdGEtc3RhcnRcIil8fFwiMVwiKTt2KFwiLmxpbmUtbnVtYmVycy1yb3dzID4gc3BhblwiLHUpLmZvckVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbj10K3I7ZS5vbmNsaWNrPWZ1bmN0aW9uKCl7dmFyIGU9aStcIi5cIituO2w9ITEsbG9jYXRpb24uaGFzaD1lLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsPSEwfSwxKX19KX1yZXR1cm4gZnVuY3Rpb24oKXttLmZvckVhY2goeSl9fWZ1bmN0aW9uIGYoKXt2YXIgZT1sb2NhdGlvbi5oYXNoLnNsaWNlKDEpO3YoXCIudGVtcG9yYXJ5LmxpbmUtaGlnaGxpZ2h0XCIpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSk7dmFyIHQ9KGUubWF0Y2goL1xcLihbXFxkLC1dKykkLyl8fFssXCJcIl0pWzFdO2lmKHQmJiFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSl7dmFyIG49ZS5zbGljZSgwLGUubGFzdEluZGV4T2YoXCIuXCIpKSxpPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG4pO2lmKGkpaS5oYXNBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIil8fGkuc2V0QXR0cmlidXRlKFwiZGF0YS1saW5lXCIsXCJcIiksZChpLHQsXCJ0ZW1wb3JhcnkgXCIpKCksbCYmZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50ZW1wb3JhcnkubGluZS1oaWdobGlnaHRcIikuc2Nyb2xsSW50b1ZpZXcoKX19fSgpO1xuIWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuUHJpc20mJnNlbGYuZG9jdW1lbnQpe3ZhciBvPVwibGluZS1udW1iZXJzXCIsYT0vXFxuKD8hJCkvZyxlPVByaXNtLnBsdWdpbnMubGluZU51bWJlcnM9e2dldExpbmU6ZnVuY3Rpb24oZSxuKXtpZihcIlBSRVwiPT09ZS50YWdOYW1lJiZlLmNsYXNzTGlzdC5jb250YWlucyhvKSl7dmFyIHQ9ZS5xdWVyeVNlbGVjdG9yKFwiLmxpbmUtbnVtYmVycy1yb3dzXCIpO2lmKHQpe3ZhciBpPXBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGFydFwiKSwxMCl8fDEscj1pKyh0LmNoaWxkcmVuLmxlbmd0aC0xKTtuPGkmJihuPWkpLHI8biYmKG49cik7dmFyIHM9bi1pO3JldHVybiB0LmNoaWxkcmVuW3NdfX19LHJlc2l6ZTpmdW5jdGlvbihlKXt1KFtlXSl9LGFzc3VtZVZpZXdwb3J0SW5kZXBlbmRlbmNlOiEwfSx0PWZ1bmN0aW9uKGUpe3JldHVybiBlP3dpbmRvdy5nZXRDb21wdXRlZFN0eWxlP2dldENvbXB1dGVkU3R5bGUoZSk6ZS5jdXJyZW50U3R5bGV8fG51bGw6bnVsbH0sbj12b2lkIDA7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixmdW5jdGlvbigpe2UuYXNzdW1lVmlld3BvcnRJbmRlcGVuZGVuY2UmJm49PT13aW5kb3cuaW5uZXJXaWR0aHx8KG49d2luZG93LmlubmVyV2lkdGgsdShBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwicHJlLlwiK28pKSkpfSksUHJpc20uaG9va3MuYWRkKFwiY29tcGxldGVcIixmdW5jdGlvbihlKXtpZihlLmNvZGUpe3ZhciBuPWUuZWxlbWVudCx0PW4ucGFyZW50Tm9kZTtpZih0JiYvcHJlL2kudGVzdCh0Lm5vZGVOYW1lKSYmIW4ucXVlcnlTZWxlY3RvcihcIi5saW5lLW51bWJlcnMtcm93c1wiKSYmUHJpc20udXRpbC5pc0FjdGl2ZShuLG8pKXtuLmNsYXNzTGlzdC5yZW1vdmUobyksdC5jbGFzc0xpc3QuYWRkKG8pO3ZhciBpLHI9ZS5jb2RlLm1hdGNoKGEpLHM9cj9yLmxlbmd0aCsxOjEsbD1uZXcgQXJyYXkocysxKS5qb2luKFwiPHNwYW4+PC9zcGFuPlwiKTsoaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSkuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksaS5jbGFzc05hbWU9XCJsaW5lLW51bWJlcnMtcm93c1wiLGkuaW5uZXJIVE1MPWwsdC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXN0YXJ0XCIpJiYodC5zdHlsZS5jb3VudGVyUmVzZXQ9XCJsaW5lbnVtYmVyIFwiKyhwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImRhdGEtc3RhcnRcIiksMTApLTEpKSxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQoaSksdShbdF0pLFByaXNtLmhvb2tzLnJ1bihcImxpbmUtbnVtYmVyc1wiLGUpfX19KSxQcmlzbS5ob29rcy5hZGQoXCJsaW5lLW51bWJlcnNcIixmdW5jdGlvbihlKXtlLnBsdWdpbnM9ZS5wbHVnaW5zfHx7fSxlLnBsdWdpbnMubGluZU51bWJlcnM9ITB9KX1mdW5jdGlvbiB1KGUpe2lmKDAhPShlPWUuZmlsdGVyKGZ1bmN0aW9uKGUpe3ZhciBuPXQoZSlbXCJ3aGl0ZS1zcGFjZVwiXTtyZXR1cm5cInByZS13cmFwXCI9PT1ufHxcInByZS1saW5lXCI9PT1ufSkpLmxlbmd0aCl7dmFyIG49ZS5tYXAoZnVuY3Rpb24oZSl7dmFyIG49ZS5xdWVyeVNlbGVjdG9yKFwiY29kZVwiKSx0PWUucXVlcnlTZWxlY3RvcihcIi5saW5lLW51bWJlcnMtcm93c1wiKTtpZihuJiZ0KXt2YXIgaT1lLnF1ZXJ5U2VsZWN0b3IoXCIubGluZS1udW1iZXJzLXNpemVyXCIpLHI9bi50ZXh0Q29udGVudC5zcGxpdChhKTtpfHwoKGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIikpLmNsYXNzTmFtZT1cImxpbmUtbnVtYmVycy1zaXplclwiLG4uYXBwZW5kQ2hpbGQoaSkpLGkuaW5uZXJIVE1MPVwiMFwiLGkuc3R5bGUuZGlzcGxheT1cImJsb2NrXCI7dmFyIHM9aS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7cmV0dXJuIGkuaW5uZXJIVE1MPVwiXCIse2VsZW1lbnQ6ZSxsaW5lczpyLGxpbmVIZWlnaHRzOltdLG9uZUxpbmVySGVpZ2h0OnMsc2l6ZXI6aX19fSkuZmlsdGVyKEJvb2xlYW4pO24uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgaT1lLnNpemVyLG49ZS5saW5lcyxyPWUubGluZUhlaWdodHMscz1lLm9uZUxpbmVySGVpZ2h0O3Jbbi5sZW5ndGgtMV09dm9pZCAwLG4uZm9yRWFjaChmdW5jdGlvbihlLG4pe2lmKGUmJjE8ZS5sZW5ndGgpe3ZhciB0PWkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIikpO3Quc3R5bGUuZGlzcGxheT1cImJsb2NrXCIsdC50ZXh0Q29udGVudD1lfWVsc2UgcltuXT1zfSl9KSxuLmZvckVhY2goZnVuY3Rpb24oZSl7Zm9yKHZhciBuPWUuc2l6ZXIsdD1lLmxpbmVIZWlnaHRzLGk9MCxyPTA7cjx0Lmxlbmd0aDtyKyspdm9pZCAwPT09dFtyXSYmKHRbcl09bi5jaGlsZHJlbltpKytdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCl9KSxuLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49ZS5zaXplcix0PWUuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxpbmUtbnVtYmVycy1yb3dzXCIpO24uc3R5bGUuZGlzcGxheT1cIm5vbmVcIixuLmlubmVySFRNTD1cIlwiLGUubGluZUhlaWdodHMuZm9yRWFjaChmdW5jdGlvbihlLG4pe3QuY2hpbGRyZW5bbl0uc3R5bGUuaGVpZ2h0PWUrXCJweFwifSl9KX19fSgpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBQb2x5ZmlsbEV2ZW50ID0gZXZlbnRDb25zdHJ1Y3RvcigpO1xuXG4gIGZ1bmN0aW9uIGV2ZW50Q29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHdpbmRvdy5DdXN0b21FdmVudDtcbiAgICAvLyBJRTw9OSBTdXBwb3J0XG4gICAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHtidWJibGVzOiBmYWxzZSwgY2FuY2VsYWJsZTogZmFsc2UsIGRldGFpbDogdW5kZWZpbmVkfTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICAgIGV2dC5pbml0Q3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSwgcGFyYW1zLmRldGFpbCk7XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICAgIHJldHVybiBDdXN0b21FdmVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgaW5wdXQubmFtZSA9IG5hbWU7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDbGljayhlbGVtZW50LCB0YXJnZXRNb2RpZmllcktleSkge1xuICAgIHZhciB0byA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS10b1wiKSxcbiAgICAgICAgbWV0aG9kID0gYnVpbGRIaWRkZW5JbnB1dChcIl9tZXRob2RcIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSksXG4gICAgICAgIGNzcmYgPSBidWlsZEhpZGRlbklucHV0KFwiX2NzcmZfdG9rZW5cIiwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNzcmZcIikpLFxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIiksXG4gICAgICAgIHRhcmdldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpO1xuXG4gICAgZm9ybS5tZXRob2QgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSA9PT0gXCJnZXRcIikgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgZm9ybS5hY3Rpb24gPSB0bztcbiAgICBmb3JtLnN0eWxlLmRpc3BsYXkgPSBcImhpZGRlblwiO1xuXG4gICAgaWYgKHRhcmdldCkgZm9ybS50YXJnZXQgPSB0YXJnZXQ7XG4gICAgZWxzZSBpZiAodGFyZ2V0TW9kaWZpZXJLZXkpIGZvcm0udGFyZ2V0ID0gXCJfYmxhbmtcIjtcblxuICAgIGZvcm0uYXBwZW5kQ2hpbGQoY3NyZik7XG4gICAgZm9ybS5hcHBlbmRDaGlsZChtZXRob2QpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgZm9ybS5zdWJtaXQoKTtcbiAgfVxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZSkge1xuICAgIHZhciBlbGVtZW50ID0gZS50YXJnZXQ7XG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuXG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBwaG9lbml4TGlua0V2ZW50ID0gbmV3IFBvbHlmaWxsRXZlbnQoJ3Bob2VuaXgubGluay5jbGljaycsIHtcbiAgICAgICAgXCJidWJibGVzXCI6IHRydWUsIFwiY2FuY2VsYWJsZVwiOiB0cnVlXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFlbGVtZW50LmRpc3BhdGNoRXZlbnQocGhvZW5peExpbmtFdmVudCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSB7XG4gICAgICAgIGhhbmRsZUNsaWNrKGVsZW1lbnQsIGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5KTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgfSwgZmFsc2UpO1xuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwaG9lbml4LmxpbmsuY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBtZXNzYWdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jb25maXJtXCIpO1xuICAgIGlmKG1lc3NhZ2UgJiYgIXdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG59KSgpO1xuIiwgIi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsdWUpID0+IHtcbiAgaWYodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpe1xuICAgIHJldHVybiB2YWx1ZVxuICB9IGVsc2Uge1xuICAgIGxldCBjbG9zdXJlID0gZnVuY3Rpb24gKCl7IHJldHVybiB2YWx1ZSB9XG4gICAgcmV0dXJuIGNsb3N1cmVcbiAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBnbG9iYWxTZWxmID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogbnVsbFxuZXhwb3J0IGNvbnN0IHBoeFdpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBudWxsXG5leHBvcnQgY29uc3QgZ2xvYmFsID0gZ2xvYmFsU2VsZiB8fCBwaHhXaW5kb3cgfHwgdGhpc1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfVlNOID0gXCIyLjAuMFwiXG5leHBvcnQgY29uc3QgU09DS0VUX1NUQVRFUyA9IHtjb25uZWN0aW5nOiAwLCBvcGVuOiAxLCBjbG9zaW5nOiAyLCBjbG9zZWQ6IDN9XG5leHBvcnQgY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTAwMDBcbmV4cG9ydCBjb25zdCBXU19DTE9TRV9OT1JNQUwgPSAxMDAwXG5leHBvcnQgY29uc3QgQ0hBTk5FTF9TVEFURVMgPSB7XG4gIGNsb3NlZDogXCJjbG9zZWRcIixcbiAgZXJyb3JlZDogXCJlcnJvcmVkXCIsXG4gIGpvaW5lZDogXCJqb2luZWRcIixcbiAgam9pbmluZzogXCJqb2luaW5nXCIsXG4gIGxlYXZpbmc6IFwibGVhdmluZ1wiLFxufVxuZXhwb3J0IGNvbnN0IENIQU5ORUxfRVZFTlRTID0ge1xuICBjbG9zZTogXCJwaHhfY2xvc2VcIixcbiAgZXJyb3I6IFwicGh4X2Vycm9yXCIsXG4gIGpvaW46IFwicGh4X2pvaW5cIixcbiAgcmVwbHk6IFwicGh4X3JlcGx5XCIsXG4gIGxlYXZlOiBcInBoeF9sZWF2ZVwiXG59XG5cbmV4cG9ydCBjb25zdCBUUkFOU1BPUlRTID0ge1xuICBsb25ncG9sbDogXCJsb25ncG9sbFwiLFxuICB3ZWJzb2NrZXQ6IFwid2Vic29ja2V0XCJcbn1cbmV4cG9ydCBjb25zdCBYSFJfU1RBVEVTID0ge1xuICBjb21wbGV0ZTogNFxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFB1c2hcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQsIGZvciBleGFtcGxlIGBcInBoeF9qb2luXCJgXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IDEyM31gXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCAtIFRoZSBwdXNoIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1c2gge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBldmVudCwgcGF5bG9hZCwgdGltZW91dCl7XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuZXZlbnQgPSBldmVudFxuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQgfHwgZnVuY3Rpb24gKCl7IHJldHVybiB7fSB9XG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICAgIHRoaXMucmVjSG9va3MgPSBbXVxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAgICovXG4gIHJlc2VuZCh0aW1lb3V0KXtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5zZW5kKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VuZCgpe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoXCJ0aW1lb3V0XCIpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnN0YXJ0VGltZW91dCgpXG4gICAgdGhpcy5zZW50ID0gdHJ1ZVxuICAgIHRoaXMuY2hhbm5lbC5zb2NrZXQucHVzaCh7XG4gICAgICB0b3BpYzogdGhpcy5jaGFubmVsLnRvcGljLFxuICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQoKSxcbiAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICBqb2luX3JlZjogdGhpcy5jaGFubmVsLmpvaW5SZWYoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBzdGF0dXNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKi9cbiAgcmVjZWl2ZShzdGF0dXMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKHN0YXR1cykpe1xuICAgICAgY2FsbGJhY2sodGhpcy5yZWNlaXZlZFJlc3AucmVzcG9uc2UpXG4gICAgfVxuXG4gICAgdGhpcy5yZWNIb29rcy5wdXNoKHtzdGF0dXMsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXNldCgpe1xuICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgIHRoaXMucmVmID0gbnVsbFxuICAgIHRoaXMucmVmRXZlbnQgPSBudWxsXG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWF0Y2hSZWNlaXZlKHtzdGF0dXMsIHJlc3BvbnNlLCBfcmVmfSl7XG4gICAgdGhpcy5yZWNIb29rcy5maWx0ZXIoaCA9PiBoLnN0YXR1cyA9PT0gc3RhdHVzKVxuICAgICAgLmZvckVhY2goaCA9PiBoLmNhbGxiYWNrKHJlc3BvbnNlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsUmVmRXZlbnQoKXtcbiAgICBpZighdGhpcy5yZWZFdmVudCl7IHJldHVybiB9XG4gICAgdGhpcy5jaGFubmVsLm9mZih0aGlzLnJlZkV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRpbWVyKVxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnRpbWVvdXRUaW1lcil7IHRoaXMuY2FuY2VsVGltZW91dCgpIH1cbiAgICB0aGlzLnJlZiA9IHRoaXMuY2hhbm5lbC5zb2NrZXQubWFrZVJlZigpXG4gICAgdGhpcy5yZWZFdmVudCA9IHRoaXMuY2hhbm5lbC5yZXBseUV2ZW50TmFtZSh0aGlzLnJlZilcblxuICAgIHRoaXMuY2hhbm5lbC5vbih0aGlzLnJlZkV2ZW50LCBwYXlsb2FkID0+IHtcbiAgICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KClcbiAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZFxuICAgICAgdGhpcy5tYXRjaFJlY2VpdmUocGF5bG9hZClcbiAgICB9KVxuXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInRpbWVvdXRcIiwge30pXG4gICAgfSwgdGhpcy50aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNSZWNlaXZlZChzdGF0dXMpe1xuICAgIHJldHVybiB0aGlzLnJlY2VpdmVkUmVzcCAmJiB0aGlzLnJlY2VpdmVkUmVzcC5zdGF0dXMgPT09IHN0YXR1c1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKHN0YXR1cywgcmVzcG9uc2Upe1xuICAgIHRoaXMuY2hhbm5lbC50cmlnZ2VyKHRoaXMucmVmRXZlbnQsIHtzdGF0dXMsIHJlc3BvbnNlfSlcbiAgfVxufVxuIiwgIi8qKlxuICpcbiAqIENyZWF0ZXMgYSB0aW1lciB0aGF0IGFjY2VwdHMgYSBgdGltZXJDYWxjYCBmdW5jdGlvbiB0byBwZXJmb3JtXG4gKiBjYWxjdWxhdGVkIHRpbWVvdXQgcmV0cmllcywgc3VjaCBhcyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgcmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4gdGhpcy5jb25uZWN0KCksIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfSlcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDUwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdGltZXJDYWxjXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHRpbWVyQ2FsYyl7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGNcbiAgICB0aGlzLnRpbWVyID0gbnVsbFxuICAgIHRoaXMudHJpZXMgPSAwXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJpZXMgPSAwXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAgICovXG4gIHNjaGVkdWxlVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuXG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmllcyA9IHRoaXMudHJpZXMgKyAxXG4gICAgICB0aGlzLmNhbGxiYWNrKClcbiAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpXG4gIH1cbn1cbiIsICJpbXBvcnQge2Nsb3N1cmV9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTLFxuICBDSEFOTkVMX1NUQVRFUyxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IFB1c2ggZnJvbSBcIi4vcHVzaFwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IHBhcmFtc1xuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFubmVsIHtcbiAgY29uc3RydWN0b3IodG9waWMsIHBhcmFtcywgc29ja2V0KXtcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgdGhpcy50b3BpYyA9IHRvcGljXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgIHRoaXMuYmluZGluZ3MgPSBbXVxuICAgIHRoaXMuYmluZGluZ1JlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLnNvY2tldC50aW1lb3V0XG4gICAgdGhpcy5qb2luZWRPbmNlID0gZmFsc2VcbiAgICB0aGlzLmpvaW5QdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMuam9pbiwgdGhpcy5wYXJhbXMsIHRoaXMudGltZW91dClcbiAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzID0gW11cblxuICAgIHRoaXMucmVqb2luVGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0sIHRoaXMuc29ja2V0LnJlam9pbkFmdGVyTXMpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbkVycm9yKCgpID0+IHRoaXMucmVqb2luVGltZXIucmVzZXQoKSkpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLmlzRXJyb3JlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSlcbiAgICApXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5lZFxuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaChwdXNoRXZlbnQgPT4gcHVzaEV2ZW50LnNlbmQoKSlcbiAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbkNsb3NlKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGNsb3NlICR7dGhpcy50b3BpY30gJHt0aGlzLmpvaW5SZWYoKX1gKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlKHRoaXMpXG4gICAgfSlcbiAgICB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBlcnJvciAke3RoaXMudG9waWN9YCwgcmVhc29uKVxuICAgICAgaWYodGhpcy5pc0pvaW5pbmcoKSl7IHRoaXMuam9pblB1c2gucmVzZXQoKSB9XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgdGltZW91dCAke3RoaXMudG9waWN9ICgke3RoaXMuam9pblJlZigpfSlgLCB0aGlzLmpvaW5QdXNoLnRpbWVvdXQpXG4gICAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aGlzLnRpbWVvdXQpXG4gICAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgdGhpcy5qb2luUHVzaC5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLnJlcGx5LCAocGF5bG9hZCwgcmVmKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIodGhpcy5yZXBseUV2ZW50TmFtZShyZWYpLCBwYXlsb2FkKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSm9pbiB0aGUgY2hhbm5lbFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmllZCB0byBqb2luIG11bHRpcGxlIHRpbWVzLiAnam9pbicgY2FuIG9ubHkgYmUgY2FsbGVkIGEgc2luZ2xlIHRpbWUgcGVyIGNoYW5uZWwgaW5zdGFuY2VcIilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgICAgdGhpcy5qb2luZWRPbmNlID0gdHJ1ZVxuICAgICAgdGhpcy5yZWpvaW4oKVxuICAgICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgY2xvc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGVycm9yc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuZXJyb3IsIHJlYXNvbiA9PiBjYWxsYmFjayhyZWFzb24pKVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgb24gY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogU3Vic2NyaXB0aW9uIHJldHVybnMgYSByZWYgY291bnRlciwgd2hpY2ggY2FuIGJlIHVzZWQgbGF0ZXIgdG9cbiAgICogdW5zdWJzY3JpYmUgdGhlIGV4YWN0IGV2ZW50IGxpc3RlbmVyXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNvbnN0IHJlZjIgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fb3RoZXJfc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICogLy8gU2luY2UgdW5zdWJzY3JpcHRpb24sIGRvX3N0dWZmIHdvbid0IGZpcmUsXG4gICAqIC8vIHdoaWxlIGRvX290aGVyX3N0dWZmIHdpbGwga2VlcCBmaXJpbmcgb24gdGhlIFwiZXZlbnRcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5iaW5kaW5nUmVmKytcbiAgICB0aGlzLmJpbmRpbmdzLnB1c2goe2V2ZW50LCByZWYsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIG9mZiBvZiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBVc2UgdGhlIHJlZiByZXR1cm5lZCBmcm9tIGEgY2hhbm5lbC5vbigpIHRvIHVuc3Vic2NyaWJlIG9uZVxuICAgKiBoYW5kbGVyLCBvciBwYXNzIG5vdGhpbmcgZm9yIHRoZSByZWYgdG8gdW5zdWJzY3JpYmUgYWxsXG4gICAqIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFVuc3Vic2NyaWJlIHRoZSBkb19zdHVmZiBoYW5kbGVyXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICpcbiAgICogLy8gVW5zdWJzY3JpYmUgYWxsIGhhbmRsZXJzIGZyb20gZXZlbnRcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9mZihldmVudCwgcmVmKXtcbiAgICB0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgIHJldHVybiAhKGJpbmQuZXZlbnQgPT09IGV2ZW50ICYmICh0eXBlb2YgcmVmID09PSBcInVuZGVmaW5lZFwiIHx8IHJlZiA9PT0gYmluZC5yZWYpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhblB1c2goKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5pc0pvaW5lZCgpIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIGBldmVudGAgdG8gcGhvZW5peCB3aXRoIHRoZSBwYXlsb2FkIGBwYXlsb2FkYC5cbiAgICogUGhvZW5peCByZWNlaXZlcyB0aGlzIGluIHRoZSBgaGFuZGxlX2luKGV2ZW50LCBwYXlsb2FkLCBzb2NrZXQpYFxuICAgKiBmdW5jdGlvbi4gaWYgcGhvZW5peCByZXBsaWVzIG9yIGl0IHRpbWVzIG91dCAoZGVmYXVsdCAxMDAwMG1zKSxcbiAgICogdGhlbiBvcHRpb25hbGx5IHRoZSByZXBseSBjYW4gYmUgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwucHVzaChcImV2ZW50XCIpXG4gICAqICAgLnJlY2VpdmUoXCJva1wiLCBwYXlsb2FkID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCByZXBsaWVkOlwiLCBwYXlsb2FkKSlcbiAgICogICAucmVjZWl2ZShcImVycm9yXCIsIGVyciA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggZXJyb3JlZFwiLCBlcnIpKVxuICAgKiAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBjb25zb2xlLmxvZyhcInRpbWVkIG91dCBwdXNoaW5nXCIpKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0XVxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIHB1c2goZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHBheWxvYWQgPSBwYXlsb2FkIHx8IHt9XG4gICAgaWYoIXRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyaWVkIHRvIHB1c2ggJyR7ZXZlbnR9JyB0byAnJHt0aGlzLnRvcGljfScgYmVmb3JlIGpvaW5pbmcuIFVzZSBjaGFubmVsLmpvaW4oKSBiZWZvcmUgcHVzaGluZyBldmVudHNgKVxuICAgIH1cbiAgICBsZXQgcHVzaEV2ZW50ID0gbmV3IFB1c2godGhpcywgZXZlbnQsIGZ1bmN0aW9uICgpeyByZXR1cm4gcGF5bG9hZCB9LCB0aW1lb3V0KVxuICAgIGlmKHRoaXMuY2FuUHVzaCgpKXtcbiAgICAgIHB1c2hFdmVudC5zZW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaEV2ZW50LnN0YXJ0VGltZW91dCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIucHVzaChwdXNoRXZlbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHB1c2hFdmVudFxuICB9XG5cbiAgLyoqIExlYXZlcyB0aGUgY2hhbm5lbFxuICAgKlxuICAgKiBVbnN1YnNjcmliZXMgZnJvbSBzZXJ2ZXIgZXZlbnRzLCBhbmRcbiAgICogaW5zdHJ1Y3RzIGNoYW5uZWwgdG8gdGVybWluYXRlIG9uIHNlcnZlclxuICAgKlxuICAgKiBUcmlnZ2VycyBvbkNsb3NlKCkgaG9va3NcbiAgICpcbiAgICogVG8gcmVjZWl2ZSBsZWF2ZSBhY2tub3dsZWRnZW1lbnRzLCB1c2UgdGhlIGByZWNlaXZlYFxuICAgKiBob29rIHRvIGJpbmQgdG8gdGhlIHNlcnZlciBhY2ssIGllOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLmxlYXZlKCkucmVjZWl2ZShcIm9rXCIsICgpID0+IGFsZXJ0KFwibGVmdCFcIikgKVxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBsZWF2ZSh0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICB0aGlzLmpvaW5QdXNoLmNhbmNlbFRpbWVvdXQoKVxuXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmxlYXZpbmdcbiAgICBsZXQgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBsZWF2ZSAke3RoaXMudG9waWN9YClcbiAgICAgIHRoaXMudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgXCJsZWF2ZVwiKVxuICAgIH1cbiAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aW1lb3V0KVxuICAgIGxlYXZlUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgaWYoIXRoaXMuY2FuUHVzaCgpKXsgbGVhdmVQdXNoLnRyaWdnZXIoXCJva1wiLCB7fSkgfVxuXG4gICAgcmV0dXJuIGxlYXZlUHVzaFxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRhYmxlIG1lc3NhZ2UgaG9va1xuICAgKlxuICAgKiBSZWNlaXZlcyBhbGwgZXZlbnRzIGZvciBzcGVjaWFsaXplZCBtZXNzYWdlIGhhbmRsaW5nXG4gICAqIGJlZm9yZSBkaXNwYXRjaGluZyB0byB0aGUgY2hhbm5lbCBjYWxsYmFja3MuXG4gICAqXG4gICAqIE11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgb25NZXNzYWdlKF9ldmVudCwgcGF5bG9hZCwgX3JlZil7IHJldHVybiBwYXlsb2FkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZil7XG4gICAgaWYodGhpcy50b3BpYyAhPT0gdG9waWMpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYoam9pblJlZiAmJiBqb2luUmVmICE9PSB0aGlzLmpvaW5SZWYoKSl7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBcImRyb3BwaW5nIG91dGRhdGVkIG1lc3NhZ2VcIiwge3RvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZn0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGpvaW5SZWYoKXsgcmV0dXJuIHRoaXMuam9pblB1c2gucmVmIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmlzTGVhdmluZygpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnNvY2tldC5sZWF2ZU9wZW5Ub3BpYyh0aGlzLnRvcGljKVxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nXG4gICAgdGhpcy5qb2luUHVzaC5yZXNlbmQodGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKXtcbiAgICBsZXQgaGFuZGxlZFBheWxvYWQgPSB0aGlzLm9uTWVzc2FnZShldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKVxuICAgIGlmKHBheWxvYWQgJiYgIWhhbmRsZWRQYXlsb2FkKXsgdGhyb3cgbmV3IEVycm9yKFwiY2hhbm5lbCBvbk1lc3NhZ2UgY2FsbGJhY2tzIG11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXCIpIH1cblxuICAgIGxldCBldmVudEJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoYmluZCA9PiBiaW5kLmV2ZW50ID09PSBldmVudClcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBldmVudEJpbmRpbmdzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGxldCBiaW5kID0gZXZlbnRCaW5kaW5nc1tpXVxuICAgICAgYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmLCBqb2luUmVmIHx8IHRoaXMuam9pblJlZigpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVwbHlFdmVudE5hbWUocmVmKXsgcmV0dXJuIGBjaGFuX3JlcGx5XyR7cmVmfWAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNDbG9zZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmNsb3NlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Vycm9yZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmVycm9yZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5lZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5pbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5pbmcgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNMZWF2aW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nIH1cbn1cbiIsICJpbXBvcnQge1xuICBnbG9iYWwsXG4gIFhIUl9TVEFURVNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWpheCB7XG5cbiAgc3RhdGljIHJlcXVlc3QobWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBpZihnbG9iYWwuWERvbWFpblJlcXVlc3Qpe1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKSAvLyBJRTgsIElFOVxuICAgICAgdGhpcy54ZG9tYWluUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCByZXEgPSBuZXcgZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0KCkgLy8gSUU3KywgRmlyZWZveCwgQ2hyb21lLCBPcGVyYSwgU2FmYXJpXG4gICAgICB0aGlzLnhoclJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBhY2NlcHQsIGJvZHksIHRpbWVvdXQsIG9udGltZW91dCwgY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHhkb21haW5SZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjayl7XG4gICAgcmVxLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgcmVxLm9wZW4obWV0aG9kLCBlbmRQb2ludClcbiAgICByZXEub25sb2FkID0gKCkgPT4ge1xuICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIC8vIFdvcmsgYXJvdW5kIGJ1ZyBpbiBJRTkgdGhhdCByZXF1aXJlcyBhbiBhdHRhY2hlZCBvbnByb2dyZXNzIGhhbmRsZXJcbiAgICByZXEub25wcm9ncmVzcyA9ICgpID0+IHsgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgfVxuXG4gIHN0YXRpYyB4aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50LCB0cnVlKVxuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIGFjY2VwdClcbiAgICByZXEub25lcnJvciA9ICgpID0+IHsgY2FsbGJhY2sgJiYgY2FsbGJhY2sobnVsbCkgfVxuICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICBpZihyZXEucmVhZHlTdGF0ZSA9PT0gWEhSX1NUQVRFUy5jb21wbGV0ZSAmJiBjYWxsYmFjayl7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHRoaXMucGFyc2VKU09OKHJlcS5yZXNwb25zZVRleHQpXG4gICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKVxuICAgICAgfVxuICAgIH1cbiAgICBpZihvbnRpbWVvdXQpeyByZXEub250aW1lb3V0ID0gb250aW1lb3V0IH1cblxuICAgIHJlcS5zZW5kKGJvZHkpXG4gIH1cblxuICBzdGF0aWMgcGFyc2VKU09OKHJlc3Ape1xuICAgIGlmKCFyZXNwIHx8IHJlc3AgPT09IFwiXCIpeyByZXR1cm4gbnVsbCB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcClcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZVwiLCByZXNwKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplKG9iaiwgcGFyZW50S2V5KXtcbiAgICBsZXQgcXVlcnlTdHIgPSBbXVxuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSl7IGNvbnRpbnVlIH1cbiAgICAgIGxldCBwYXJhbUtleSA9IHBhcmVudEtleSA/IGAke3BhcmVudEtleX1bJHtrZXl9XWAgOiBrZXlcbiAgICAgIGxldCBwYXJhbVZhbCA9IG9ialtrZXldXG4gICAgICBpZih0eXBlb2YgcGFyYW1WYWwgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICBxdWVyeVN0ci5wdXNoKHRoaXMuc2VyaWFsaXplKHBhcmFtVmFsLCBwYXJhbUtleSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwYXJhbUtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeVN0ci5qb2luKFwiJlwiKVxuICB9XG5cbiAgc3RhdGljIGFwcGVuZFBhcmFtcyh1cmwsIHBhcmFtcyl7XG4gICAgaWYoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApeyByZXR1cm4gdXJsIH1cblxuICAgIGxldCBwcmVmaXggPSB1cmwubWF0Y2goL1xcPy8pID8gXCImXCIgOiBcIj9cIlxuICAgIHJldHVybiBgJHt1cmx9JHtwcmVmaXh9JHt0aGlzLnNlcmlhbGl6ZShwYXJhbXMpfWBcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFNPQ0tFVF9TVEFURVMsXG4gIFRSQU5TUE9SVFNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEFqYXggZnJvbSBcIi4vYWpheFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvbmdQb2xsIHtcblxuICBjb25zdHJ1Y3RvcihlbmRQb2ludCl7XG4gICAgdGhpcy5lbmRQb2ludCA9IG51bGxcbiAgICB0aGlzLnRva2VuID0gbnVsbFxuICAgIHRoaXMuc2tpcEhlYXJ0YmVhdCA9IHRydWVcbiAgICB0aGlzLm9ub3BlbiA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLm9uZXJyb3IgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmNsb3NlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMucG9sbEVuZHBvaW50ID0gdGhpcy5ub3JtYWxpemVFbmRwb2ludChlbmRQb2ludClcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcblxuICAgIHRoaXMucG9sbCgpXG4gIH1cblxuICBub3JtYWxpemVFbmRwb2ludChlbmRQb2ludCl7XG4gICAgcmV0dXJuIChlbmRQb2ludFxuICAgICAgLnJlcGxhY2UoXCJ3czovL1wiLCBcImh0dHA6Ly9cIilcbiAgICAgIC5yZXBsYWNlKFwid3NzOi8vXCIsIFwiaHR0cHM6Ly9cIilcbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoLiopXFwvXCIgKyBUUkFOU1BPUlRTLndlYnNvY2tldCksIFwiJDEvXCIgKyBUUkFOU1BPUlRTLmxvbmdwb2xsKSlcbiAgfVxuXG4gIGVuZHBvaW50VVJMKCl7XG4gICAgcmV0dXJuIEFqYXguYXBwZW5kUGFyYW1zKHRoaXMucG9sbEVuZHBvaW50LCB7dG9rZW46IHRoaXMudG9rZW59KVxuICB9XG5cbiAgY2xvc2VBbmRSZXRyeSgpe1xuICAgIHRoaXMuY2xvc2UoKVxuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZ1xuICB9XG5cbiAgb250aW1lb3V0KCl7XG4gICAgdGhpcy5vbmVycm9yKFwidGltZW91dFwiKVxuICAgIHRoaXMuY2xvc2VBbmRSZXRyeSgpXG4gIH1cblxuICBwb2xsKCl7XG4gICAgaWYoISh0aGlzLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMub3BlbiB8fCB0aGlzLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZykpeyByZXR1cm4gfVxuXG4gICAgQWpheC5yZXF1ZXN0KFwiR0VUXCIsIHRoaXMuZW5kcG9pbnRVUkwoKSwgXCJhcHBsaWNhdGlvbi9qc29uXCIsIG51bGwsIHRoaXMudGltZW91dCwgdGhpcy5vbnRpbWVvdXQuYmluZCh0aGlzKSwgKHJlc3ApID0+IHtcbiAgICAgIGlmKHJlc3Ape1xuICAgICAgICB2YXIge3N0YXR1cywgdG9rZW4sIG1lc3NhZ2VzfSA9IHJlc3BcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaChzdGF0dXMpe1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAvLyBUYXNrcyBhcmUgd2hhdCB0aGluZ3MgbGlrZSBldmVudCBoYW5kbGVycywgc2V0VGltZW91dCBjYWxsYmFja3MsXG4gICAgICAgICAgICAvLyBwcm9taXNlIHJlc29sdmVzIGFuZCBtb3JlIGFyZSBydW4gd2l0aGluLlxuICAgICAgICAgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZiB0YXNrcyxcbiAgICAgICAgICAgIC8vIG1pY3JvdGFza3MgYW5kIG1hY3JvdGFza3MuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFyZSBtYWlubHkgdXNlZCBmb3IgUHJvbWlzZXMsIHdoaWxlIG1hY3JvdGFza3MgYXJlXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFsd2F5cyBoYXZlIHByaW9yaXR5IG92ZXIgbWFjcm90YXNrcy4gSWYgdGhlIEpTIGVuZ2luZVxuICAgICAgICAgICAgLy8gaXMgbG9va2luZyBmb3IgYSB0YXNrIHRvIHJ1biwgaXQgd2lsbCBhbHdheXMgdHJ5IHRvIGVtcHR5IHRoZVxuICAgICAgICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJ1biBhbnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gbWFjcm90YXNrIHF1ZXVlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCwgbWVzc2FnZXMgYWx3YXlzIGFycml2ZSBpbiB0aGVpciBvd25cbiAgICAgICAgICAgIC8vIGV2ZW50LiBUaGlzIG1lYW5zIHRoYXQgaWYgYW55IHByb21pc2VzIGFyZSByZXNvbHZlZCBmcm9tIHdpdGhpbixcbiAgICAgICAgICAgIC8vIHRoZWlyIGNhbGxiYWNrcyB3aWxsIGFsd2F5cyBmaW5pc2ggZXhlY3V0aW9uIGJ5IHRoZSB0aW1lIHRoZVxuICAgICAgICAgICAgLy8gbmV4dCBtZXNzYWdlIGV2ZW50IGhhbmRsZXIgaXMgcnVuLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVtdWxhdGUgdGhpcyBiZWhhdmlvdXIsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGVhY2hcbiAgICAgICAgICAgIC8vIG9ubWVzc2FnZSBoYW5kbGVyIGlzIHJ1biB3aXRoaW4gaXQncyBvd24gbWFjcm90YXNrLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMub25tZXNzYWdlKHtkYXRhOiBtc2d9KVxuICAgICAgICAgICAgfSwgMClcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQxMDpcbiAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLm9wZW5cbiAgICAgICAgICB0aGlzLm9ub3BlbigpXG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQwMzpcbiAgICAgICAgICB0aGlzLm9uZXJyb3IoKVxuICAgICAgICAgIHRoaXMuY2xvc2UoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgY2FzZSA1MDA6XG4gICAgICAgICAgdGhpcy5vbmVycm9yKClcbiAgICAgICAgICB0aGlzLmNsb3NlQW5kUmV0cnkoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgdW5oYW5kbGVkIHBvbGwgc3RhdHVzICR7c3RhdHVzfWApXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHNlbmQoYm9keSl7XG4gICAgQWpheC5yZXF1ZXN0KFwiUE9TVFwiLCB0aGlzLmVuZHBvaW50VVJMKCksIFwiYXBwbGljYXRpb24vanNvblwiLCBib2R5LCB0aGlzLnRpbWVvdXQsIHRoaXMub25lcnJvci5iaW5kKHRoaXMsIFwidGltZW91dFwiKSwgKHJlc3ApID0+IHtcbiAgICAgIGlmKCFyZXNwIHx8IHJlc3Auc3RhdHVzICE9PSAyMDApe1xuICAgICAgICB0aGlzLm9uZXJyb3IocmVzcCAmJiByZXNwLnN0YXR1cylcbiAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY2xvc2UoX2NvZGUsIF9yZWFzb24pe1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNPQ0tFVF9TVEFURVMuY2xvc2VkXG4gICAgdGhpcy5vbmNsb3NlKClcbiAgfVxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFByZXNlbmNlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyxcbiAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiBcInN0YXRlXCIsIGRpZmY6IFwiZGlmZlwifX1gXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXNlbmNlIHtcblxuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzID0ge30pe1xuICAgIGxldCBldmVudHMgPSBvcHRzLmV2ZW50cyB8fCB7c3RhdGU6IFwicHJlc2VuY2Vfc3RhdGVcIiwgZGlmZjogXCJwcmVzZW5jZV9kaWZmXCJ9XG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmpvaW5SZWYgPSBudWxsXG4gICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICBvbkpvaW46IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvblN5bmM6IGZ1bmN0aW9uICgpeyB9XG4gICAgfVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5zdGF0ZSwgbmV3U3RhdGUgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpXG5cbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZGlmZiA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgICAgb25TeW5jKClcbiAgICB9KVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5kaWZmLCBkaWZmID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgaWYodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSl7XG4gICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICAgIG9uU3luYygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbihjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrIH1cblxuICBvbkxlYXZlKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrIH1cblxuICBvblN5bmMoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vblN5bmMgPSBjYWxsYmFjayB9XG5cbiAgbGlzdChieSl7IHJldHVybiBQcmVzZW5jZS5saXN0KHRoaXMuc3RhdGUsIGJ5KSB9XG5cbiAgaW5QZW5kaW5nU3luY1N0YXRlKCl7XG4gICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgKHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8vIGxvd2VyLWxldmVsIHB1YmxpYyBzdGF0aWMgQVBJXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlclxuICAgKiB3aXRoIHRoZSBjbGllbnQncyBzdGF0ZS4gQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW5cbiAgICogYmUgcHJvdmlkZWQgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNsb25lKGN1cnJlbnRTdGF0ZSlcbiAgICBsZXQgam9pbnMgPSB7fVxuICAgIGxldCBsZWF2ZXMgPSB7fVxuXG4gICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICBpZighbmV3U3RhdGVba2V5XSl7XG4gICAgICAgIGxlYXZlc1trZXldID0gcHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMubWFwKG5ld1N0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBuZXdSZWZzID0gbmV3UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyUmVmcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBqb2luZWRNZXRhcyA9IG5ld1ByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGN1clJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgbGV0IGxlZnRNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBuZXdSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGlmKGpvaW5lZE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgICAgIGpvaW5zW2tleV0ubWV0YXMgPSBqb2luZWRNZXRhc1xuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZWF2ZXNba2V5XSA9IHRoaXMuY2xvbmUoY3VycmVudFByZXNlbmNlKVxuICAgICAgICAgIGxlYXZlc1trZXldLm1ldGFzID0gbGVmdE1ldGFzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHtqb2luczogam9pbnMsIGxlYXZlczogbGVhdmVzfSwgb25Kb2luLCBvbkxlYXZlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmVcbiAgICogZXZlbnRzIGZyb20gdGhlIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmBcbiAgICogYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXJcbiAgICogam9pbmluZyBvciBsZWF2aW5nIGZyb20gYSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQge2pvaW5zLCBsZWF2ZXN9ID0gdGhpcy5jbG9uZShkaWZmKVxuICAgIGlmKCFvbkpvaW4peyBvbkpvaW4gPSBmdW5jdGlvbiAoKXsgfSB9XG4gICAgaWYoIW9uTGVhdmUpeyBvbkxlYXZlID0gZnVuY3Rpb24gKCl7IH0gfVxuXG4gICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmUobmV3UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgam9pbmVkUmVmcyA9IHN0YXRlW2tleV0ubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyTWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gam9pbmVkUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBzdGF0ZVtrZXldLm1ldGFzLnVuc2hpZnQoLi4uY3VyTWV0YXMpXG4gICAgICB9XG4gICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2UsIG5ld1ByZXNlbmNlKVxuICAgIH0pXG4gICAgdGhpcy5tYXAobGVhdmVzLCAoa2V5LCBsZWZ0UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZighY3VycmVudFByZXNlbmNlKXsgcmV0dXJuIH1cbiAgICAgIGxldCByZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgY3VycmVudFByZXNlbmNlLm1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnNUb1JlbW92ZS5pbmRleE9mKHAucGh4X3JlZikgPCAwXG4gICAgICB9KVxuICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZSwgbGVmdFByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlLm1ldGFzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcmVzZW5jZXMsIHdpdGggc2VsZWN0ZWQgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZW5jZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hvb3NlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgbGlzdChwcmVzZW5jZXMsIGNob29zZXIpe1xuICAgIGlmKCFjaG9vc2VyKXsgY2hvb3NlciA9IGZ1bmN0aW9uIChrZXksIHByZXMpeyByZXR1cm4gcHJlcyB9IH1cblxuICAgIHJldHVybiB0aGlzLm1hcChwcmVzZW5jZXMsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICByZXR1cm4gY2hvb3NlcihrZXksIHByZXNlbmNlKVxuICAgIH0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgc3RhdGljIG1hcChvYmosIGZ1bmMpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcChrZXkgPT4gZnVuYyhrZXksIG9ialtrZXldKSlcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShvYmopeyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG59XG4iLCAiLyogVGhlIGRlZmF1bHQgc2VyaWFsaXplciBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIG1lc3NhZ2VzICovXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEhFQURFUl9MRU5HVEg6IDEsXG4gIE1FVEFfTEVOR1RIOiA0LFxuICBLSU5EUzoge3B1c2g6IDAsIHJlcGx5OiAxLCBicm9hZGNhc3Q6IDJ9LFxuXG4gIGVuY29kZShtc2csIGNhbGxiYWNrKXtcbiAgICBpZihtc2cucGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RW5jb2RlKG1zZykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkID0gW21zZy5qb2luX3JlZiwgbXNnLnJlZiwgbXNnLnRvcGljLCBtc2cuZXZlbnQsIG1zZy5wYXlsb2FkXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spe1xuICAgIGlmKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeURlY29kZShyYXdQYXlsb2FkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWRdID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWR9KVxuICAgIH1cbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgYmluYXJ5RW5jb2RlKG1lc3NhZ2Upe1xuICAgIGxldCB7am9pbl9yZWYsIHJlZiwgZXZlbnQsIHRvcGljLCBwYXlsb2FkfSA9IG1lc3NhZ2VcbiAgICBsZXQgbWV0YUxlbmd0aCA9IHRoaXMuTUVUQV9MRU5HVEggKyBqb2luX3JlZi5sZW5ndGggKyByZWYubGVuZ3RoICsgdG9waWMubGVuZ3RoICsgZXZlbnQubGVuZ3RoXG4gICAgbGV0IGhlYWRlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLkhFQURFUl9MRU5HVEggKyBtZXRhTGVuZ3RoKVxuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGhlYWRlcilcbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdGhpcy5LSU5EUy5wdXNoKSAvLyBraW5kXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgam9pbl9yZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHJlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdG9waWMubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGV2ZW50Lmxlbmd0aClcbiAgICBBcnJheS5mcm9tKGpvaW5fcmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShyZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHRvcGljLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShldmVudCwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuXG4gICAgdmFyIGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGggKyBwYXlsb2FkLmJ5dGVMZW5ndGgpXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlciksIDApXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KHBheWxvYWQpLCBoZWFkZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiBjb21iaW5lZC5idWZmZXJcbiAgfSxcblxuICBiaW5hcnlEZWNvZGUoYnVmZmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgbGV0IGtpbmQgPSB2aWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5wdXNoOiByZXR1cm4gdGhpcy5kZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5yZXBseTogcmV0dXJuIHRoaXMuZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLmJyb2FkY2FzdDogcmV0dXJuIHRoaXMuZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEggLSAxIC8vIHB1c2hlcyBoYXZlIG5vIHJlZlxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfSxcblxuICBkZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgcmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDQpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEhcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCByZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyByZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyByZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgbGV0IHBheWxvYWQgPSB7c3RhdHVzOiBldmVudCwgcmVzcG9uc2U6IGRhdGF9XG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiByZWYsIHRvcGljOiB0b3BpYywgZXZlbnQ6IENIQU5ORUxfRVZFTlRTLnJlcGx5LCBwYXlsb2FkOiBwYXlsb2FkfVxuICB9LFxuXG4gIGRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMlxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIHtqb2luX3JlZjogbnVsbCwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgcGh4V2luZG93LFxuICBDSEFOTkVMX0VWRU5UUyxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX1ZTTixcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUUyxcbiAgV1NfQ0xPU0VfTk9STUFMXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb3N1cmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcbmltcG9ydCBDaGFubmVsIGZyb20gXCIuL2NoYW5uZWxcIlxuaW1wb3J0IExvbmdQb2xsIGZyb20gXCIuL2xvbmdwb2xsXCJcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gXCIuL3NlcmlhbGl6ZXJcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQgKlxuICpcbiAqIEZvciBJRTggc3VwcG9ydCB1c2UgYW4gRVM1LXNoaW0gKGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIndzczovL2V4YW1wbGUuY29tXCJgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL3NvY2tldFwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy50cmFuc3BvcnRdIC0gVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldCBvciBQaG9lbml4LkxvbmdQb2xsLlxuICpcbiAqIERlZmF1bHRzIHRvIFdlYlNvY2tldCB3aXRoIGF1dG9tYXRpYyBMb25nUG9sbCBmYWxsYmFjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmVuY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZW5jb2RlIG91dGdvaW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT04gZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5kZWNvZGVdIC0gVGhlIGZ1bmN0aW9uIHRvIGRlY29kZSBpbmNvbWluZyBtZXNzYWdlcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBKU09OOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIChwYXlsb2FkLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soSlNPTi5wYXJzZShwYXlsb2FkKSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lb3V0XSAtIFRoZSBkZWZhdWx0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgcHVzaCB0aW1lb3V0cy5cbiAqXG4gKiBEZWZhdWx0cyBgREVGQVVMVF9USU1FT1VUYFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmhlYXJ0YmVhdEludGVydmFsTXNdIC0gVGhlIG1pbGxpc2VjIGludGVydmFsIHRvIHNlbmQgYSBoZWFydGJlYXQgbWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnJlY29ubmVjdEFmdGVyTXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbHNlY1xuICogc29ja2V0IHJlY29ubmVjdCBpbnRlcnZhbC5cbiAqXG4gKiBEZWZhdWx0cyB0byBzdGVwcGVkIGJhY2tvZmYgb2Y6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24odHJpZXMpe1xuICogICByZXR1cm4gWzEwLCA1MCwgMTAwLCAxNTAsIDIwMCwgMjUwLCA1MDAsIDEwMDAsIDIwMDBdW3RyaWVzIC0gMV0gfHwgNTAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5yZWpvaW5BZnRlck1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1pbGxzZWNcbiAqIHJlam9pbiBpbnRlcnZhbCBmb3IgaW5kaXZpZHVhbCBjaGFubmVscy5cbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBmdW5jdGlvbih0cmllcyl7XG4gKiAgIHJldHVybiBbMTAwMCwgMjAwMCwgNTAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfVxuICogYGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmxvZ2dlcl0gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gZm9yIHNwZWNpYWxpemVkIGxvZ2dpbmcsIGllOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKGtpbmQsIG1zZywgZGF0YSkge1xuICogICBjb25zb2xlLmxvZyhgJHtraW5kfTogJHttc2d9YCwgZGF0YSlcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5sb25ncG9sbGVyVGltZW91dF0gLSBUaGUgbWF4aW11bSB0aW1lb3V0IG9mIGEgbG9uZyBwb2xsIEFKQVggcmVxdWVzdC5cbiAqXG4gKiBEZWZhdWx0cyB0byAyMHMgKGRvdWJsZSB0aGUgc2VydmVyIGxvbmcgcG9sbCB0aW1lcikuXG4gKlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKX0gW29wdHMucGFyYW1zXSAtIFRoZSBvcHRpb25hbCBwYXJhbXMgdG8gcGFzcyB3aGVuIGNvbm5lY3RpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5iaW5hcnlUeXBlXSAtIFRoZSBiaW5hcnkgdHlwZSB0byB1c2UgZm9yIGJpbmFyeSBXZWJTb2NrZXQgZnJhbWVzLlxuICpcbiAqIERlZmF1bHRzIHRvIFwiYXJyYXlidWZmZXJcIlxuICpcbiAqIEBwYXJhbSB7dnNufSBbb3B0cy52c25dIC0gVGhlIHNlcmlhbGl6ZXIncyBwcm90b2NvbCB2ZXJzaW9uIHRvIHNlbmQgb24gY29ubmVjdC5cbiAqXG4gKiBEZWZhdWx0cyB0byBERUZBVUxUX1ZTTi5cbiovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTb2NrZXQge1xuICBjb25zdHJ1Y3RvcihlbmRQb2ludCwgb3B0cyA9IHt9KXtcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzID0ge29wZW46IFtdLCBjbG9zZTogW10sIGVycm9yOiBbXSwgbWVzc2FnZTogW119XG4gICAgdGhpcy5jaGFubmVscyA9IFtdXG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW11cbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQgfHwgREVGQVVMVF9USU1FT1VUXG4gICAgdGhpcy50cmFuc3BvcnQgPSBvcHRzLnRyYW5zcG9ydCB8fCBnbG9iYWwuV2ViU29ja2V0IHx8IExvbmdQb2xsXG4gICAgdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zID0gMFxuICAgIHRoaXMuZGVmYXVsdEVuY29kZXIgPSBTZXJpYWxpemVyLmVuY29kZS5iaW5kKFNlcmlhbGl6ZXIpXG4gICAgdGhpcy5kZWZhdWx0RGVjb2RlciA9IFNlcmlhbGl6ZXIuZGVjb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuYmluYXJ5VHlwZSA9IG9wdHMuYmluYXJ5VHlwZSB8fCBcImFycmF5YnVmZmVyXCJcbiAgICB0aGlzLmNvbm5lY3RDbG9jayA9IDFcbiAgICBpZih0aGlzLnRyYW5zcG9ydCAhPT0gTG9uZ1BvbGwpe1xuICAgICAgdGhpcy5lbmNvZGUgPSBvcHRzLmVuY29kZSB8fCB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IG9wdHMuZGVjb2RlIHx8IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbmNvZGUgPSB0aGlzLmRlZmF1bHRFbmNvZGVyXG4gICAgICB0aGlzLmRlY29kZSA9IHRoaXMuZGVmYXVsdERlY29kZXJcbiAgICB9XG4gICAgbGV0IGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgaWYocGh4V2luZG93ICYmIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKXtcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX2UgPT4ge1xuICAgICAgICBpZih0aGlzLmNvbm4pe1xuICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IHRoaXMuY29ubmVjdENsb2NrXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBwaHhXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VzaG93XCIsIF9lID0+IHtcbiAgICAgICAgaWYoYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9PT0gdGhpcy5jb25uZWN0Q2xvY2spe1xuICAgICAgICAgIGF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3cgPSBudWxsXG4gICAgICAgICAgdGhpcy5jb25uZWN0KClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zID0gb3B0cy5oZWFydGJlYXRJbnRlcnZhbE1zIHx8IDMwMDAwXG4gICAgdGhpcy5yZWpvaW5BZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlam9pbkFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWpvaW5BZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVjb25uZWN0QWZ0ZXJNcyA9ICh0cmllcykgPT4ge1xuICAgICAgaWYob3B0cy5yZWNvbm5lY3RBZnRlck1zKXtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVjb25uZWN0QWZ0ZXJNcyh0cmllcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbMTAsIDUwLCAxMDAsIDE1MCwgMjAwLCAyNTAsIDUwMCwgMTAwMCwgMjAwMF1bdHJpZXMgLSAxXSB8fCA1MDAwXG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyID0gb3B0cy5sb2dnZXIgfHwgbnVsbFxuICAgIHRoaXMubG9uZ3BvbGxlclRpbWVvdXQgPSBvcHRzLmxvbmdwb2xsZXJUaW1lb3V0IHx8IDIwMDAwXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMuZW5kUG9pbnQgPSBgJHtlbmRQb2ludH0vJHtUUkFOU1BPUlRTLndlYnNvY2tldH1gXG4gICAgdGhpcy52c24gPSBvcHRzLnZzbiB8fCBERUZBVUxUX1ZTTlxuICAgIHRoaXMuaGVhcnRiZWF0VGltZXIgPSBudWxsXG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgdGhpcy50ZWFyZG93bigoKSA9PiB0aGlzLmNvbm5lY3QoKSlcbiAgICB9LCB0aGlzLnJlY29ubmVjdEFmdGVyTXMpXG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdHMgYW5kIHJlcGxhY2VzIHRoZSBhY3RpdmUgdHJhbnNwb3J0XG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5ld1RyYW5zcG9ydCAtIFRoZSBuZXcgdHJhbnNwb3J0IGNsYXNzIHRvIGluc3RhbnRpYXRlXG4gICAqXG4gICAqL1xuICByZXBsYWNlVHJhbnNwb3J0KG5ld1RyYW5zcG9ydCl7XG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG5ld1RyYW5zcG9ydFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNvY2tldCBwcm90b2NvbFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcHJvdG9jb2woKXsgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sLm1hdGNoKC9eaHR0cHMvKSA/IFwid3NzXCIgOiBcIndzXCIgfVxuXG4gIC8qKlxuICAgKiBUaGUgZnVsbHkgcXVhbGlmZWQgc29ja2V0IHVybFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZW5kUG9pbnRVUkwoKXtcbiAgICBsZXQgdXJpID0gQWpheC5hcHBlbmRQYXJhbXMoXG4gICAgICBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLmVuZFBvaW50LCB0aGlzLnBhcmFtcygpKSwge3ZzbjogdGhpcy52c259KVxuICAgIGlmKHVyaS5jaGFyQXQoMCkgIT09IFwiL1wiKXsgcmV0dXJuIHVyaSB9XG4gICAgaWYodXJpLmNoYXJBdCgxKSA9PT0gXCIvXCIpeyByZXR1cm4gYCR7dGhpcy5wcm90b2NvbCgpfToke3VyaX1gIH1cblxuICAgIHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9Oi8vJHtsb2NhdGlvbi5ob3N0fSR7dXJpfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0XG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2xvc2VFdmVudCNTdGF0dXNfY29kZXMgZm9yIHZhbGlkIHN0YXR1cyBjb2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgc29ja2V0IGlzIGRpc2Nvbm5lY3RlZC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBjb2RlIC0gQSBzdGF0dXMgY29kZSBmb3IgZGlzY29ubmVjdGlvbiAoT3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gQSB0ZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSByZWFzb24gdG8gZGlzY29ubmVjdC4gKE9wdGlvbmFsKVxuICAgKi9cbiAgZGlzY29ubmVjdChjYWxsYmFjaywgY29kZSwgcmVhc29uKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMudGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbilcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gVGhlIHBhcmFtcyB0byBzZW5kIHdoZW4gY29ubmVjdGluZywgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiB1c2VyVG9rZW59YFxuICAgKlxuICAgKiBQYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQ7IHBhc3MgdGhlbSBpbiB0aGUgU29ja2V0IGNvbnN0cnVjdG9yIGluc3RlYWQ6XG4gICAqIGBuZXcgU29ja2V0KFwiL3NvY2tldFwiLCB7cGFyYW1zOiB7dXNlcl9pZDogdXNlclRva2VufX0pYC5cbiAgICovXG4gIGNvbm5lY3QocGFyYW1zKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgaWYocGFyYW1zKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJwYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQgcGFzcyA6cGFyYW1zIHRvIHRoZSBTb2NrZXQgY29uc3RydWN0b3JcIilcbiAgICAgIHRoaXMucGFyYW1zID0gY2xvc3VyZShwYXJhbXMpXG4gICAgfVxuICAgIGlmKHRoaXMuY29ubil7IHJldHVybiB9XG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmNvbm4gPSBuZXcgdGhpcy50cmFuc3BvcnQodGhpcy5lbmRQb2ludFVSTCgpKVxuICAgIHRoaXMuY29ubi5iaW5hcnlUeXBlID0gdGhpcy5iaW5hcnlUeXBlXG4gICAgdGhpcy5jb25uLnRpbWVvdXQgPSB0aGlzLmxvbmdwb2xsZXJUaW1lb3V0XG4gICAgdGhpcy5jb25uLm9ub3BlbiA9ICgpID0+IHRoaXMub25Db25uT3BlbigpXG4gICAgdGhpcy5jb25uLm9uZXJyb3IgPSBlcnJvciA9PiB0aGlzLm9uQ29ubkVycm9yKGVycm9yKVxuICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubk1lc3NhZ2UoZXZlbnQpXG4gICAgdGhpcy5jb25uLm9uY2xvc2UgPSBldmVudCA9PiB0aGlzLm9uQ29ubkNsb3NlKGV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgdGhlIG1lc3NhZ2UuIE92ZXJyaWRlIGB0aGlzLmxvZ2dlcmAgZm9yIHNwZWNpYWxpemVkIGxvZ2dpbmcuIG5vb3BzIGJ5IGRlZmF1bHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtpbmRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1zZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgbG9nKGtpbmQsIG1zZywgZGF0YSl7IHRoaXMubG9nZ2VyKGtpbmQsIG1zZywgZGF0YSkgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBsb2dnZXIgaGFzIGJlZW4gc2V0IG9uIHRoaXMgc29ja2V0LlxuICAgKi9cbiAgaGFzTG9nZ2VyKCl7IHJldHVybiB0aGlzLmxvZ2dlciAhPT0gbnVsbCB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gb3BlbiBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uT3BlbihmdW5jdGlvbigpeyBjb25zb2xlLmluZm8oXCJ0aGUgc29ja2V0IHdhcyBvcGVuZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uT3BlbihjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5vcGVuLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGNsb3NlIGV2ZW50c1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5jbG9zZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBlcnJvciBldmVudHNcbiAgICpcbiAgICogQGV4YW1wbGUgc29ja2V0Lm9uRXJyb3IoZnVuY3Rpb24oZXJyb3IpeyBhbGVydChcIkFuIGVycm9yIG9jY3VycmVkXCIpIH0pXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkVycm9yKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIG1lc3NhZ2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbk1lc3NhZ2UoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MubWVzc2FnZS5wdXNoKFtyZWYsIGNhbGxiYWNrXSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ29ubk9wZW4oKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBgY29ubmVjdGVkIHRvICR7dGhpcy5lbmRQb2ludFVSTCgpfWApXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnMrK1xuICAgIHRoaXMuZmx1c2hTZW5kQnVmZmVyKClcbiAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAgICB0aGlzLnJlc2V0SGVhcnRiZWF0KClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm9wZW4uZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiBjYWxsYmFjaygpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIGhlYXJ0YmVhdFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSl7IHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIFwiaGVhcnRiZWF0IHRpbWVvdXQuIEF0dGVtcHRpbmcgdG8gcmUtZXN0YWJsaXNoIGNvbm5lY3Rpb25cIikgfVxuICAgICAgdGhpcy5hYm5vcm1hbENsb3NlKFwiaGVhcnRiZWF0IHRpbWVvdXRcIilcbiAgICB9XG4gIH1cblxuICByZXNldEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4uc2tpcEhlYXJ0YmVhdCl7IHJldHVybiB9XG4gICAgdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmID0gbnVsbFxuICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVyKVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgfVxuXG4gIHRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIGlmKCF0aGlzLmNvbm4pe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgIGlmKGNvZGUpeyB0aGlzLmNvbm4uY2xvc2UoY29kZSwgcmVhc29uIHx8IFwiXCIpIH0gZWxzZSB7IHRoaXMuY29ubi5jbG9zZSgpIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICAgICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB3YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8ICF0aGlzLmNvbm4uYnVmZmVyZWRBbW91bnQpe1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICB3YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyA9IDEpe1xuICAgIGlmKHRyaWVzID09PSA1IHx8ICF0aGlzLmNvbm4gfHwgdGhpcy5jb25uLnJlYWR5U3RhdGUgPT09IFNPQ0tFVF9TVEFURVMuY2xvc2VkKXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKGNhbGxiYWNrLCB0cmllcyArIDEpXG4gICAgfSwgMTUwICogdHJpZXMpXG4gIH1cblxuICBvbkNvbm5DbG9zZShldmVudCl7XG4gICAgbGV0IGNsb3NlQ29kZSA9IGV2ZW50ICYmIGV2ZW50LmNvZGVcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBcImNsb3NlXCIsIGV2ZW50KVxuICAgIHRoaXMudHJpZ2dlckNoYW5FcnJvcigpXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpXG4gICAgaWYoIXRoaXMuY2xvc2VXYXNDbGVhbiAmJiBjbG9zZUNvZGUgIT09IDEwMDApe1xuICAgICAgdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKVxuICAgIH1cbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4gY2FsbGJhY2soZXZlbnQpKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbkNvbm5FcnJvcihlcnJvcil7XG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgZXJyb3IpXG4gICAgbGV0IHRyYW5zcG9ydEJlZm9yZSA9IHRoaXMudHJhbnNwb3J0XG4gICAgbGV0IGVzdGFibGlzaGVkQmVmb3JlID0gdGhpcy5lc3RhYmxpc2hlZENvbm5lY3Rpb25zXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5lcnJvci5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IHtcbiAgICAgIGNhbGxiYWNrKGVycm9yLCB0cmFuc3BvcnRCZWZvcmUsIGVzdGFibGlzaGVkQmVmb3JlKVxuICAgIH0pXG4gICAgaWYodHJhbnNwb3J0QmVmb3JlID09PSB0aGlzLnRyYW5zcG9ydCB8fCBlc3RhYmxpc2hlZEJlZm9yZSA+IDApe1xuICAgICAgdGhpcy50cmlnZ2VyQ2hhbkVycm9yKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRyaWdnZXJDaGFuRXJyb3IoKXtcbiAgICB0aGlzLmNoYW5uZWxzLmZvckVhY2goY2hhbm5lbCA9PiB7XG4gICAgICBpZighKGNoYW5uZWwuaXNFcnJvcmVkKCkgfHwgY2hhbm5lbC5pc0xlYXZpbmcoKSB8fCBjaGFubmVsLmlzQ2xvc2VkKCkpKXtcbiAgICAgICAgY2hhbm5lbC50cmlnZ2VyKENIQU5ORUxfRVZFTlRTLmVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGNvbm5lY3Rpb25TdGF0ZSgpe1xuICAgIHN3aXRjaCh0aGlzLmNvbm4gJiYgdGhpcy5jb25uLnJlYWR5U3RhdGUpe1xuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLmNvbm5lY3Rpbmc6IHJldHVybiBcImNvbm5lY3RpbmdcIlxuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLm9wZW46IHJldHVybiBcIm9wZW5cIlxuICAgICAgY2FzZSBTT0NLRVRfU1RBVEVTLmNsb3Npbmc6IHJldHVybiBcImNsb3NpbmdcIlxuICAgICAgZGVmYXVsdDogcmV0dXJuIFwiY2xvc2VkXCJcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5jb25uZWN0aW9uU3RhdGUoKSA9PT0gXCJvcGVuXCIgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NoYW5uZWx9XG4gICAqL1xuICByZW1vdmUoY2hhbm5lbCl7XG4gICAgdGhpcy5vZmYoY2hhbm5lbC5zdGF0ZUNoYW5nZVJlZnMpXG4gICAgdGhpcy5jaGFubmVscyA9IHRoaXMuY2hhbm5lbHMuZmlsdGVyKGMgPT4gYy5qb2luUmVmKCkgIT09IGNoYW5uZWwuam9pblJlZigpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYG9uT3BlbmAsIGBvbkNsb3NlYCwgYG9uRXJyb3IsYCBhbmQgYG9uTWVzc2FnZWAgcmVnaXN0cmF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHtyZWZzfSAtIGxpc3Qgb2YgcmVmcyByZXR1cm5lZCBieSBjYWxscyB0b1xuICAgKiAgICAgICAgICAgICAgICAgYG9uT3BlbmAsIGBvbkNsb3NlYCwgYG9uRXJyb3IsYCBhbmQgYG9uTWVzc2FnZWBcbiAgICovXG4gIG9mZihyZWZzKXtcbiAgICBmb3IobGV0IGtleSBpbiB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzKXtcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Nba2V5XSA9IHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Nba2V5XS5maWx0ZXIoKFtyZWZdKSA9PiB7XG4gICAgICAgIHJldHVybiByZWZzLmluZGV4T2YocmVmKSA9PT0gLTFcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYXRlcyBhIG5ldyBjaGFubmVsIGZvciB0aGUgZ2l2ZW4gdG9waWNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjaGFuUGFyYW1zIC0gUGFyYW1ldGVycyBmb3IgdGhlIGNoYW5uZWxcbiAgICogQHJldHVybnMge0NoYW5uZWx9XG4gICAqL1xuICBjaGFubmVsKHRvcGljLCBjaGFuUGFyYW1zID0ge30pe1xuICAgIGxldCBjaGFuID0gbmV3IENoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMsIHRoaXMpXG4gICAgdGhpcy5jaGFubmVscy5wdXNoKGNoYW4pXG4gICAgcmV0dXJuIGNoYW5cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICAgKi9cbiAgcHVzaChkYXRhKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKXtcbiAgICAgIGxldCB7dG9waWMsIGV2ZW50LCBwYXlsb2FkLCByZWYsIGpvaW5fcmVmfSA9IGRhdGFcbiAgICAgIHRoaXMubG9nKFwicHVzaFwiLCBgJHt0b3BpY30gJHtldmVudH0gKCR7am9pbl9yZWZ9LCAke3JlZn0pYCwgcGF5bG9hZClcbiAgICB9XG5cbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKCgpID0+IHRoaXMuZW5jb2RlKGRhdGEsIHJlc3VsdCA9PiB0aGlzLmNvbm4uc2VuZChyZXN1bHQpKSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZXh0IG1lc3NhZ2UgcmVmLCBhY2NvdW50aW5nIGZvciBvdmVyZmxvd3NcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIG1ha2VSZWYoKXtcbiAgICBsZXQgbmV3UmVmID0gdGhpcy5yZWYgKyAxXG4gICAgaWYobmV3UmVmID09PSB0aGlzLnJlZil7IHRoaXMucmVmID0gMCB9IGVsc2UgeyB0aGlzLnJlZiA9IG5ld1JlZiB9XG5cbiAgICByZXR1cm4gdGhpcy5yZWYudG9TdHJpbmcoKVxuICB9XG5cbiAgc2VuZEhlYXJ0YmVhdCgpe1xuICAgIGlmKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiAmJiAhdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMucHVzaCh7dG9waWM6IFwicGhvZW5peFwiLCBldmVudDogXCJoZWFydGJlYXRcIiwgcGF5bG9hZDoge30sIHJlZjogdGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmfSlcbiAgICB0aGlzLmhlYXJ0YmVhdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgYWJub3JtYWxDbG9zZShyZWFzb24pe1xuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5jb25uLmNsb3NlKFdTX0NMT1NFX05PUk1BTCwgcmVhc29uKSB9XG4gIH1cblxuICBmbHVzaFNlbmRCdWZmZXIoKXtcbiAgICBpZih0aGlzLmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSlcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgfVxuICB9XG5cbiAgb25Db25uTWVzc2FnZShyYXdNZXNzYWdlKXtcbiAgICB0aGlzLmRlY29kZShyYXdNZXNzYWdlLmRhdGEsIG1zZyA9PiB7XG4gICAgICBsZXQge3RvcGljLCBldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luX3JlZn0gPSBtc2dcbiAgICAgIGlmKHJlZiAmJiByZWYgPT09IHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhlYXJ0YmVhdFRpbWVyKVxuICAgICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJyZWNlaXZlXCIsIGAke3BheWxvYWQuc3RhdHVzIHx8IFwiXCJ9ICR7dG9waWN9ICR7ZXZlbnR9ICR7cmVmICYmIFwiKFwiICsgcmVmICsgXCIpXCIgfHwgXCJcIn1gLCBwYXlsb2FkKVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFubmVscy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldXG4gICAgICAgIGlmKCFjaGFubmVsLmlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pbl9yZWYpKXsgY29udGludWUgfVxuICAgICAgICBjaGFubmVsLnRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWYpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgWywgY2FsbGJhY2tdID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlW2ldXG4gICAgICAgIGNhbGxiYWNrKG1zZylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGVhdmVPcGVuVG9waWModG9waWMpe1xuICAgIGxldCBkdXBDaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGMgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuaXNKb2luZWQoKSB8fCBjLmlzSm9pbmluZygpKSlcbiAgICBpZihkdXBDaGFubmVsKXtcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBsZWF2aW5nIGR1cGxpY2F0ZSB0b3BpYyBcIiR7dG9waWN9XCJgKVxuICAgICAgZHVwQ2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICB9XG59XG4iLCAiXG5leHBvcnQgY29uc3QgQ09OU0VDVVRJVkVfUkVMT0FEUyA9IFwiY29uc2VjdXRpdmUtcmVsb2Fkc1wiXG5leHBvcnQgY29uc3QgTUFYX1JFTE9BRFMgPSAxMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUlOID0gMTAwMFxuZXhwb3J0IGNvbnN0IFJFTE9BRF9KSVRURVJfTUFYID0gMzAwMFxuZXhwb3J0IGNvbnN0IEZBSUxTQUZFX0pJVFRFUiA9IDMwMDAwXG5leHBvcnQgY29uc3QgUEhYX0VWRU5UX0NMQVNTRVMgPSBbXG4gIFwicGh4LWNsaWNrLWxvYWRpbmdcIiwgXCJwaHgtY2hhbmdlLWxvYWRpbmdcIiwgXCJwaHgtc3VibWl0LWxvYWRpbmdcIixcbiAgXCJwaHgta2V5ZG93bi1sb2FkaW5nXCIsIFwicGh4LWtleXVwLWxvYWRpbmdcIiwgXCJwaHgtYmx1ci1sb2FkaW5nXCIsIFwicGh4LWZvY3VzLWxvYWRpbmdcIlxuXVxuZXhwb3J0IGNvbnN0IFBIWF9DT01QT05FTlQgPSBcImRhdGEtcGh4LWNvbXBvbmVudFwiXG5leHBvcnQgY29uc3QgUEhYX0xJVkVfTElOSyA9IFwiZGF0YS1waHgtbGlua1wiXG5leHBvcnQgY29uc3QgUEhYX1RSQUNLX1NUQVRJQyA9IFwidHJhY2stc3RhdGljXCJcbmV4cG9ydCBjb25zdCBQSFhfTElOS19TVEFURSA9IFwiZGF0YS1waHgtbGluay1zdGF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX1JFRiA9IFwiZGF0YS1waHgtcmVmXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGX1NSQyA9IFwiZGF0YS1waHgtcmVmLXNyY1wiXG5leHBvcnQgY29uc3QgUEhYX1RSQUNLX1VQTE9BRFMgPSBcInRyYWNrLXVwbG9hZHNcIlxuZXhwb3J0IGNvbnN0IFBIWF9VUExPQURfUkVGID0gXCJkYXRhLXBoeC11cGxvYWQtcmVmXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJFRkxJR0hURURfUkVGUyA9IFwiZGF0YS1waHgtcHJlZmxpZ2h0ZWQtcmVmc1wiXG5leHBvcnQgY29uc3QgUEhYX0RPTkVfUkVGUyA9IFwiZGF0YS1waHgtZG9uZS1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfRFJPUF9UQVJHRVQgPSBcImRyb3AtdGFyZ2V0XCJcbmV4cG9ydCBjb25zdCBQSFhfQUNUSVZFX0VOVFJZX1JFRlMgPSBcImRhdGEtcGh4LWFjdGl2ZS1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfTElWRV9GSUxFX1VQREFURUQgPSBcInBoeDpsaXZlLWZpbGU6dXBkYXRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1NLSVAgPSBcImRhdGEtcGh4LXNraXBcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUlVORSA9IFwiZGF0YS1waHgtcHJ1bmVcIlxuZXhwb3J0IGNvbnN0IFBIWF9QQUdFX0xPQURJTkcgPSBcInBhZ2UtbG9hZGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX0NPTk5FQ1RFRF9DTEFTUyA9IFwicGh4LWNvbm5lY3RlZFwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUyA9IFwicGh4LWxvYWRpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9OT19GRUVEQkFDS19DTEFTUyA9IFwicGh4LW5vLWZlZWRiYWNrXCJcbmV4cG9ydCBjb25zdCBQSFhfRVJST1JfQ0xBU1MgPSBcInBoeC1lcnJvclwiXG5leHBvcnQgY29uc3QgUEhYX1BBUkVOVF9JRCA9IFwiZGF0YS1waHgtcGFyZW50LWlkXCJcbmV4cG9ydCBjb25zdCBQSFhfTUFJTiA9IFwiZGF0YS1waHgtbWFpblwiXG5leHBvcnQgY29uc3QgUEhYX1JPT1RfSUQgPSBcImRhdGEtcGh4LXJvb3QtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9UUklHR0VSX0FDVElPTiA9IFwidHJpZ2dlci1hY3Rpb25cIlxuZXhwb3J0IGNvbnN0IFBIWF9GRUVEQkFDS19GT1IgPSBcImZlZWRiYWNrLWZvclwiXG5leHBvcnQgY29uc3QgUEhYX0hBU19GT0NVU0VEID0gXCJwaHgtaGFzLWZvY3VzZWRcIlxuZXhwb3J0IGNvbnN0IEZPQ1VTQUJMRV9JTlBVVFMgPSBbXCJ0ZXh0XCIsIFwidGV4dGFyZWFcIiwgXCJudW1iZXJcIiwgXCJlbWFpbFwiLCBcInBhc3N3b3JkXCIsIFwic2VhcmNoXCIsIFwidGVsXCIsIFwidXJsXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJkYXRldGltZS1sb2NhbFwiLCBcImNvbG9yXCIsIFwicmFuZ2VcIl1cbmV4cG9ydCBjb25zdCBDSEVDS0FCTEVfSU5QVVRTID0gW1wiY2hlY2tib3hcIiwgXCJyYWRpb1wiXVxuZXhwb3J0IGNvbnN0IFBIWF9IQVNfU1VCTUlUVEVEID0gXCJwaHgtaGFzLXN1Ym1pdHRlZFwiXG5leHBvcnQgY29uc3QgUEhYX1NFU1NJT04gPSBcImRhdGEtcGh4LXNlc3Npb25cIlxuZXhwb3J0IGNvbnN0IFBIWF9WSUVXX1NFTEVDVE9SID0gYFske1BIWF9TRVNTSU9OfV1gXG5leHBvcnQgY29uc3QgUEhYX1NUSUNLWSA9IFwiZGF0YS1waHgtc3RpY2t5XCJcbmV4cG9ydCBjb25zdCBQSFhfU1RBVElDID0gXCJkYXRhLXBoeC1zdGF0aWNcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUFET05MWSA9IFwiZGF0YS1waHgtcmVhZG9ubHlcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFRCA9IFwiZGF0YS1waHgtZGlzYWJsZWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9ESVNBQkxFX1dJVEggPSBcImRpc2FibGUtd2l0aFwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFID0gXCJkYXRhLXBoeC1kaXNhYmxlLXdpdGgtcmVzdG9yZVwiXG5leHBvcnQgY29uc3QgUEhYX0hPT0sgPSBcImhvb2tcIlxuZXhwb3J0IGNvbnN0IFBIWF9ERUJPVU5DRSA9IFwiZGVib3VuY2VcIlxuZXhwb3J0IGNvbnN0IFBIWF9USFJPVFRMRSA9IFwidGhyb3R0bGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9VUERBVEUgPSBcInVwZGF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0tFWSA9IFwia2V5XCJcbmV4cG9ydCBjb25zdCBQSFhfUFJJVkFURSA9IFwicGh4UHJpdmF0ZVwiXG5leHBvcnQgY29uc3QgUEhYX0FVVE9fUkVDT1ZFUiA9IFwiYXV0by1yZWNvdmVyXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfREVCVUcgPSBcInBoeDpsaXZlLXNvY2tldDpkZWJ1Z1wiXG5leHBvcnQgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBcInBoeDpsaXZlLXNvY2tldDpwcm9maWxpbmdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IFwicGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltXCJcbmV4cG9ydCBjb25zdCBQSFhfUFJPR1JFU1MgPSBcInByb2dyZXNzXCJcbmV4cG9ydCBjb25zdCBMT0FERVJfVElNRU9VVCA9IDFcbmV4cG9ydCBjb25zdCBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VUID0gMjAwXG5leHBvcnQgY29uc3QgQklORElOR19QUkVGSVggPSBcInBoeC1cIlxuZXhwb3J0IGNvbnN0IFBVU0hfVElNRU9VVCA9IDMwMDAwXG5leHBvcnQgY29uc3QgTElOS19IRUFERVIgPSBcIngtcmVxdWVzdGVkLXdpdGhcIlxuZXhwb3J0IGNvbnN0IFJFU1BPTlNFX1VSTF9IRUFERVIgPSBcIngtcmVzcG9uc2UtdXJsXCJcbmV4cG9ydCBjb25zdCBERUJPVU5DRV9UUklHR0VSID0gXCJkZWJvdW5jZS10cmlnZ2VyXCJcbmV4cG9ydCBjb25zdCBUSFJPVFRMRUQgPSBcInRocm90dGxlZFwiXG5leHBvcnQgY29uc3QgREVCT1VOQ0VfUFJFVl9LRVkgPSBcImRlYm91bmNlLXByZXYta2V5XCJcbmV4cG9ydCBjb25zdCBERUZBVUxUUyA9IHtcbiAgZGVib3VuY2U6IDMwMCxcbiAgdGhyb3R0bGU6IDMwMFxufVxuXG4vLyBSZW5kZXJlZFxuZXhwb3J0IGNvbnN0IERZTkFNSUNTID0gXCJkXCJcbmV4cG9ydCBjb25zdCBTVEFUSUMgPSBcInNcIlxuZXhwb3J0IGNvbnN0IENPTVBPTkVOVFMgPSBcImNcIlxuZXhwb3J0IGNvbnN0IEVWRU5UUyA9IFwiZVwiXG5leHBvcnQgY29uc3QgUkVQTFkgPSBcInJcIlxuZXhwb3J0IGNvbnN0IFRJVExFID0gXCJ0XCJcbmV4cG9ydCBjb25zdCBURU1QTEFURVMgPSBcInBcIlxuIiwgImltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlVcGxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKGVudHJ5LCBjaHVua1NpemUsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmVudHJ5ID0gZW50cnlcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZVxuICAgIHRoaXMuY2h1bmtUaW1lciA9IG51bGxcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwgPSBsaXZlU29ja2V0LmNoYW5uZWwoYGx2dToke2VudHJ5LnJlZn1gLCB7dG9rZW46IGVudHJ5Lm1ldGFkYXRhKCl9KVxuICB9XG5cbiAgZXJyb3IocmVhc29uKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jaHVua1RpbWVyKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5sZWF2ZSgpXG4gICAgdGhpcy5lbnRyeS5lcnJvcihyZWFzb24pXG4gIH1cblxuICB1cGxvYWQoKXtcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwub25FcnJvcihyZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5qb2luKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgX2RhdGEgPT4gdGhpcy5yZWFkTmV4dENodW5rKCkpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMub2Zmc2V0ID49IHRoaXMuZW50cnkuZmlsZS5zaXplIH1cblxuICByZWFkTmV4dENodW5rKCl7XG4gICAgbGV0IHJlYWRlciA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcigpXG4gICAgbGV0IGJsb2IgPSB0aGlzLmVudHJ5LmZpbGUuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMuY2h1bmtTaXplICsgdGhpcy5vZmZzZXQpXG4gICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICBpZihlLnRhcmdldC5lcnJvciA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGUudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoXG4gICAgICAgIHRoaXMucHVzaENodW5rKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2dFcnJvcihcIlJlYWQgZXJyb3I6IFwiICsgZS50YXJnZXQuZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICB9XG5cbiAgcHVzaENodW5rKGNodW5rKXtcbiAgICBpZighdGhpcy51cGxvYWRDaGFubmVsLmlzSm9pbmVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5wdXNoKFwiY2h1bmtcIiwgY2h1bmspXG4gICAgICAucmVjZWl2ZShcIm9rXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRyeS5wcm9ncmVzcygodGhpcy5vZmZzZXQgLyB0aGlzLmVudHJ5LmZpbGUuc2l6ZSkgKiAxMDApXG4gICAgICAgIGlmKCF0aGlzLmlzRG9uZSgpKXtcbiAgICAgICAgICB0aGlzLmNodW5rVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVhZE5leHRDaHVuaygpLCB0aGlzLmxpdmVTb2NrZXQuZ2V0TGF0ZW5jeVNpbSgpIHx8IDApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfVklFV19TRUxFQ1RPUlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRW50cnlVcGxvYWRlciBmcm9tIFwiLi9lbnRyeV91cGxvYWRlclwiXG5cbmV4cG9ydCBsZXQgbG9nRXJyb3IgPSAobXNnLCBvYmopID0+IGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvcihtc2csIG9iailcblxuZXhwb3J0IGxldCBpc0NpZCA9IChjaWQpID0+IHtcbiAgbGV0IHR5cGUgPSB0eXBlb2YoY2lkKVxuICByZXR1cm4gdHlwZSA9PT0gXCJudW1iZXJcIiB8fCAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAvXigwfFsxLTldXFxkKikkLy50ZXN0KGNpZCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3REdXBsaWNhdGVJZHMoKXtcbiAgbGV0IGlkcyA9IG5ldyBTZXQoKVxuICBsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKltpZF1cIilcbiAgZm9yKGxldCBpID0gMCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgIGlmKGlkcy5oYXMoZWxlbXNbaV0uaWQpKXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpcGxlIElEcyBkZXRlY3RlZDogJHtlbGVtc1tpXS5pZH0uIEVuc3VyZSB1bmlxdWUgZWxlbWVudCBpZHMuYClcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzLmFkZChlbGVtc1tpXS5pZClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGxldCBkZWJ1ZyA9ICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4ge1xuICBpZih2aWV3LmxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICB9XG59XG5cbi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwgOiBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbCB9XG5cbmV4cG9ydCBsZXQgY2xvbmUgPSAob2JqKSA9PiB7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cblxuZXhwb3J0IGxldCBjbG9zZXN0UGh4QmluZGluZyA9IChlbCwgYmluZGluZywgYm9yZGVyRWwpID0+IHtcbiAgZG8ge1xuICAgIGlmKGVsLm1hdGNoZXMoYFske2JpbmRpbmd9XWApKXsgcmV0dXJuIGVsIH1cbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQgfHwgZWwucGFyZW50Tm9kZVxuICB9IHdoaWxlKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxICYmICEoKGJvcmRlckVsICYmIGJvcmRlckVsLmlzU2FtZU5vZGUoZWwpKSB8fCBlbC5tYXRjaGVzKFBIWF9WSUVXX1NFTEVDVE9SKSkpXG4gIHJldHVybiBudWxsXG59XG5cbmV4cG9ydCBsZXQgaXNPYmplY3QgPSAob2JqKSA9PiB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiAmJiAhKG9iaiBpbnN0YW5jZW9mIEFycmF5KVxufVxuXG5leHBvcnQgbGV0IGlzRXF1YWxPYmogPSAob2JqMSwgb2JqMikgPT4gSlNPTi5zdHJpbmdpZnkob2JqMSkgPT09IEpTT04uc3RyaW5naWZ5KG9iajIpXG5cbmV4cG9ydCBsZXQgaXNFbXB0eSA9IChvYmopID0+IHtcbiAgZm9yKGxldCB4IGluIG9iail7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiB0cnVlXG59XG5cbmV4cG9ydCBsZXQgbWF5YmUgPSAoZWwsIGNhbGxiYWNrKSA9PiBlbCAmJiBjYWxsYmFjayhlbClcblxuZXhwb3J0IGxldCBjaGFubmVsVXBsb2FkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldCl7XG4gIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XG4gICAgbGV0IGVudHJ5VXBsb2FkZXIgPSBuZXcgRW50cnlVcGxvYWRlcihlbnRyeSwgcmVzcC5jb25maWcuY2h1bmtfc2l6ZSwgbGl2ZVNvY2tldClcbiAgICBlbnRyeVVwbG9hZGVyLnVwbG9hZCgpXG4gIH0pXG59XG4iLCAibGV0IEJyb3dzZXIgPSB7XG4gIGNhblB1c2hTdGF0ZSgpeyByZXR1cm4gKHR5cGVvZiAoaGlzdG9yeS5wdXNoU3RhdGUpICE9PSBcInVuZGVmaW5lZFwiKSB9LFxuXG4gIGRyb3BMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KXtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpXG4gIH0sXG5cbiAgdXBkYXRlTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSwgaW5pdGlhbCwgZnVuYyl7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IGtleSA9IHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpXG4gICAgbGV0IG5ld1ZhbCA9IGN1cnJlbnQgPT09IG51bGwgPyBpbml0aWFsIDogZnVuYyhjdXJyZW50KVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkobmV3VmFsKSlcbiAgICByZXR1cm4gbmV3VmFsXG4gIH0sXG5cbiAgZ2V0TG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5sb2NhbEtleShuYW1lc3BhY2UsIHN1YmtleSkpKVxuICB9LFxuXG4gIHVwZGF0ZUN1cnJlbnRTdGF0ZShjYWxsYmFjayl7XG4gICAgaWYoIXRoaXMuY2FuUHVzaFN0YXRlKCkpeyByZXR1cm4gfVxuICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGNhbGxiYWNrKGhpc3Rvcnkuc3RhdGUgfHwge30pLCBcIlwiLCB3aW5kb3cubG9jYXRpb24uaHJlZilcbiAgfSxcblxuICBwdXNoU3RhdGUoa2luZCwgbWV0YSwgdG8pe1xuICAgIGlmKHRoaXMuY2FuUHVzaFN0YXRlKCkpe1xuICAgICAgaWYodG8gIT09IHdpbmRvdy5sb2NhdGlvbi5ocmVmKXtcbiAgICAgICAgaWYobWV0YS50eXBlID09IFwicmVkaXJlY3RcIiAmJiBtZXRhLnNjcm9sbCl7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVkaXJlY3Rpbmcgc3RvcmUgdGhlIGN1cnJlbnQgc2Nyb2xsWSBmb3IgdGhlIGN1cnJlbnQgaGlzdG9yeSBzdGF0ZS5cbiAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gaGlzdG9yeS5zdGF0ZSB8fCB7fVxuICAgICAgICAgIGN1cnJlbnRTdGF0ZS5zY3JvbGwgPSBtZXRhLnNjcm9sbFxuICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKGN1cnJlbnRTdGF0ZSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgbWV0YS5zY3JvbGwgLy8gT25seSBzdG9yZSB0aGUgc2Nyb2xsIGluIHRoZSByZWRpcmVjdCBjYXNlLlxuICAgICAgICBoaXN0b3J5W2tpbmQgKyBcIlN0YXRlXCJdKG1ldGEsIFwiXCIsIHRvIHx8IG51bGwpIC8vIElFIHdpbGwgY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcbiAgICAgICAgbGV0IGhhc2hFbCA9IHRoaXMuZ2V0SGFzaFRhcmdldEVsKHdpbmRvdy5sb2NhdGlvbi5oYXNoKVxuXG4gICAgICAgIGlmKGhhc2hFbCl7XG4gICAgICAgICAgaGFzaEVsLnNjcm9sbEludG9WaWV3KClcbiAgICAgICAgfSBlbHNlIGlmKG1ldGEudHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsKDAsIDApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWRpcmVjdCh0bylcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q29va2llKG5hbWUsIHZhbHVlKXtcbiAgICBkb2N1bWVudC5jb29raWUgPSBgJHtuYW1lfT0ke3ZhbHVlfWBcbiAgfSxcblxuICBnZXRDb29raWUobmFtZSl7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZS5yZXBsYWNlKG5ldyBSZWdFeHAoYCg/Oig/Ol58Lio7XFxzKikke25hbWV9XFxzKlxcPVxccyooW147XSopLiokKXxeLiokYCksIFwiJDFcIilcbiAgfSxcblxuICByZWRpcmVjdCh0b1VSTCwgZmxhc2gpe1xuICAgIGlmKGZsYXNoKXsgQnJvd3Nlci5zZXRDb29raWUoXCJfX3Bob2VuaXhfZmxhc2hfX1wiLCBmbGFzaCArIFwiOyBtYXgtYWdlPTYwMDAwOyBwYXRoPS9cIikgfVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRvVVJMXG4gIH0sXG5cbiAgbG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpeyByZXR1cm4gYCR7bmFtZXNwYWNlfS0ke3N1YmtleX1gIH0sXG5cbiAgZ2V0SGFzaFRhcmdldEVsKG1heWJlSGFzaCl7XG4gICAgbGV0IGhhc2ggPSBtYXliZUhhc2gudG9TdHJpbmcoKS5zdWJzdHJpbmcoMSlcbiAgICBpZihoYXNoID09PSBcIlwiKXsgcmV0dXJuIH1cbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgYVtuYW1lPVwiJHtoYXNofVwiXWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclxuIiwgImltcG9ydCB7XG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIERFQk9VTkNFX1BSRVZfS0VZLFxuICBERUJPVU5DRV9UUklHR0VSLFxuICBGT0NVU0FCTEVfSU5QVVRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX01BSU4sXG4gIFBIWF9OT19GRUVEQkFDS19DTEFTUyxcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1BSSVZBVEUsXG4gIFBIWF9SRUYsXG4gIFBIWF9SRUZfU1JDLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TVEFUSUMsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX1NUSUNLWSxcbiAgVEhST1RUTEVEXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxubGV0IERPTSA9IHtcbiAgYnlJZChpZCl7IHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkgfHwgbG9nRXJyb3IoYG5vIGlkIGZvdW5kIGZvciAke2lkfWApIH0sXG5cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSl7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXG4gICAgaWYoZWwuY2xhc3NMaXN0Lmxlbmd0aCA9PT0gMCl7IGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpIH1cbiAgfSxcblxuICBhbGwobm9kZSwgcXVlcnksIGNhbGxiYWNrKXtcbiAgICBpZighbm9kZSl7IHJldHVybiBbXSB9XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuZnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnkpKVxuICAgIHJldHVybiBjYWxsYmFjayA/IGFycmF5LmZvckVhY2goY2FsbGJhY2spIDogYXJyYXlcbiAgfSxcblxuICBjaGlsZE5vZGVMZW5ndGgoaHRtbCl7XG4gICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gaHRtbFxuICAgIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmNoaWxkRWxlbWVudENvdW50XG4gIH0sXG5cbiAgaXNVcGxvYWRJbnB1dChlbCl7IHJldHVybiBlbC50eXBlID09PSBcImZpbGVcIiAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpICE9PSBudWxsIH0sXG5cbiAgZmluZFVwbG9hZElucHV0cyhub2RlKXsgcmV0dXJuIHRoaXMuYWxsKG5vZGUsIGBpbnB1dFt0eXBlPVwiZmlsZVwiXVske1BIWF9VUExPQURfUkVGfV1gKSB9LFxuXG4gIGZpbmRDb21wb25lbnROb2RlTGlzdChub2RlLCBjaWQpe1xuICAgIHJldHVybiB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl1gKSwgbm9kZSlcbiAgfSxcblxuICBpc1BoeERlc3Ryb3llZChub2RlKXtcbiAgICByZXR1cm4gbm9kZS5pZCAmJiBET00ucHJpdmF0ZShub2RlLCBcImRlc3Ryb3llZFwiKSA/IHRydWUgOiBmYWxzZVxuICB9LFxuXG4gIG1hcmtQaHhDaGlsZERlc3Ryb3llZChlbCl7XG4gICAgaWYodGhpcy5pc1BoeENoaWxkKGVsKSl7IGVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgXCJcIikgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJkZXN0cm95ZWRcIiwgdHJ1ZSlcbiAgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHBhcmVudElkKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRoaXMuZmluZFBoeENoaWxkcmVuKHRlbXBsYXRlLmNvbnRlbnQsIHBhcmVudElkKVxuICB9LFxuXG4gIGlzSWdub3JlZChlbCwgcGh4VXBkYXRlKXtcbiAgICByZXR1cm4gKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpIHx8IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwZGF0ZVwiKSkgPT09IFwiaWdub3JlXCJcbiAgfSxcblxuICBpc1BoeFVwZGF0ZShlbCwgcGh4VXBkYXRlLCB1cGRhdGVUeXBlcyl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiB1cGRhdGVUeXBlcy5pbmRleE9mKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSA+PSAwXG4gIH0sXG5cbiAgZmluZFBoeFN0aWNreShlbCl7IHJldHVybiB0aGlzLmFsbChlbCwgYFske1BIWF9TVElDS1l9XWApIH0sXG5cbiAgZmluZFBoeENoaWxkcmVuKGVsLCBwYXJlbnRJZCl7XG4gICAgcmV0dXJuIHRoaXMuYWxsKGVsLCBgJHtQSFhfVklFV19TRUxFQ1RPUn1bJHtQSFhfUEFSRU5UX0lEfT1cIiR7cGFyZW50SWR9XCJdYClcbiAgfSxcblxuICBmaW5kUGFyZW50Q0lEcyhub2RlLCBjaWRzKXtcbiAgICBsZXQgaW5pdGlhbCA9IG5ldyBTZXQoY2lkcylcbiAgICByZXR1cm4gY2lkcy5yZWR1Y2UoKGFjYywgY2lkKSA9PiB7XG4gICAgICBsZXQgc2VsZWN0b3IgPSBgWyR7UEhYX0NPTVBPTkVOVH09XCIke2NpZH1cIl0gWyR7UEhYX0NPTVBPTkVOVH1dYFxuXG4gICAgICB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBzZWxlY3RvciksIG5vZGUpXG4gICAgICAgIC5tYXAoZWwgPT4gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpKSlcbiAgICAgICAgLmZvckVhY2goY2hpbGRDSUQgPT4gYWNjLmRlbGV0ZShjaGlsZENJRCkpXG5cbiAgICAgIHJldHVybiBhY2NcbiAgICB9LCBpbml0aWFsKVxuICB9LFxuXG4gIGZpbHRlcldpdGhpblNhbWVMaXZlVmlldyhub2RlcywgcGFyZW50KXtcbiAgICBpZihwYXJlbnQucXVlcnlTZWxlY3RvcihQSFhfVklFV19TRUxFQ1RPUikpe1xuICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihlbCA9PiB0aGlzLndpdGhpblNhbWVMaXZlVmlldyhlbCwgcGFyZW50KSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGVzXG4gICAgfVxuICB9LFxuXG4gIHdpdGhpblNhbWVMaXZlVmlldyhub2RlLCBwYXJlbnQpe1xuICAgIHdoaWxlKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpe1xuICAgICAgaWYobm9kZS5pc1NhbWVOb2RlKHBhcmVudCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgICBpZihub2RlLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwpeyByZXR1cm4gZmFsc2UgfVxuICAgIH1cbiAgfSxcblxuICBwcml2YXRlKGVsLCBrZXkpeyByZXR1cm4gZWxbUEhYX1BSSVZBVEVdICYmIGVsW1BIWF9QUklWQVRFXVtrZXldIH0sXG5cbiAgZGVsZXRlUHJpdmF0ZShlbCwga2V5KXsgZWxbUEhYX1BSSVZBVEVdICYmIGRlbGV0ZSAoZWxbUEhYX1BSSVZBVEVdW2tleV0pIH0sXG5cbiAgcHV0UHJpdmF0ZShlbCwga2V5LCB2YWx1ZSl7XG4gICAgaWYoIWVsW1BIWF9QUklWQVRFXSl7IGVsW1BIWF9QUklWQVRFXSA9IHt9IH1cbiAgICBlbFtQSFhfUFJJVkFURV1ba2V5XSA9IHZhbHVlXG4gIH0sXG5cbiAgdXBkYXRlUHJpdmF0ZShlbCwga2V5LCBkZWZhdWx0VmFsLCB1cGRhdGVGdW5jKXtcbiAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZihleGlzdGluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCB1cGRhdGVGdW5jKGRlZmF1bHRWYWwpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhleGlzdGluZykpXG4gICAgfVxuICB9LFxuXG4gIGNvcHlQcml2YXRlcyh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1BIWF9QUklWQVRFXSl7XG4gICAgICB0YXJnZXRbUEhYX1BSSVZBVEVdID0gc291cmNlW1BIWF9QUklWQVRFXVxuICAgIH1cbiAgfSxcblxuICBwdXRUaXRsZShzdHIpe1xuICAgIGxldCB0aXRsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpXG4gICAgbGV0IHtwcmVmaXgsIHN1ZmZpeH0gPSB0aXRsZUVsLmRhdGFzZXRcbiAgICBkb2N1bWVudC50aXRsZSA9IGAke3ByZWZpeCB8fCBcIlwifSR7c3RyfSR7c3VmZml4IHx8IFwiXCJ9YFxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgY2FsbGJhY2spe1xuICAgIGxldCBkZWJvdW5jZSA9IGVsLmdldEF0dHJpYnV0ZShwaHhEZWJvdW5jZSlcbiAgICBsZXQgdGhyb3R0bGUgPSBlbC5nZXRBdHRyaWJ1dGUocGh4VGhyb3R0bGUpXG4gICAgaWYoZGVib3VuY2UgPT09IFwiXCIpeyBkZWJvdW5jZSA9IGRlZmF1bHREZWJvdW5jZSB9XG4gICAgaWYodGhyb3R0bGUgPT09IFwiXCIpeyB0aHJvdHRsZSA9IGRlZmF1bHRUaHJvdHRsZSB9XG4gICAgbGV0IHZhbHVlID0gZGVib3VuY2UgfHwgdGhyb3R0bGVcbiAgICBzd2l0Y2godmFsdWUpe1xuICAgICAgY2FzZSBudWxsOiByZXR1cm4gY2FsbGJhY2soKVxuXG4gICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiZGVib3VuY2UtYmx1clwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gY2FsbGJhY2soKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgbGV0IHRyaWdnZXIgPSAoKSA9PiB0aHJvdHRsZSA/IHRoaXMuZGVsZXRlUHJpdmF0ZShlbCwgVEhST1RUTEVEKSA6IGNhbGxiYWNrKClcbiAgICAgICAgbGV0IGN1cnJlbnRDeWNsZSA9IHRoaXMuaW5jQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIsIHRyaWdnZXIpXG4gICAgICAgIGlmKGlzTmFOKHRpbWVvdXQpKXsgcmV0dXJuIGxvZ0Vycm9yKGBpbnZhbGlkIHRocm90dGxlL2RlYm91bmNlIHZhbHVlOiAke3ZhbHVlfWApIH1cbiAgICAgICAgaWYodGhyb3R0bGUpe1xuICAgICAgICAgIGxldCBuZXdLZXlEb3duID0gZmFsc2VcbiAgICAgICAgICBpZihldmVudC50eXBlID09PSBcImtleWRvd25cIil7XG4gICAgICAgICAgICBsZXQgcHJldktleSA9IHRoaXMucHJpdmF0ZShlbCwgREVCT1VOQ0VfUFJFVl9LRVkpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZLCBldmVudC5rZXkpXG4gICAgICAgICAgICBuZXdLZXlEb3duID0gcHJldktleSAhPT0gZXZlbnQua2V5XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIW5ld0tleURvd24gJiYgdGhpcy5wcml2YXRlKGVsLCBUSFJPVFRMRUQpKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIFRIUk9UVExFRCwgdHJ1ZSlcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpLCB0aW1lb3V0KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCBjdXJyZW50Q3ljbGUpLCB0aW1lb3V0KVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgZm9ybSA9IGVsLmZvcm1cbiAgICAgICAgaWYoZm9ybSAmJiB0aGlzLm9uY2UoZm9ybSwgXCJiaW5kLWRlYm91bmNlXCIpKXtcbiAgICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgQXJyYXkuZnJvbSgobmV3IEZvcm1EYXRhKGZvcm0pKS5lbnRyaWVzKCksIChbbmFtZV0pID0+IHtcbiAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7bmFtZX1cIl1gKVxuICAgICAgICAgICAgICB0aGlzLmluY0N5Y2xlKGlucHV0LCBERUJPVU5DRV9UUklHR0VSKVxuICAgICAgICAgICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFRIUk9UVExFRClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLm9uY2UoZWwsIFwiYmluZC1kZWJvdW5jZVwiKSl7XG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgKCkgPT4gdGhpcy50cmlnZ2VyQ3ljbGUoZWwsIERFQk9VTkNFX1RSSUdHRVIpKVxuICAgICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHRyaWdnZXJDeWNsZShlbCwga2V5LCBjdXJyZW50Q3ljbGUpe1xuICAgIGxldCBbY3ljbGUsIHRyaWdnZXJdID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoIWN1cnJlbnRDeWNsZSl7IGN1cnJlbnRDeWNsZSA9IGN5Y2xlIH1cbiAgICBpZihjdXJyZW50Q3ljbGUgPT09IGN5Y2xlKXtcbiAgICAgIHRoaXMuaW5jQ3ljbGUoZWwsIGtleSlcbiAgICAgIHRyaWdnZXIoKVxuICAgIH1cbiAgfSxcblxuICBvbmNlKGVsLCBrZXkpe1xuICAgIGlmKHRoaXMucHJpdmF0ZShlbCwga2V5KSA9PT0gdHJ1ZSl7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHRydWUpXG4gICAgcmV0dXJuIHRydWVcbiAgfSxcblxuICBpbmNDeWNsZShlbCwga2V5LCB0cmlnZ2VyID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGxldCBbY3VycmVudEN5Y2xlXSA9IHRoaXMucHJpdmF0ZShlbCwga2V5KSB8fCBbMCwgdHJpZ2dlcl1cbiAgICBjdXJyZW50Q3ljbGUrK1xuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwga2V5LCBbY3VycmVudEN5Y2xlLCB0cmlnZ2VyXSlcbiAgICByZXR1cm4gY3VycmVudEN5Y2xlXG4gIH0sXG5cbiAgZGlzY2FyZEVycm9yKGNvbnRhaW5lciwgZWwsIHBoeEZlZWRiYWNrRm9yKXtcbiAgICBsZXQgZmllbGQgPSBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKHBoeEZlZWRiYWNrRm9yKVxuICAgIC8vIFRPRE86IFJlbW92ZSBpZCBsb29rdXAgYWZ0ZXIgd2UgdXBkYXRlIFBob2VuaXggdG8gdXNlIGlucHV0X25hbWUgaW5zdGVhZCBvZiBpbnB1dF9pZFxuICAgIGxldCBpbnB1dCA9IGZpZWxkICYmIGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke2ZpZWxkfVwiXSwgW25hbWU9XCIke2ZpZWxkfVwiXWApXG4gICAgaWYoIWlucHV0KXsgcmV0dXJuIH1cblxuICAgIGlmKCEodGhpcy5wcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQpIHx8IHRoaXMucHJpdmF0ZShpbnB1dC5mb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCkpKXtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoUEhYX05PX0ZFRURCQUNLX0NMQVNTKVxuICAgIH1cbiAgfSxcblxuICBzaG93RXJyb3IoaW5wdXRFbCwgcGh4RmVlZGJhY2tGb3Ipe1xuICAgIGlmKGlucHV0RWwuaWQgfHwgaW5wdXRFbC5uYW1lKXtcbiAgICAgIHRoaXMuYWxsKGlucHV0RWwuZm9ybSwgYFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXRFbC5pZH1cIl0sIFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXRFbC5uYW1lfVwiXWAsIChlbCkgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZUNsYXNzKGVsLCBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpXG4gICAgICB9KVxuICAgIH1cbiAgfSxcblxuICBpc1BoeENoaWxkKG5vZGUpe1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKVxuICB9LFxuXG4gIGlzUGh4U3RpY2t5KG5vZGUpe1xuICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShQSFhfU1RJQ0tZKSAhPT0gbnVsbFxuICB9LFxuXG4gIGZpcnN0UGh4Q2hpbGQoZWwpe1xuICAgIHJldHVybiB0aGlzLmlzUGh4Q2hpbGQoZWwpID8gZWwgOiB0aGlzLmFsbChlbCwgYFske1BIWF9QQVJFTlRfSUR9XWApWzBdXG4gIH0sXG5cbiAgZGlzcGF0Y2hFdmVudCh0YXJnZXQsIGV2ZW50U3RyaW5nLCBkZXRhaWwgPSB7fSl7XG4gICAgbGV0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KGV2ZW50U3RyaW5nLCB7YnViYmxlczogdHJ1ZSwgY2FuY2VsYWJsZTogdHJ1ZSwgZGV0YWlsOiBkZXRhaWx9KVxuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICB9LFxuXG4gIGNsb25lTm9kZShub2RlLCBodG1sKXtcbiAgICBpZih0eXBlb2YgKGh0bWwpID09PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgIHJldHVybiBub2RlLmNsb25lTm9kZSh0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY2xvbmVkID0gbm9kZS5jbG9uZU5vZGUoZmFsc2UpXG4gICAgICBjbG9uZWQuaW5uZXJIVE1MID0gaHRtbFxuICAgICAgcmV0dXJuIGNsb25lZFxuICAgIH1cbiAgfSxcblxuICBtZXJnZUF0dHJzKHRhcmdldCwgc291cmNlLCBvcHRzID0ge30pe1xuICAgIGxldCBleGNsdWRlID0gb3B0cy5leGNsdWRlIHx8IFtdXG4gICAgbGV0IGlzSWdub3JlZCA9IG9wdHMuaXNJZ25vcmVkXG4gICAgbGV0IHNvdXJjZUF0dHJzID0gc291cmNlLmF0dHJpYnV0ZXNcbiAgICBmb3IobGV0IGkgPSBzb3VyY2VBdHRycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSl7XG4gICAgICBsZXQgbmFtZSA9IHNvdXJjZUF0dHJzW2ldLm5hbWVcbiAgICAgIGlmKGV4Y2x1ZGUuaW5kZXhPZihuYW1lKSA8IDApeyB0YXJnZXQuc2V0QXR0cmlidXRlKG5hbWUsIHNvdXJjZS5nZXRBdHRyaWJ1dGUobmFtZSkpIH1cbiAgICB9XG5cbiAgICBsZXQgdGFyZ2V0QXR0cnMgPSB0YXJnZXQuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHRhcmdldEF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gdGFyZ2V0QXR0cnNbaV0ubmFtZVxuICAgICAgaWYoaXNJZ25vcmVkKXtcbiAgICAgICAgaWYobmFtZS5zdGFydHNXaXRoKFwiZGF0YS1cIikgJiYgIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkpeyB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKG5hbWUpIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmKCFzb3VyY2UuaGFzQXR0cmlidXRlKG5hbWUpKXsgdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShuYW1lKSB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIG1lcmdlRm9jdXNlZElucHV0KHRhcmdldCwgc291cmNlKXtcbiAgICAvLyBza2lwIHNlbGVjdHMgYmVjYXVzZSBGRiB3aWxsIHJlc2V0IGhpZ2hsaWdodGVkIGluZGV4IGZvciBhbnkgc2V0QXR0cmlidXRlXG4gICAgaWYoISh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpeyBET00ubWVyZ2VBdHRycyh0YXJnZXQsIHNvdXJjZSwge2V4Y2VwdDogW1widmFsdWVcIl19KSB9XG4gICAgaWYoc291cmNlLnJlYWRPbmx5KXtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwicmVhZG9ubHlcIilcbiAgICB9XG4gIH0sXG5cbiAgaGFzU2VsZWN0aW9uUmFuZ2UoZWwpe1xuICAgIHJldHVybiBlbC5zZXRTZWxlY3Rpb25SYW5nZSAmJiAoZWwudHlwZSA9PT0gXCJ0ZXh0XCIgfHwgZWwudHlwZSA9PT0gXCJ0ZXh0YXJlYVwiKVxuICB9LFxuXG4gIHJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKXtcbiAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGZvY3VzZWQpKXsgcmV0dXJuIH1cbiAgICBsZXQgd2FzRm9jdXNlZCA9IGZvY3VzZWQubWF0Y2hlcyhcIjpmb2N1c1wiKVxuICAgIGlmKGZvY3VzZWQucmVhZE9ubHkpeyBmb2N1c2VkLmJsdXIoKSB9XG4gICAgaWYoIXdhc0ZvY3VzZWQpeyBmb2N1c2VkLmZvY3VzKCkgfVxuICAgIGlmKHRoaXMuaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkpe1xuICAgICAgZm9jdXNlZC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgIH1cbiAgfSxcblxuICBpc0Zvcm1JbnB1dChlbCl7IHJldHVybiAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdChlbC50YWdOYW1lKSAmJiBlbC50eXBlICE9PSBcImJ1dHRvblwiIH0sXG5cbiAgc3luY0F0dHJzVG9Qcm9wcyhlbCl7XG4gICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApe1xuICAgICAgZWwuY2hlY2tlZCA9IGVsLmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikgIT09IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgaXNUZXh0dWFsSW5wdXQoZWwpeyByZXR1cm4gRk9DVVNBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgfSxcblxuICBpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4VHJpZ2dlckV4dGVybmFsKSAhPT0gbnVsbFxuICB9LFxuXG4gIHN5bmNQZW5kaW5nUmVmKGZyb21FbCwgdG9FbCwgZGlzYWJsZVdpdGgpe1xuICAgIGxldCByZWYgPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9SRUYpXG4gICAgaWYocmVmID09PSBudWxsKXsgcmV0dXJuIHRydWUgfVxuICAgIGxldCByZWZTcmMgPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuXG4gICAgaWYoRE9NLmlzRm9ybUlucHV0KGZyb21FbCkgfHwgZnJvbUVsLmdldEF0dHJpYnV0ZShkaXNhYmxlV2l0aCkgIT09IG51bGwpe1xuICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoZnJvbUVsKSl7IERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2lzSWdub3JlZDogdHJ1ZX0pIH1cbiAgICAgIERPTS5wdXRQcml2YXRlKGZyb21FbCwgUEhYX1JFRiwgdG9FbClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGZyb21FbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJiB0b0VsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgICAgfSlcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFBIWF9SRUYsIHJlZilcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDLCByZWZTcmMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBjbGVhbkNoaWxkTm9kZXMoY29udGFpbmVyLCBwaHhVcGRhdGUpe1xuICAgIGlmKERPTS5pc1BoeFVwZGF0ZShjb250YWluZXIsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgbGV0IHRvUmVtb3ZlID0gW11cbiAgICAgIGNvbnRhaW5lci5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGROb2RlID0+IHtcbiAgICAgICAgaWYoIWNoaWxkTm9kZS5pZCl7XG4gICAgICAgICAgLy8gU2tpcCB3YXJuaW5nIGlmIGl0J3MgYW4gZW1wdHkgdGV4dCBub2RlIChlLmcuIGEgbmV3LWxpbmUpXG4gICAgICAgICAgbGV0IGlzRW1wdHlUZXh0Tm9kZSA9IGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgY2hpbGROb2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IFwiXCJcbiAgICAgICAgICBpZighaXNFbXB0eVRleHROb2RlKXtcbiAgICAgICAgICAgIGxvZ0Vycm9yKFwib25seSBIVE1MIGVsZW1lbnQgdGFncyB3aXRoIGFuIGlkIGFyZSBhbGxvd2VkIGluc2lkZSBjb250YWluZXJzIHdpdGggcGh4LXVwZGF0ZS5cXG5cXG5cIiArXG4gICAgICAgICAgICAgIGByZW1vdmluZyBpbGxlZ2FsIG5vZGU6IFwiJHsoY2hpbGROb2RlLm91dGVySFRNTCB8fCBjaGlsZE5vZGUubm9kZVZhbHVlKS50cmltKCl9XCJcXG5cXG5gKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0b1JlbW92ZS5wdXNoKGNoaWxkTm9kZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goY2hpbGROb2RlID0+IGNoaWxkTm9kZS5yZW1vdmUoKSlcbiAgICB9XG4gIH0sXG5cbiAgcmVwbGFjZVJvb3RDb250YWluZXIoY29udGFpbmVyLCB0YWdOYW1lLCBhdHRycyl7XG4gICAgbGV0IHJldGFpbmVkQXR0cnMgPSBuZXcgU2V0KFtcImlkXCIsIFBIWF9TRVNTSU9OLCBQSFhfU1RBVElDLCBQSFhfTUFJTiwgUEhYX1JPT1RfSURdKVxuICAgIGlmKGNvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUudG9Mb3dlckNhc2UoKSl7XG4gICAgICBBcnJheS5mcm9tKGNvbnRhaW5lci5hdHRyaWJ1dGVzKVxuICAgICAgICAuZmlsdGVyKGF0dHIgPT4gIXJldGFpbmVkQXR0cnMuaGFzKGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLmZvckVhY2goYXR0ciA9PiBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKGF0dHIubmFtZSkpXG5cbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKVxuICAgICAgICAuZmlsdGVyKG5hbWUgPT4gIXJldGFpbmVkQXR0cnMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG5cbiAgICAgIHJldHVybiBjb250YWluZXJcblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmV3Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxuICAgICAgT2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKSlcbiAgICAgIHJldGFpbmVkQXR0cnMuZm9yRWFjaChhdHRyID0+IG5ld0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgY29udGFpbmVyLmdldEF0dHJpYnV0ZShhdHRyKSkpXG4gICAgICBuZXdDb250YWluZXIuaW5uZXJIVE1MID0gY29udGFpbmVyLmlubmVySFRNTFxuICAgICAgY29udGFpbmVyLnJlcGxhY2VXaXRoKG5ld0NvbnRhaW5lcilcbiAgICAgIHJldHVybiBuZXdDb250YWluZXJcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U3RpY2t5KGVsLCBuYW1lLCBkZWZhdWx0VmFsKXtcbiAgICBsZXQgb3AgPSAoRE9NLnByaXZhdGUoZWwsIFwic3RpY2t5XCIpIHx8IFtdKS5maW5kKChbZXhpc3RpbmdOYW1lLCBdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgaWYob3Ape1xuICAgICAgbGV0IFtfbmFtZSwgX29wLCBzdGFzaGVkUmVzdWx0XSA9IG9wXG4gICAgICByZXR1cm4gc3Rhc2hlZFJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mKGRlZmF1bHRWYWwpID09PSBcImZ1bmN0aW9uXCIgPyBkZWZhdWx0VmFsKCkgOiBkZWZhdWx0VmFsXG4gICAgfVxuICB9LFxuXG4gIGRlbGV0ZVN0aWNreShlbCwgbmFtZSl7XG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIHJldHVybiBvcHMuZmlsdGVyKChbZXhpc3RpbmdOYW1lLCBfXSkgPT4gZXhpc3RpbmdOYW1lICE9PSBuYW1lKVxuICAgIH0pXG4gIH0sXG5cbiAgcHV0U3RpY2t5KGVsLCBuYW1lLCBvcCl7XG4gICAgbGV0IHN0YXNoZWRSZXN1bHQgPSBvcChlbClcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgbGV0IGV4aXN0aW5nSW5kZXggPSBvcHMuZmluZEluZGV4KChbZXhpc3RpbmdOYW1lLCBdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgICBpZihleGlzdGluZ0luZGV4ID49IDApe1xuICAgICAgICBvcHNbZXhpc3RpbmdJbmRleF0gPSBbbmFtZSwgb3AsIHN0YXNoZWRSZXN1bHRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHMucHVzaChbbmFtZSwgb3AsIHN0YXNoZWRSZXN1bHRdKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9wc1xuICAgIH0pXG4gIH0sXG5cbiAgYXBwbHlTdGlja3lPcGVyYXRpb25zKGVsKXtcbiAgICBsZXQgb3BzID0gRE9NLnByaXZhdGUoZWwsIFwic3RpY2t5XCIpXG4gICAgaWYoIW9wcyl7IHJldHVybiB9XG5cbiAgICBvcHMuZm9yRWFjaCgoW25hbWUsIG9wLCBfc3Rhc2hlZF0pID0+IHRoaXMucHV0U3RpY2t5KGVsLCBuYW1lLCBvcCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRE9NXG4iLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNoYW5uZWxVcGxvYWRlcixcbiAgbG9nRXJyb3Jcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVcGxvYWRFbnRyeSB7XG4gIHN0YXRpYyBpc0FjdGl2ZShmaWxlRWwsIGZpbGUpe1xuICAgIGxldCBpc05ldyA9IGZpbGUuX3BoeFJlZiA9PT0gdW5kZWZpbmVkXG4gICAgbGV0IGFjdGl2ZVJlZnMgPSBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzQWN0aXZlID0gYWN0aXZlUmVmcy5pbmRleE9mKExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpKSA+PSAwXG4gICAgcmV0dXJuIGZpbGUuc2l6ZSA+IDAgJiYgKGlzTmV3IHx8IGlzQWN0aXZlKVxuICB9XG5cbiAgc3RhdGljIGlzUHJlZmxpZ2h0ZWQoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgcHJlZmxpZ2h0ZWRSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgbGV0IGlzUHJlZmxpZ2h0ZWQgPSBwcmVmbGlnaHRlZFJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBpc1ByZWZsaWdodGVkICYmIHRoaXMuaXNBY3RpdmUoZmlsZUVsLCBmaWxlKVxuICB9XG5cbiAgY29uc3RydWN0b3IoZmlsZUVsLCBmaWxlLCB2aWV3KXtcbiAgICB0aGlzLnJlZiA9IExpdmVVcGxvYWRlci5nZW5GaWxlUmVmKGZpbGUpXG4gICAgdGhpcy5maWxlRWwgPSBmaWxlRWxcbiAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubWV0YSA9IG51bGxcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlXG4gICAgdGhpcy5faXNEb25lID0gZmFsc2VcbiAgICB0aGlzLl9wcm9ncmVzcyA9IDBcbiAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gLTFcbiAgICB0aGlzLl9vbkRvbmUgPSBmdW5jdGlvbiAoKXsgfVxuICAgIHRoaXMuX29uRWxVcGRhdGVkID0gdGhpcy5vbkVsVXBkYXRlZC5iaW5kKHRoaXMpXG4gICAgdGhpcy5maWxlRWwuYWRkRXZlbnRMaXN0ZW5lcihQSFhfTElWRV9GSUxFX1VQREFURUQsIHRoaXMuX29uRWxVcGRhdGVkKVxuICB9XG5cbiAgbWV0YWRhdGEoKXsgcmV0dXJuIHRoaXMubWV0YSB9XG5cbiAgcHJvZ3Jlc3MocHJvZ3Jlc3Mpe1xuICAgIHRoaXMuX3Byb2dyZXNzID0gTWF0aC5mbG9vcihwcm9ncmVzcylcbiAgICBpZih0aGlzLl9wcm9ncmVzcyA+IHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQpe1xuICAgICAgaWYodGhpcy5fcHJvZ3Jlc3MgPj0gMTAwKXtcbiAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSAxMDBcbiAgICAgICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IDEwMFxuICAgICAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwgMTAwLCAoKSA9PiB7XG4gICAgICAgICAgTGl2ZVVwbG9hZGVyLnVudHJhY2tGaWxlKHRoaXMuZmlsZUVsLCB0aGlzLmZpbGUpXG4gICAgICAgICAgdGhpcy5fb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSB0aGlzLl9wcm9ncmVzc1xuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIHRoaXMuX3Byb2dyZXNzKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbmNlbCgpe1xuICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZVxuICAgIHRoaXMuX2lzRG9uZSA9IHRydWVcbiAgICB0aGlzLl9vbkRvbmUoKVxuICB9XG5cbiAgaXNEb25lKCl7IHJldHVybiB0aGlzLl9pc0RvbmUgfVxuXG4gIGVycm9yKHJlYXNvbiA9IFwiZmFpbGVkXCIpe1xuICAgIHRoaXMudmlldy5wdXNoRmlsZVByb2dyZXNzKHRoaXMuZmlsZUVsLCB0aGlzLnJlZiwge2Vycm9yOiByZWFzb259KVxuICAgIExpdmVVcGxvYWRlci5jbGVhckZpbGVzKHRoaXMuZmlsZUVsKVxuICB9XG5cbiAgLy9wcml2YXRlXG5cbiAgb25Eb25lKGNhbGxiYWNrKXtcbiAgICB0aGlzLl9vbkRvbmUgPSAoKSA9PiB7XG4gICAgICB0aGlzLmZpbGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgb25FbFVwZGF0ZWQoKXtcbiAgICBsZXQgYWN0aXZlUmVmcyA9IHRoaXMuZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGlmKGFjdGl2ZVJlZnMuaW5kZXhPZih0aGlzLnJlZikgPT09IC0xKXsgdGhpcy5jYW5jZWwoKSB9XG4gIH1cblxuICB0b1ByZWZsaWdodFBheWxvYWQoKXtcbiAgICByZXR1cm4ge1xuICAgICAgbGFzdF9tb2RpZmllZDogdGhpcy5maWxlLmxhc3RNb2RpZmllZCxcbiAgICAgIG5hbWU6IHRoaXMuZmlsZS5uYW1lLFxuICAgICAgc2l6ZTogdGhpcy5maWxlLnNpemUsXG4gICAgICB0eXBlOiB0aGlzLmZpbGUudHlwZSxcbiAgICAgIHJlZjogdGhpcy5yZWZcbiAgICB9XG4gIH1cblxuICB1cGxvYWRlcih1cGxvYWRlcnMpe1xuICAgIGlmKHRoaXMubWV0YS51cGxvYWRlcil7XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1cGxvYWRlcnNbdGhpcy5tZXRhLnVwbG9hZGVyXSB8fCBsb2dFcnJvcihgbm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgJHt0aGlzLm1ldGEudXBsb2FkZXJ9YClcbiAgICAgIHJldHVybiB7bmFtZTogdGhpcy5tZXRhLnVwbG9hZGVyLCBjYWxsYmFjazogY2FsbGJhY2t9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7bmFtZTogXCJjaGFubmVsXCIsIGNhbGxiYWNrOiBjaGFubmVsVXBsb2FkZXJ9XG4gICAgfVxuICB9XG5cbiAgemlwUG9zdEZsaWdodChyZXNwKXtcbiAgICB0aGlzLm1ldGEgPSByZXNwLmVudHJpZXNbdGhpcy5yZWZdXG4gICAgaWYoIXRoaXMubWV0YSl7IGxvZ0Vycm9yKGBubyBwcmVmbGlnaHQgdXBsb2FkIHJlc3BvbnNlIHJldHVybmVkIHdpdGggcmVmICR7dGhpcy5yZWZ9YCwge2lucHV0OiB0aGlzLmZpbGVFbCwgcmVzcG9uc2U6IHJlc3B9KSB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfRE9ORV9SRUZTLFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVXBsb2FkRW50cnkgZnJvbSBcIi4vdXBsb2FkX2VudHJ5XCJcblxubGV0IGxpdmVVcGxvYWRlckZpbGVSZWYgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVVcGxvYWRlciB7XG4gIHN0YXRpYyBnZW5GaWxlUmVmKGZpbGUpe1xuICAgIGxldCByZWYgPSBmaWxlLl9waHhSZWZcbiAgICBpZihyZWYgIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gcmVmXG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGUuX3BoeFJlZiA9IChsaXZlVXBsb2FkZXJGaWxlUmVmKyspLnRvU3RyaW5nKClcbiAgICAgIHJldHVybiBmaWxlLl9waHhSZWZcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RW50cnlEYXRhVVJMKGlucHV0RWwsIHJlZiwgY2FsbGJhY2spe1xuICAgIGxldCBmaWxlID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGZpbGUgPT4gdGhpcy5nZW5GaWxlUmVmKGZpbGUpID09PSByZWYpXG4gICAgY2FsbGJhY2soVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSlcbiAgfVxuXG4gIHN0YXRpYyBoYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpe1xuICAgIGxldCBhY3RpdmUgPSAwXG4gICAgRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKGlucHV0LmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgIT09IGlucHV0LmdldEF0dHJpYnV0ZShQSFhfRE9ORV9SRUZTKSl7XG4gICAgICAgIGFjdGl2ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gYWN0aXZlID4gMFxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbCl7XG4gICAgbGV0IGZpbGVzID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKVxuICAgIGxldCBmaWxlRGF0YSA9IHt9XG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IHtwYXRoOiBpbnB1dEVsLm5hbWV9XG4gICAgICBsZXQgdXBsb2FkUmVmID0gaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdID0gZmlsZURhdGFbdXBsb2FkUmVmXSB8fCBbXVxuICAgICAgZW50cnkucmVmID0gdGhpcy5nZW5GaWxlUmVmKGZpbGUpXG4gICAgICBlbnRyeS5uYW1lID0gZmlsZS5uYW1lIHx8IGVudHJ5LnJlZlxuICAgICAgZW50cnkudHlwZSA9IGZpbGUudHlwZVxuICAgICAgZW50cnkuc2l6ZSA9IGZpbGUuc2l6ZVxuICAgICAgZmlsZURhdGFbdXBsb2FkUmVmXS5wdXNoKGVudHJ5KVxuICAgIH0pXG4gICAgcmV0dXJuIGZpbGVEYXRhXG4gIH1cblxuICBzdGF0aWMgY2xlYXJGaWxlcyhpbnB1dEVsKXtcbiAgICBpbnB1dEVsLnZhbHVlID0gbnVsbFxuICAgIGlucHV0RWwucmVtb3ZlQXR0cmlidXRlKFBIWF9VUExPQURfUkVGKVxuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgW10pXG4gIH1cblxuICBzdGF0aWMgdW50cmFja0ZpbGUoaW5wdXRFbCwgZmlsZSl7XG4gICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBET00ucHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIpLmZpbHRlcihmID0+ICFPYmplY3QuaXMoZiwgZmlsZSkpKVxuICB9XG5cbiAgc3RhdGljIHRyYWNrRmlsZXMoaW5wdXRFbCwgZmlsZXMpe1xuICAgIGlmKGlucHV0RWwuZ2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIikgIT09IG51bGwpe1xuICAgICAgbGV0IG5ld0ZpbGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gIXRoaXMuYWN0aXZlRmlsZXMoaW5wdXRFbCkuZmluZChmID0+IE9iamVjdC5pcyhmLCBmaWxlKSkpXG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXRFbCkuY29uY2F0KG5ld0ZpbGVzKSlcbiAgICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgZmlsZXMpXG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFjdGl2ZUZpbGVJbnB1dHMoZm9ybUVsKXtcbiAgICBsZXQgZmlsZUlucHV0cyA9IERPTS5maW5kVXBsb2FkSW5wdXRzKGZvcm1FbClcbiAgICByZXR1cm4gQXJyYXkuZnJvbShmaWxlSW5wdXRzKS5maWx0ZXIoZWwgPT4gZWwuZmlsZXMgJiYgdGhpcy5hY3RpdmVGaWxlcyhlbCkubGVuZ3RoID4gMClcbiAgfVxuXG4gIHN0YXRpYyBhY3RpdmVGaWxlcyhpbnB1dCl7XG4gICAgcmV0dXJuIChET00ucHJpdmF0ZShpbnB1dCwgXCJmaWxlc1wiKSB8fCBbXSkuZmlsdGVyKGYgPT4gVXBsb2FkRW50cnkuaXNBY3RpdmUoaW5wdXQsIGYpKVxuICB9XG5cbiAgc3RhdGljIGlucHV0c0F3YWl0aW5nUHJlZmxpZ2h0KGZvcm1FbCl7XG4gICAgbGV0IGZpbGVJbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyhmb3JtRWwpXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsZUlucHV0cykuZmlsdGVyKGlucHV0ID0+IHRoaXMuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dCkubGVuZ3RoID4gMClcbiAgfVxuXG4gIHN0YXRpYyBmaWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0KXtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dCkuZmlsdGVyKGYgPT4gIVVwbG9hZEVudHJ5LmlzUHJlZmxpZ2h0ZWQoaW5wdXQsIGYpKVxuICB9XG5cbiAgY29uc3RydWN0b3IoaW5wdXRFbCwgdmlldywgb25Db21wbGV0ZSl7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMub25Db21wbGV0ZSA9IG9uQ29tcGxldGVcbiAgICB0aGlzLl9lbnRyaWVzID1cbiAgICAgIEFycmF5LmZyb20oTGl2ZVVwbG9hZGVyLmZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXRFbCkgfHwgW10pXG4gICAgICAgIC5tYXAoZmlsZSA9PiBuZXcgVXBsb2FkRW50cnkoaW5wdXRFbCwgZmlsZSwgdmlldykpXG5cbiAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID0gdGhpcy5fZW50cmllcy5sZW5ndGhcbiAgfVxuXG4gIGVudHJpZXMoKXsgcmV0dXJuIHRoaXMuX2VudHJpZXMgfVxuXG4gIGluaXRBZGFwdGVyVXBsb2FkKHJlc3AsIG9uRXJyb3IsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgdGhpcy5fZW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICBlbnRyeS56aXBQb3N0RmxpZ2h0KHJlc3ApXG4gICAgICAgIGVudHJ5Lm9uRG9uZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcy0tXG4gICAgICAgICAgaWYodGhpcy5udW1FbnRyaWVzSW5Qcm9ncmVzcyA9PT0gMCl7IHRoaXMub25Db21wbGV0ZSgpIH1cbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGVudHJ5XG4gICAgICB9KVxuXG4gICAgbGV0IGdyb3VwZWRFbnRyaWVzID0gdGhpcy5fZW50cmllcy5yZWR1Y2UoKGFjYywgZW50cnkpID0+IHtcbiAgICAgIGxldCB7bmFtZSwgY2FsbGJhY2t9ID0gZW50cnkudXBsb2FkZXIobGl2ZVNvY2tldC51cGxvYWRlcnMpXG4gICAgICBhY2NbbmFtZV0gPSBhY2NbbmFtZV0gfHwge2NhbGxiYWNrOiBjYWxsYmFjaywgZW50cmllczogW119XG4gICAgICBhY2NbbmFtZV0uZW50cmllcy5wdXNoKGVudHJ5KVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIHt9KVxuXG4gICAgZm9yKGxldCBuYW1lIGluIGdyb3VwZWRFbnRyaWVzKXtcbiAgICAgIGxldCB7Y2FsbGJhY2ssIGVudHJpZXN9ID0gZ3JvdXBlZEVudHJpZXNbbmFtZV1cbiAgICAgIGNhbGxiYWNrKGVudHJpZXMsIG9uRXJyb3IsIHJlc3AsIGxpdmVTb2NrZXQpXG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0FDVElWRV9FTlRSWV9SRUZTLFxuICBQSFhfTElWRV9GSUxFX1VQREFURUQsXG4gIFBIWF9QUkVGTElHSFRFRF9SRUZTLFxuICBQSFhfVVBMT0FEX1JFRlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuXG5sZXQgSG9va3MgPSB7XG4gIExpdmVGaWxlVXBsb2FkOiB7XG4gICAgYWN0aXZlUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKSB9LFxuXG4gICAgcHJlZmxpZ2h0ZWRSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgfSxcblxuICAgIG1vdW50ZWQoKXsgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKCkgfSxcblxuICAgIHVwZGF0ZWQoKXtcbiAgICAgIGxldCBuZXdQcmVmbGlnaHRzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKVxuICAgICAgaWYodGhpcy5wcmVmbGlnaHRlZFdhcyAhPT0gbmV3UHJlZmxpZ2h0cyl7XG4gICAgICAgIHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSBuZXdQcmVmbGlnaHRzXG4gICAgICAgIGlmKG5ld1ByZWZsaWdodHMgPT09IFwiXCIpe1xuICAgICAgICAgIHRoaXMuX192aWV3LmNhbmNlbFN1Ym1pdCh0aGlzLmVsLmZvcm0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5hY3RpdmVSZWZzKCkgPT09IFwiXCIpeyB0aGlzLmVsLnZhbHVlID0gbnVsbCB9XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCkpXG4gICAgfVxuICB9LFxuXG4gIExpdmVJbWdQcmV2aWV3OiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWVudHJ5LXJlZlwiKVxuICAgICAgdGhpcy5pbnB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpKVxuICAgICAgTGl2ZVVwbG9hZGVyLmdldEVudHJ5RGF0YVVSTCh0aGlzLmlucHV0RWwsIHRoaXMucmVmLCB1cmwgPT4ge1xuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLmVsLnNyYyA9IHVybFxuICAgICAgfSlcbiAgICB9LFxuICAgIGRlc3Ryb3llZCgpe1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSG9va3NcbiIsICJpbXBvcnQge1xuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUG9zdE1vcnBoUmVzdG9yZXIge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXJCZWZvcmUsIGNvbnRhaW5lckFmdGVyLCB1cGRhdGVUeXBlKXtcbiAgICBsZXQgaWRzQmVmb3JlID0gbmV3IFNldCgpXG4gICAgbGV0IGlkc0FmdGVyID0gbmV3IFNldChbLi4uY29udGFpbmVyQWZ0ZXIuY2hpbGRyZW5dLm1hcChjaGlsZCA9PiBjaGlsZC5pZCkpXG5cbiAgICBsZXQgZWxlbWVudHNUb01vZGlmeSA9IFtdXG5cbiAgICBBcnJheS5mcm9tKGNvbnRhaW5lckJlZm9yZS5jaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZihjaGlsZC5pZCl7IC8vIGFsbCBvZiBvdXIgY2hpbGRyZW4gc2hvdWxkIGJlIGVsZW1lbnRzIHdpdGggaWRzXG4gICAgICAgIGlkc0JlZm9yZS5hZGQoY2hpbGQuaWQpXG4gICAgICAgIGlmKGlkc0FmdGVyLmhhcyhjaGlsZC5pZCkpe1xuICAgICAgICAgIGxldCBwcmV2aW91c0VsZW1lbnRJZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZy5pZFxuICAgICAgICAgIGVsZW1lbnRzVG9Nb2RpZnkucHVzaCh7ZWxlbWVudElkOiBjaGlsZC5pZCwgcHJldmlvdXNFbGVtZW50SWQ6IHByZXZpb3VzRWxlbWVudElkfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmNvbnRhaW5lcklkID0gY29udGFpbmVyQWZ0ZXIuaWRcbiAgICB0aGlzLnVwZGF0ZVR5cGUgPSB1cGRhdGVUeXBlXG4gICAgdGhpcy5lbGVtZW50c1RvTW9kaWZ5ID0gZWxlbWVudHNUb01vZGlmeVxuICAgIHRoaXMuZWxlbWVudElkc1RvQWRkID0gWy4uLmlkc0FmdGVyXS5maWx0ZXIoaWQgPT4gIWlkc0JlZm9yZS5oYXMoaWQpKVxuICB9XG5cbiAgLy8gV2UgZG8gdGhlIGZvbGxvd2luZyB0byBvcHRpbWl6ZSBhcHBlbmQvcHJlcGVuZCBvcGVyYXRpb25zOlxuICAvLyAgIDEpIFRyYWNrIGlkcyBvZiBtb2RpZmllZCBlbGVtZW50cyAmIG9mIG5ldyBlbGVtZW50c1xuICAvLyAgIDIpIEFsbCB0aGUgbW9kaWZpZWQgZWxlbWVudHMgYXJlIHB1dCBiYWNrIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBET00gdHJlZVxuICAvLyAgICAgIGJ5IHN0b3JpbmcgdGhlIGlkIG9mIHRoZWlyIHByZXZpb3VzIHNpYmxpbmdcbiAgLy8gICAzKSBOZXcgZWxlbWVudHMgYXJlIGdvaW5nIHRvIGJlIHB1dCBpbiB0aGUgcmlnaHQgcGxhY2UgYnkgbW9ycGhkb20gZHVyaW5nIGFwcGVuZC5cbiAgLy8gICAgICBGb3IgcHJlcGVuZCwgd2UgbW92ZSB0aGVtIHRvIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgY29udGFpbmVyXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQgY29udGFpbmVyID0gRE9NLmJ5SWQodGhpcy5jb250YWluZXJJZClcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkuZm9yRWFjaChlbGVtZW50VG9Nb2RpZnkgPT4ge1xuICAgICAgaWYoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKXtcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKSwgcHJldmlvdXNFbGVtID0+IHtcbiAgICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkID09IHByZXZpb3VzRWxlbS5pZFxuICAgICAgICAgICAgaWYoIWlzSW5SaWdodFBsYWNlKXtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIGVsZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgbGV0IGlzSW5SaWdodFBsYWNlID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IG51bGxcbiAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmKHRoaXMudXBkYXRlVHlwZSA9PSBcInByZXBlbmRcIil7XG4gICAgICB0aGlzLmVsZW1lbnRJZHNUb0FkZC5yZXZlcnNlKCkuZm9yRWFjaChlbGVtSWQgPT4ge1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtSWQpLCBlbGVtID0+IGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGVsZW0pKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJ2YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICB2YXIgdG9Ob2RlQXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcztcbiAgICB2YXIgYXR0cjtcbiAgICB2YXIgYXR0ck5hbWU7XG4gICAgdmFyIGF0dHJOYW1lc3BhY2VVUkk7XG4gICAgdmFyIGF0dHJWYWx1ZTtcbiAgICB2YXIgZnJvbVZhbHVlO1xuXG4gICAgLy8gZG9jdW1lbnQtZnJhZ21lbnRzIGRvbnQgaGF2ZSBhdHRyaWJ1dGVzIHNvIGxldHMgbm90IGRvIGFueXRoaW5nXG4gICAgaWYgKHRvTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBmcm9tTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzIG9uIG9yaWdpbmFsIERPTSBlbGVtZW50XG4gICAgZm9yICh2YXIgaSA9IHRvTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGF0dHIgPSB0b05vZGVBdHRyc1tpXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJOYW1lc3BhY2VVUkkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIucHJlZml4ID09PSAneG1sbnMnKXtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7IC8vIEl0J3Mgbm90IGFsbG93ZWQgdG8gc2V0IGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBYTUxOUyBuYW1lc3BhY2Ugd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBgeG1sbnNgIHByZWZpeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgYXR0cmlidXRlcyBmb3VuZCBvbiB0aGUgb3JpZ2luYWwgRE9NIGVsZW1lbnQgdGhhdFxuICAgIC8vIHdlcmVuJ3QgZm91bmQgb24gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgIHZhciBmcm9tTm9kZUF0dHJzID0gZnJvbU5vZGUuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGQgPSBmcm9tTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGF0dHIgPSBmcm9tTm9kZUF0dHJzW2RdO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuXG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJhbmdlOyAvLyBDcmVhdGUgYSByYW5nZSBvYmplY3QgZm9yIGVmZmljZW50bHkgcmVuZGVyaW5nIHN0cmluZ3MgdG8gZWxlbWVudHMuXG52YXIgTlNfWEhUTUwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5cbnZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQ7XG52YXIgSEFTX1RFTVBMQVRFX1NVUFBPUlQgPSAhIWRvYyAmJiAnY29udGVudCcgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG52YXIgSEFTX1JBTkdFX1NVUFBPUlQgPSAhIWRvYyAmJiBkb2MuY3JlYXRlUmFuZ2UgJiYgJ2NyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCcgaW4gZG9jLmNyZWF0ZVJhbmdlKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHN0cjtcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21SYW5nZShzdHIpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoZG9jLmJvZHkpO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChzdHIpO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cikge1xuICAgIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgZnJhZ21lbnQuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYWJvdXQgdGhlIHNhbWVcbiAqIHZhciBodG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHIsICd0ZXh0L2h0bWwnKTtcbiAqIHJldHVybiBodG1sLmJvZHkuZmlyc3RDaGlsZDtcbiAqXG4gKiBAbWV0aG9kIHRvRWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiB0b0VsZW1lbnQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnRyaW0oKTtcbiAgICBpZiAoSEFTX1RFTVBMQVRFX1NVUFBPUlQpIHtcbiAgICAgIC8vIGF2b2lkIHJlc3RyaWN0aW9ucyBvbiBjb250ZW50IGZvciB0aGluZ3MgbGlrZSBgPHRyPjx0aD5IaTwvdGg+PC90cj5gIHdoaWNoXG4gICAgICAvLyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgZG9lc24ndCBzdXBwb3J0XG4gICAgICAvLyA8dGVtcGxhdGU+IHN1cHBvcnQgbm90IGF2YWlsYWJsZSBpbiBJRVxuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cik7XG4gICAgfSBlbHNlIGlmIChIQVNfUkFOR0VfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdHdvIG5vZGUncyBuYW1lcyBhcmUgdGhlIHNhbWUuXG4gKlxuICogTk9URTogV2UgZG9uJ3QgYm90aGVyIGNoZWNraW5nIGBuYW1lc3BhY2VVUklgIGJlY2F1c2UgeW91IHdpbGwgbmV2ZXIgZmluZCB0d28gSFRNTCBlbGVtZW50cyB3aXRoIHRoZSBzYW1lXG4gKiAgICAgICBub2RlTmFtZSBhbmQgZGlmZmVyZW50IG5hbWVzcGFjZSBVUklzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiIFRoZSB0YXJnZXQgZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29tcGFyZU5vZGVOYW1lcyhmcm9tRWwsIHRvRWwpIHtcbiAgICB2YXIgZnJvbU5vZGVOYW1lID0gZnJvbUVsLm5vZGVOYW1lO1xuICAgIHZhciB0b05vZGVOYW1lID0gdG9FbC5ub2RlTmFtZTtcbiAgICB2YXIgZnJvbUNvZGVTdGFydCwgdG9Db2RlU3RhcnQ7XG5cbiAgICBpZiAoZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZyb21Db2RlU3RhcnQgPSBmcm9tTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcbiAgICB0b0NvZGVTdGFydCA9IHRvTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcblxuICAgIC8vIElmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBhIHZpcnR1YWwgRE9NIG5vZGUgb3IgU1ZHIG5vZGUgdGhlbiB3ZSBtYXlcbiAgICAvLyBuZWVkIHRvIG5vcm1hbGl6ZSB0aGUgdGFnIG5hbWUgYmVmb3JlIGNvbXBhcmluZy4gTm9ybWFsIEhUTUwgZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBpbiB0aGUgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJcbiAgICAvLyBhcmUgY29udmVydGVkIHRvIHVwcGVyIGNhc2VcbiAgICBpZiAoZnJvbUNvZGVTdGFydCA8PSA5MCAmJiB0b0NvZGVTdGFydCA+PSA5NykgeyAvLyBmcm9tIGlzIHVwcGVyIGFuZCB0byBpcyBsb3dlclxuICAgICAgICByZXR1cm4gZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmICh0b0NvZGVTdGFydCA8PSA5MCAmJiBmcm9tQ29kZVN0YXJ0ID49IDk3KSB7IC8vIHRvIGlzIHVwcGVyIGFuZCBmcm9tIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiB0b05vZGVOYW1lID09PSBmcm9tTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlbGVtZW50LCBvcHRpb25hbGx5IHdpdGggYSBrbm93biBuYW1lc3BhY2UgVVJJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBlbGVtZW50IG5hbWUsIGUuZy4gJ2Rpdicgb3IgJ3N2ZydcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlVVJJXSB0aGUgZWxlbWVudCdzIG5hbWVzcGFjZSBVUkksIGkuZS4gdGhlIHZhbHVlIG9mXG4gKiBpdHMgYHhtbG5zYCBhdHRyaWJ1dGUgb3IgaXRzIGluZmVycmVkIG5hbWVzcGFjZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7XG4gICAgcmV0dXJuICFuYW1lc3BhY2VVUkkgfHwgbmFtZXNwYWNlVVJJID09PSBOU19YSFRNTCA/XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgY2hpbGRyZW4gb2Ygb25lIERPTSBlbGVtZW50IHRvIGFub3RoZXIgRE9NIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpO1xuICAgICAgICBjdXJDaGlsZCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHRvRWw7XG59XG5cbmZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7XG4gICAgaWYgKGZyb21FbFtuYW1lXSAhPT0gdG9FbFtuYW1lXSkge1xuICAgICAgICBmcm9tRWxbbmFtZV0gPSB0b0VsW25hbWVdO1xuICAgICAgICBpZiAoZnJvbUVsW25hbWVdKSB7XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBzcGVjaWFsRWxIYW5kbGVycyA9IHtcbiAgICBPUFRJT046IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGZyb21FbC5wYXJlbnROb2RlO1xuICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUgPT09ICdTRUxFQ1QnICYmICFwYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tRWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpICYmICF0b0VsLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIE1TIEVkZ2UgYnVnIHdoZXJlIHRoZSAnc2VsZWN0ZWQnIGF0dHJpYnV0ZSBjYW4gb25seSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGlmIHNldCB0byBhIG5vbi1lbXB0eSB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTIwODc2NzkvXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gcmVzZXQgc2VsZWN0IGVsZW1lbnQncyBzZWxlY3RlZEluZGV4IHRvIC0xLCBvdGhlcndpc2Ugc2V0dGluZ1xuICAgICAgICAgICAgICAgIC8vIGZyb21FbC5zZWxlY3RlZCB1c2luZyB0aGUgc3luY0Jvb2xlYW5BdHRyUHJvcCBiZWxvdyBoYXMgbm8gZWZmZWN0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb3JyZWN0IHNlbGVjdGVkSW5kZXggd2lsbCBiZSBzZXQgaW4gdGhlIFNFTEVDVCBzcGVjaWFsIGhhbmRsZXIgYmVsb3cuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdzZWxlY3RlZCcpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgaXMgc3BlY2lhbCBmb3IgdGhlIDxpbnB1dD4gZWxlbWVudCBzaW5jZSBpdCBzZXRzXG4gICAgICogdGhlIGluaXRpYWwgdmFsdWUuIENoYW5naW5nIHRoZSBcInZhbHVlXCIgYXR0cmlidXRlIHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICogXCJ2YWx1ZVwiIHByb3BlcnR5IHdpbGwgaGF2ZSBubyBlZmZlY3Qgc2luY2UgaXQgaXMgb25seSB1c2VkIHRvIHRoZSBzZXQgdGhlXG4gICAgICogaW5pdGlhbCB2YWx1ZS4gIFNpbWlsYXIgZm9yIHRoZSBcImNoZWNrZWRcIiBhdHRyaWJ1dGUsIGFuZCBcImRpc2FibGVkXCIuXG4gICAgICovXG4gICAgSU5QVVQ6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2NoZWNrZWQnKTtcbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgIGlmIChmcm9tRWwudmFsdWUgIT09IHRvRWwudmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IHRvRWwudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIFRFWFRBUkVBOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIE5lZWRlZCBmb3IgSUUuIEFwcGFyZW50bHkgSUUgc2V0cyB0aGUgcGxhY2Vob2xkZXIgYXMgdGhlXG4gICAgICAgICAgICAvLyBub2RlIHZhbHVlIGFuZCB2aXNlIHZlcnNhLiBUaGlzIGlnbm9yZXMgYW4gZW1wdHkgdXBkYXRlLlxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PSBuZXdWYWx1ZSB8fCAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlID09IGZyb21FbC5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFNFTEVDVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGxvb3AgdGhyb3VnaCBjaGlsZHJlbiBvZiBmcm9tRWwsIG5vdCB0b0VsIHNpbmNlIG5vZGVzIGNhbiBiZSBtb3ZlZFxuICAgICAgICAgICAgLy8gZnJvbSB0b0VsIHRvIGZyb21FbCBkaXJlY3RseSB3aGVuIG1vcnBoaW5nLlxuICAgICAgICAgICAgLy8gQXQgdGhlIHRpbWUgdGhpcyBzcGVjaWFsIGhhbmRsZXIgaXMgaW52b2tlZCwgYWxsIGNoaWxkcmVuIGhhdmUgYWxyZWFkeSBiZWVuIG1vcnBoZWRcbiAgICAgICAgICAgIC8vIGFuZCBhcHBlbmRlZCB0byAvIHJlbW92ZWQgZnJvbSBmcm9tRWwsIHNvIHVzaW5nIGZyb21FbCBoZXJlIGlzIHNhZmUgYW5kIGNvcnJlY3QuXG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBvcHRncm91cDtcbiAgICAgICAgICAgIHZhciBub2RlTmFtZTtcbiAgICAgICAgICAgIHdoaWxlKGN1ckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBjdXJDaGlsZC5ub2RlTmFtZSAmJiBjdXJDaGlsZC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IGN1ckNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IG9wdGdyb3VwLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VyQ2hpbGQgJiYgb3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb21FbC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSA9IDExO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXROb2RlS2V5KG5vZGUpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykpIHx8IG5vZGUuaWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW9ycGhkb21GYWN0b3J5KG1vcnBoQXR0cnMpIHtcblxuICAgIHJldHVybiBmdW5jdGlvbiBtb3JwaGRvbShmcm9tTm9kZSwgdG9Ob2RlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0b05vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoZnJvbU5vZGUubm9kZU5hbWUgPT09ICcjZG9jdW1lbnQnIHx8IGZyb21Ob2RlLm5vZGVOYW1lID09PSAnSFRNTCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICAgICAgICAgIHZhciB0b05vZGVIdG1sID0gdG9Ob2RlO1xuICAgICAgICAgICAgICAgIHRvTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdodG1sJyk7XG4gICAgICAgICAgICAgICAgdG9Ob2RlLmlubmVySFRNTCA9IHRvTm9kZUh0bWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvTm9kZSA9IHRvRWxlbWVudCh0b05vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGdldE5vZGVLZXkgPSBvcHRpb25zLmdldE5vZGVLZXkgfHwgZGVmYXVsdEdldE5vZGVLZXk7XG4gICAgICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlQWRkZWQgfHwgbm9vcDtcbiAgICAgICAgdmFyIG9uTm9kZUFkZGVkID0gb3B0aW9ucy5vbk5vZGVBZGRlZCB8fCBub29wO1xuICAgICAgICB2YXIgb25CZWZvcmVFbFVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxVcGRhdGVkIHx8IG5vb3A7XG4gICAgICAgIHZhciBvbkVsVXBkYXRlZCA9IG9wdGlvbnMub25FbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICAgICAgdmFyIG9uQmVmb3JlTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgICAgIHZhciBvbk5vZGVEaXNjYXJkZWQgPSBvcHRpb25zLm9uTm9kZURpc2NhcmRlZCB8fCBub29wO1xuICAgICAgICB2YXIgb25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbENoaWxkcmVuVXBkYXRlZCB8fCBub29wO1xuICAgICAgICB2YXIgY2hpbGRyZW5Pbmx5ID0gb3B0aW9ucy5jaGlsZHJlbk9ubHkgPT09IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBvYmplY3QgaXMgdXNlZCBhcyBhIGxvb2t1cCB0byBxdWlja2x5IGZpbmQgYWxsIGtleWVkIGVsZW1lbnRzIGluIHRoZSBvcmlnaW5hbCBET00gdHJlZS5cbiAgICAgICAgdmFyIGZyb21Ob2Rlc0xvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHZhciBrZXllZFJlbW92YWxMaXN0ID0gW107XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkS2V5ZWRSZW1vdmFsKGtleSkge1xuICAgICAgICAgICAga2V5ZWRSZW1vdmFsTGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChza2lwS2V5ZWROb2RlcyAmJiAoa2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgc2tpcHBpbmcga2V5ZWQgbm9kZXMgdGhlbiB3ZSBhZGQgdGhlIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYSBsaXN0IHNvIHRoYXQgaXQgY2FuIGJlIGhhbmRsZWQgYXQgdGhlIHZlcnkgZW5kLlxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHJlcG9ydCB0aGUgbm9kZSBhcyBkaXNjYXJkZWQgaWYgaXQgaXMgbm90IGtleWVkLiBXZSBkbyB0aGlzIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQgd2UgbG9vcCB0aHJvdWdoIGFsbCBrZXllZCBlbGVtZW50cyB0aGF0IHdlcmUgdW5tYXRjaGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlbiBkaXNjYXJkIHRoZW0gaW4gb25lIGZpbmFsIHBhc3MuXG4gICAgICAgICAgICAgICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrRGlzY2FyZGVkQ2hpbGROb2RlcyhjdXJDaGlsZCwgc2tpcEtleWVkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlcyBhIERPTSBub2RlIG91dCBvZiB0aGUgb3JpZ2luYWwgRE9NXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSAge05vZGV9IG5vZGUgVGhlIG5vZGUgdG8gcmVtb3ZlXG4gICAgICAgICAqIEBwYXJhbSAge05vZGV9IHBhcmVudE5vZGUgVGhlIG5vZGVzIHBhcmVudFxuICAgICAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBza2lwS2V5ZWROb2RlcyBJZiB0cnVlIHRoZW4gZWxlbWVudHMgd2l0aCBrZXlzIHdpbGwgYmUgc2tpcHBlZCBhbmQgbm90IGRpc2NhcmRlZC5cbiAgICAgICAgICogQHJldHVybiB7dW5kZWZpbmVkfVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlLCBza2lwS2V5ZWROb2Rlcykge1xuICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZURpc2NhcmRlZChub2RlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKG5vZGUpO1xuICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSwgc2tpcEtleWVkTm9kZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gLy8gVHJlZVdhbGtlciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAgICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKHJvb3QpIHtcbiAgICAgICAgLy8gICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgLy8gICAgICAgICByb290LFxuICAgICAgICAvLyAgICAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgIHZhciBlbDtcbiAgICAgICAgLy8gICAgIHdoaWxlKChlbCA9IHRyZWVXYWxrZXIubmV4dE5vZGUoKSkpIHtcbiAgICAgICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAvLyAgICAgICAgICAgICBmcm9tTm9kZXNMb29rdXBba2V5XSA9IGVsO1xuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIC8vIE5vZGVJdGVyYXRvciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gZnVuY3Rpb24gaW5kZXhUcmVlKG5vZGUpIHtcbiAgICAgICAgLy8gICAgIHZhciBub2RlSXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iobm9kZSwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgICAgICAvLyAgICAgdmFyIGVsO1xuICAgICAgICAvLyAgICAgd2hpbGUoKGVsID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpKSB7XG4gICAgICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgICAgICAvLyAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBjdXJDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdhbGsgcmVjdXJzaXZlbHlcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhUcmVlKGN1ckNoaWxkKTtcblxuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4VHJlZShmcm9tTm9kZSk7XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTm9kZUFkZGVkKGVsKSB7XG4gICAgICAgICAgICBvbk5vZGVBZGRlZChlbCk7XG5cbiAgICAgICAgICAgIHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1bm1hdGNoZWRGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgZmluZCBhIGR1cGxpY2F0ZSAjaWQgbm9kZSBpbiBjYWNoZSwgcmVwbGFjZSBgZWxgIHdpdGggY2FjaGUgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIG1vcnBoIGl0IHRvIHRoZSBjaGlsZCBub2RlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodW5tYXRjaGVkRnJvbUVsICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyQ2hpbGQsIHVubWF0Y2hlZEZyb21FbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhFbCh1bm1hdGNoZWRGcm9tRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgZm9yIGN1ckNoaWxkIGFuZCBpdCdzIGNoaWxkcmVuIHRvIHNlZSBpZiB3ZSBmaW5kIHNvbWV0aGluZyBpblxuICAgICAgICAgICAgICAgICAgLy8gZnJvbU5vZGVzTG9va3VwXG4gICAgICAgICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzXG4gICAgICAgICAgICAvLyBub24tbnVsbCB0aGVuIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWRcbiAgICAgICAgICAgIC8vIHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgaWYgKChjdXJGcm9tTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyRnJvbU5vZGVDaGlsZCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgIGFkZEtleWVkUmVtb3ZhbChjdXJGcm9tTm9kZUtleSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugc2tpcCBuZXN0ZWQga2V5ZWQgbm9kZXMgZnJvbSBiZWluZyByZW1vdmVkIHNpbmNlIHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGNoaWxkcmVuT25seSkge1xuICAgICAgICAgICAgdmFyIHRvRWxLZXkgPSBnZXROb2RlS2V5KHRvRWwpO1xuXG4gICAgICAgICAgICBpZiAodG9FbEtleSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBpcyBiZWluZyBtb3JwaGVkIHRoZW4gaXQgd2lsbCBiZSBpbiB0aGUgZmluYWxcbiAgICAgICAgICAgICAgICAvLyBET00gc28gY2xlYXIgaXQgb3V0IG9mIHRoZSBzYXZlZCBlbGVtZW50cyBjb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgZGVsZXRlIGZyb21Ob2Rlc0xvb2t1cFt0b0VsS2V5XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICAgICAgICAgIGlmIChvbkJlZm9yZUVsVXBkYXRlZChmcm9tRWwsIHRvRWwpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnQgZmlyc3RcbiAgICAgICAgICAgICAgICBtb3JwaEF0dHJzKGZyb21FbCwgdG9FbCk7XG4gICAgICAgICAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgICAgICAgICBvbkVsVXBkYXRlZChmcm9tRWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZyb21FbC5ub2RlTmFtZSAhPT0gJ1RFWFRBUkVBJykge1xuICAgICAgICAgICAgICBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzcGVjaWFsRWxIYW5kbGVycy5URVhUQVJFQShmcm9tRWwsIHRvRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgICAgIHZhciBjdXJUb05vZGVDaGlsZCA9IHRvRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB2YXIgY3VyVG9Ob2RlS2V5O1xuICAgICAgICAgICAgdmFyIGN1ckZyb21Ob2RlS2V5O1xuXG4gICAgICAgICAgICB2YXIgZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgdmFyIHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB2YXIgbWF0Y2hpbmdGcm9tRWw7XG5cbiAgICAgICAgICAgIC8vIHdhbGsgdGhlIGNoaWxkcmVuXG4gICAgICAgICAgICBvdXRlcjogd2hpbGUgKGN1clRvTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgdG9OZXh0U2libGluZyA9IGN1clRvTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGN1clRvTm9kZUtleSA9IGdldE5vZGVLZXkoY3VyVG9Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgLy8gd2FsayB0aGUgZnJvbU5vZGUgY2hpbGRyZW4gYWxsIHRoZSB3YXkgdGhyb3VnaFxuICAgICAgICAgICAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUNoaWxkLmlzU2FtZU5vZGUgJiYgY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZShjdXJGcm9tTm9kZUNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJGcm9tTm9kZVR5cGUgPSBjdXJGcm9tTm9kZUNoaWxkLm5vZGVUeXBlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgbWVhbnMgaWYgdGhlIGN1ckZyb21Ob2RlQ2hpbGQgZG9lc250IGhhdmUgYSBtYXRjaCB3aXRoIHRoZSBjdXJUb05vZGVDaGlsZFxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNDb21wYXRpYmxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IGN1clRvTm9kZUNoaWxkLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBFbGVtZW50IG5vZGVzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSB0YXJnZXQgbm9kZSBoYXMgYSBrZXkgc28gd2Ugd2FudCB0byBtYXRjaCBpdCB1cCB3aXRoIHRoZSBjb3JyZWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVLZXkgIT09IGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY3VycmVudCBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBET00gdHJlZSBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcga2V5IHNvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQncyBjaGVjayBvdXIgbG9va3VwIHRvIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoaW5nIGVsZW1lbnQgaW4gdGhlIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBET00gdHJlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcm9tTmV4dFNpYmxpbmcgPT09IG1hdGNoaW5nRnJvbUVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3Igc2luZ2xlIGVsZW1lbnQgcmVtb3ZhbHMuIFRvIGF2b2lkIHJlbW92aW5nIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBET00gbm9kZSBvdXQgb2YgdGhlIHRyZWUgKHNpbmNlIHRoYXQgY2FuIGJyZWFrIENTUyB0cmFuc2l0aW9ucywgZXRjLiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIHdpbGwgaW5zdGVhZCBkaXNjYXJkIHRoZSBjdXJyZW50IG5vZGUgYW5kIHdhaXQgdW50aWwgdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uIHRvIHByb3Blcmx5IG1hdGNoIHVwIHRoZSBrZXllZCB0YXJnZXQgZWxlbWVudCB3aXRoIGl0cyBtYXRjaGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgbWF0Y2hpbmcga2V5ZWQgZWxlbWVudCBzb21ld2hlcmUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZXQncyBtb3ZlIHRoZSBvcmlnaW5hbCBET00gbm9kZSBpbnRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIGFuZCBtb3JwaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpdC5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBXZSB1c2UgaW5zZXJ0QmVmb3JlIGluc3RlYWQgb2YgcmVwbGFjZUNoaWxkIGJlY2F1c2Ugd2Ugd2FudCB0byBnbyB0aHJvdWdoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBgcmVtb3ZlTm9kZSgpYCBmdW5jdGlvbiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBiZWluZyBkaXNjYXJkZWQgc28gdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbGlmZWN5Y2xlIGhvb2tzIGFyZSBjb3JyZWN0bHkgaW52b2tlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tRWwuaW5zZXJ0QmVmb3JlKG1hdGNoaW5nRnJvbUVsLCBjdXJGcm9tTm9kZUNoaWxkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugc2tpcCBuZXN0ZWQga2V5ZWQgbm9kZXMgZnJvbSBiZWluZyByZW1vdmVkIHNpbmNlIHRoZXJlIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIHRydWUgLyogc2tpcCBrZXllZCBub2RlcyAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gbWF0Y2hpbmdGcm9tRWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbm9kZXMgYXJlIG5vdCBjb21wYXRpYmxlIHNpbmNlIHRoZSBcInRvXCIgbm9kZSBoYXMgYSBrZXkgYW5kIHRoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gbWF0Y2hpbmcga2V5ZWQgbm9kZSBpbiB0aGUgc291cmNlIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGhhcyBhIGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSBpc0NvbXBhdGlibGUgIT09IGZhbHNlICYmIGNvbXBhcmVOb2RlTmFtZXMoY3VyRnJvbU5vZGVDaGlsZCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgY29tcGF0aWJsZSBET00gZWxlbWVudHMgc28gdHJhbnNmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGUgdG8gbWF0Y2ggdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGFyZ2V0IERPTSBub2RlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNT1JQSFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBURVhUX05PREUgfHwgY3VyRnJvbU5vZGVUeXBlID09IENPTU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIFRleHQgb3IgQ29tbWVudCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltcGx5IHVwZGF0ZSBub2RlVmFsdWUgb24gdGhlIG9yaWdpbmFsIG5vZGUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIHRleHQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgIT09IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkLm5vZGVWYWx1ZSA9IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgYm90aCB0aGUgXCJ0b1wiIGNoaWxkIGFuZCB0aGUgXCJmcm9tXCIgY2hpbGQgc2luY2Ugd2UgZm91bmQgYSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyBlbHNlIHRvIGRvIGFzIHdlIGFscmVhZHkgcmVjdXJzaXZlbHkgY2FsbGVkIG1vcnBoQ2hpbGRyZW4gYWJvdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGNvbXBhdGlibGUgbWF0Y2ggc28gcmVtb3ZlIHRoZSBvbGQgbm9kZSBmcm9tIHRoZSBET00gYW5kIGNvbnRpbnVlIHRyeWluZyB0byBmaW5kIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2ggaW4gdGhlIG9yaWdpbmFsIERPTS4gSG93ZXZlciwgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSBmcm9tIG5vZGUgaXMgbm90IGtleWVkXG4gICAgICAgICAgICAgICAgICAgIC8vIHNpbmNlIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBrZXllZCBub2RlIG1pZ2h0IG1hdGNoIHVwIHdpdGggYSBub2RlIHNvbWV3aGVyZSBlbHNlIGluIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyB0YXJnZXQgdHJlZSBhbmQgd2UgZG9uJ3Qgd2FudCB0byBkaXNjYXJkIGl0IGp1c3QgeWV0IHNpbmNlIGl0IHN0aWxsIG1pZ2h0IGZpbmQgYVxuICAgICAgICAgICAgICAgICAgICAvLyBob21lIGluIHRoZSBmaW5hbCBET00gdHJlZS4gQWZ0ZXIgZXZlcnl0aGluZyBpcyBkb25lIHdlIHdpbGwgcmVtb3ZlIGFueSBrZXllZCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGRpZG4ndCBmaW5kIGEgaG9tZVxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBub2RlIGlzIGtleWVkIGl0IG1pZ2h0IGJlIG1hdGNoZWQgdXAgbGF0ZXIgc28gd2UgZGVmZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBhY3R1YWwgcmVtb3ZhbCB0byBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IHdlIHNraXAgbmVzdGVkIGtleWVkIG5vZGVzIGZyb20gYmVpbmcgcmVtb3ZlZCBzaW5jZSB0aGVyZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgc3RpbGwgYSBjaGFuY2UgdGhleSB3aWxsIGJlIG1hdGNoZWQgdXAgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9IC8vIEVORDogd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge31cblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIHdlIGRpZCBub3QgZmluZCBhIGNhbmRpZGF0ZSBtYXRjaCBmb3JcbiAgICAgICAgICAgICAgICAvLyBvdXIgXCJ0byBub2RlXCIgYW5kIHdlIGV4aGF1c3RlZCBhbGwgb2YgdGhlIGNoaWxkcmVuIFwiZnJvbVwiXG4gICAgICAgICAgICAgICAgLy8gbm9kZXMuIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IGFwcGVuZCB0aGUgY3VycmVudCBcInRvXCIgbm9kZVxuICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBlbmRcbiAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICYmIChtYXRjaGluZ0Zyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtjdXJUb05vZGVLZXldKSAmJiBjb21wYXJlTm9kZU5hbWVzKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUVsLmFwcGVuZENoaWxkKG1hdGNoaW5nRnJvbUVsKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICAgICAgICAgICAgbW9ycGhFbChtYXRjaGluZ0Zyb21FbCwgY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCA9IG9uQmVmb3JlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSBvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUNoaWxkLmFjdHVhbGl6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tRWwuYXBwZW5kQ2hpbGQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTm9kZUFkZGVkKGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gdG9OZXh0U2libGluZztcbiAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpO1xuXG4gICAgICAgICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICAgICAgICBpZiAoc3BlY2lhbEVsSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHNwZWNpYWxFbEhhbmRsZXIoZnJvbUVsLCB0b0VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBFTkQ6IG1vcnBoQ2hpbGRyZW4oLi4uKVxuXG4gICAgICAgIHZhciBtb3JwaGVkTm9kZSA9IGZyb21Ob2RlO1xuICAgICAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgICAgIHZhciB0b05vZGVUeXBlID0gdG9Ob2RlLm5vZGVUeXBlO1xuXG4gICAgICAgIGlmICghY2hpbGRyZW5Pbmx5KSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgYXJlIGdpdmVuIHR3byBET00gbm9kZXMgdGhhdCBhcmUgbm90XG4gICAgICAgICAgICAvLyBjb21wYXRpYmxlIChlLmcuIDxkaXY+IC0tPiA8c3Bhbj4gb3IgPGRpdj4gLS0+IFRFWFQpXG4gICAgICAgICAgICBpZiAobW9ycGhlZE5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGFyZU5vZGVOYW1lcyhmcm9tTm9kZSwgdG9Ob2RlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoZWROb2RlID0gbW92ZUNoaWxkcmVuKGZyb21Ob2RlLCBjcmVhdGVFbGVtZW50TlModG9Ob2RlLm5vZGVOYW1lLCB0b05vZGUubmFtZXNwYWNlVVJJKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBHb2luZyBmcm9tIGFuIGVsZW1lbnQgbm9kZSB0byBhIHRleHQgbm9kZVxuICAgICAgICAgICAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IG1vcnBoZWROb2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7IC8vIFRleHQgb3IgY29tbWVudCBub2RlXG4gICAgICAgICAgICAgICAgaWYgKHRvTm9kZVR5cGUgPT09IG1vcnBoZWROb2RlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9ycGhlZE5vZGUubm9kZVZhbHVlICE9PSB0b05vZGUubm9kZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vcnBoZWROb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRleHQgbm9kZSB0byBzb21ldGhpbmcgZWxzZVxuICAgICAgICAgICAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgICAgICAgLy8gdG9zcyBvdXQgdGhlIFwiZnJvbSBub2RlXCIgYW5kIHVzZSB0aGUgXCJ0byBub2RlXCJcbiAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodG9Ob2RlLmlzU2FtZU5vZGUgJiYgdG9Ob2RlLmlzU2FtZU5vZGUobW9ycGhlZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb3JwaEVsKG1vcnBoZWROb2RlLCB0b05vZGUsIGNoaWxkcmVuT25seSk7XG5cbiAgICAgICAgICAgIC8vIFdlIG5vdyBuZWVkIHRvIGxvb3Agb3ZlciBhbnkga2V5ZWQgbm9kZXMgdGhhdCBtaWdodCBuZWVkIHRvIGJlXG4gICAgICAgICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgICAgICAgLy8gbmV2ZXIgZm91bmQgYSBtYXRjaC4gV2hlbiBhIGtleWVkIG5vZGUgaXMgbWF0Y2hlZCB1cCB3ZSByZW1vdmVcbiAgICAgICAgICAgIC8vIGl0IG91dCBvZiBmcm9tTm9kZXNMb29rdXAgYW5kIHdlIHVzZSBmcm9tTm9kZXNMb29rdXAgdG8gZGV0ZXJtaW5lXG4gICAgICAgICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgICAgICAgIGlmIChrZXllZFJlbW92YWxMaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBsZW49a2V5ZWRSZW1vdmFsTGlzdC5sZW5ndGg7IGk8bGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGVsVG9SZW1vdmUsIGVsVG9SZW1vdmUucGFyZW50Tm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGlsZHJlbk9ubHkgJiYgbW9ycGhlZE5vZGUgIT09IGZyb21Ob2RlICYmIGZyb21Ob2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGlmIChtb3JwaGVkTm9kZS5hY3R1YWxpemUpIHtcbiAgICAgICAgICAgICAgICBtb3JwaGVkTm9kZSA9IG1vcnBoZWROb2RlLmFjdHVhbGl6ZShmcm9tTm9kZS5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYWQgdG8gc3dhcCBvdXQgdGhlIGZyb20gbm9kZSB3aXRoIGEgbmV3IG5vZGUgYmVjYXVzZSB0aGUgb2xkXG4gICAgICAgICAgICAvLyBub2RlIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSB0YXJnZXQgbm9kZSB0aGVuIHdlIG5lZWQgdG9cbiAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIG9sZCBET00gbm9kZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuIFRoaXMgaXMgb25seVxuICAgICAgICAgICAgLy8gcG9zc2libGUgaWYgdGhlIG9yaWdpbmFsIERPTSBub2RlIHdhcyBwYXJ0IG9mIGEgRE9NIHRyZWUgd2hpY2hcbiAgICAgICAgICAgIC8vIHdlIGtub3cgaXMgdGhlIGNhc2UgaWYgaXQgaGFzIGEgcGFyZW50IG5vZGUuXG4gICAgICAgICAgICBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vcnBoZWROb2RlO1xuICAgIH07XG59XG5cbnZhciBtb3JwaGRvbSA9IG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9ycGhkb207XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX0ZFRURCQUNLX0ZPUixcbiAgUEhYX1BSVU5FLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TS0lQLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJJR0dFUl9BQ1RJT04sXG4gIFBIWF9VUERBVEVcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgZGV0ZWN0RHVwbGljYXRlSWRzLFxuICBpc0NpZFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01Qb3N0TW9ycGhSZXN0b3JlciBmcm9tIFwiLi9kb21fcG9zdF9tb3JwaF9yZXN0b3JlclwiXG5pbXBvcnQgbW9ycGhkb20gZnJvbSBcIm1vcnBoZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUGF0Y2gge1xuICBzdGF0aWMgcGF0Y2hFbChmcm9tRWwsIHRvRWwsIGFjdGl2ZUVsZW1lbnQpe1xuICAgIG1vcnBoZG9tKGZyb21FbCwgdG9FbCwge1xuICAgICAgY2hpbGRyZW5Pbmx5OiBmYWxzZSxcbiAgICAgIG9uQmVmb3JlRWxVcGRhdGVkOiAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICAgIGlmKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5pc1NhbWVOb2RlKGZyb21FbCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbCkpe1xuICAgICAgICAgIERPTS5tZXJnZUZvY3VzZWRJbnB1dChmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY29uc3RydWN0b3IodmlldywgY29udGFpbmVyLCBpZCwgaHRtbCwgdGFyZ2V0Q0lEKXtcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXJcbiAgICB0aGlzLmlkID0gaWRcbiAgICB0aGlzLnJvb3RJRCA9IHZpZXcucm9vdC5pZFxuICAgIHRoaXMuaHRtbCA9IGh0bWxcbiAgICB0aGlzLnRhcmdldENJRCA9IHRhcmdldENJRFxuICAgIHRoaXMuY2lkUGF0Y2ggPSBpc0NpZCh0aGlzLnRhcmdldENJRClcbiAgICB0aGlzLmNhbGxiYWNrcyA9IHtcbiAgICAgIGJlZm9yZWFkZGVkOiBbXSwgYmVmb3JldXBkYXRlZDogW10sIGJlZm9yZXBoeENoaWxkQWRkZWQ6IFtdLFxuICAgICAgYWZ0ZXJhZGRlZDogW10sIGFmdGVydXBkYXRlZDogW10sIGFmdGVyZGlzY2FyZGVkOiBbXSwgYWZ0ZXJwaHhDaGlsZEFkZGVkOiBbXSxcbiAgICAgIGFmdGVydHJhbnNpdGlvbnNEaXNjYXJkZWQ6IFtdXG4gICAgfVxuICB9XG5cbiAgYmVmb3JlKGtpbmQsIGNhbGxiYWNrKXsgdGhpcy5jYWxsYmFja3NbYGJlZm9yZSR7a2luZH1gXS5wdXNoKGNhbGxiYWNrKSB9XG4gIGFmdGVyKGtpbmQsIGNhbGxiYWNrKXsgdGhpcy5jYWxsYmFja3NbYGFmdGVyJHtraW5kfWBdLnB1c2goY2FsbGJhY2spIH1cblxuICB0cmFja0JlZm9yZShraW5kLCAuLi5hcmdzKXtcbiAgICB0aGlzLmNhbGxiYWNrc1tgYmVmb3JlJHtraW5kfWBdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soLi4uYXJncykpXG4gIH1cblxuICB0cmFja0FmdGVyKGtpbmQsIC4uLmFyZ3Mpe1xuICAgIHRoaXMuY2FsbGJhY2tzW2BhZnRlciR7a2luZH1gXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKC4uLmFyZ3MpKVxuICB9XG5cbiAgbWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKXtcbiAgICBET00uYWxsKHRoaXMuY29udGFpbmVyLCBcIltwaHgtdXBkYXRlPWFwcGVuZF0gPiAqLCBbcGh4LXVwZGF0ZT1wcmVwZW5kXSA+ICpcIiwgZWwgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9QUlVORSwgXCJcIilcbiAgICB9KVxuICB9XG5cbiAgcGVyZm9ybSgpe1xuICAgIGxldCB7dmlldywgbGl2ZVNvY2tldCwgY29udGFpbmVyLCBodG1sfSA9IHRoaXNcbiAgICBsZXQgdGFyZ2V0Q29udGFpbmVyID0gdGhpcy5pc0NJRFBhdGNoKCkgPyB0aGlzLnRhcmdldENJRENvbnRhaW5lcihodG1sKSA6IGNvbnRhaW5lclxuICAgIGlmKHRoaXMuaXNDSURQYXRjaCgpICYmICF0YXJnZXRDb250YWluZXIpeyByZXR1cm4gfVxuXG4gICAgbGV0IGZvY3VzZWQgPSBsaXZlU29ja2V0LmdldEFjdGl2ZUVsZW1lbnQoKVxuICAgIGxldCB7c2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZH0gPSBmb2N1c2VkICYmIERPTS5oYXNTZWxlY3Rpb25SYW5nZShmb2N1c2VkKSA/IGZvY3VzZWQgOiB7fVxuICAgIGxldCBwaHhVcGRhdGUgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1VQREFURSlcbiAgICBsZXQgcGh4RmVlZGJhY2tGb3IgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX0ZFRURCQUNLX0ZPUilcbiAgICBsZXQgZGlzYWJsZVdpdGggPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSClcbiAgICBsZXQgcGh4VHJpZ2dlckV4dGVybmFsID0gbGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9UUklHR0VSX0FDVElPTilcbiAgICBsZXQgcGh4UmVtb3ZlID0gbGl2ZVNvY2tldC5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgbGV0IGFkZGVkID0gW11cbiAgICBsZXQgdXBkYXRlcyA9IFtdXG4gICAgbGV0IGFwcGVuZFByZXBlbmRVcGRhdGVzID0gW11cbiAgICBsZXQgcGVuZGluZ1JlbW92ZXMgPSBbXVxuICAgIGxldCBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBudWxsXG5cbiAgICBsZXQgZGlmZkhUTUwgPSBsaXZlU29ja2V0LnRpbWUoXCJwcmVtb3JwaCBjb250YWluZXIgcHJlcFwiLCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsZERpZmZIVE1MKGNvbnRhaW5lciwgaHRtbCwgcGh4VXBkYXRlLCB0YXJnZXRDb250YWluZXIpXG4gICAgfSlcblxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBjb250YWluZXIpXG4gICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgY29udGFpbmVyLCBjb250YWluZXIpXG5cbiAgICBsaXZlU29ja2V0LnRpbWUoXCJtb3JwaGRvbVwiLCAoKSA9PiB7XG4gICAgICBtb3JwaGRvbSh0YXJnZXRDb250YWluZXIsIGRpZmZIVE1MLCB7XG4gICAgICAgIGNoaWxkcmVuT25seTogdGFyZ2V0Q29udGFpbmVyLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSA9PT0gbnVsbCxcbiAgICAgICAgZ2V0Tm9kZUtleTogKG5vZGUpID0+IHtcbiAgICAgICAgICByZXR1cm4gRE9NLmlzUGh4RGVzdHJveWVkKG5vZGUpID8gbnVsbCA6IG5vZGUuaWRcbiAgICAgICAgfSxcbiAgICAgICAgb25CZWZvcmVOb2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIHRoaXMudHJhY2tCZWZvcmUoXCJhZGRlZFwiLCBlbClcbiAgICAgICAgICByZXR1cm4gZWxcbiAgICAgICAgfSxcbiAgICAgICAgb25Ob2RlQWRkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIC8vIGhhY2sgdG8gZml4IFNhZmFyaSBoYW5kbGluZyBvZiBpbWcgc3Jjc2V0IGFuZCB2aWRlbyB0YWdzXG4gICAgICAgICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50ICYmIGVsLnNyY3NldCl7XG4gICAgICAgICAgICBlbC5zcmNzZXQgPSBlbC5zcmNzZXRcbiAgICAgICAgICB9IGVsc2UgaWYoZWwgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50ICYmIGVsLmF1dG9wbGF5KXtcbiAgICAgICAgICAgIGVsLnBsYXkoKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihET00uaXNOb3dUcmlnZ2VyRm9ybUV4dGVybmFsKGVsLCBwaHhUcmlnZ2VyRXh0ZXJuYWwpKXtcbiAgICAgICAgICAgIGV4dGVybmFsRm9ybVRyaWdnZXJlZCA9IGVsXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaW5wdXQgaGFuZGxpbmdcbiAgICAgICAgICBET00uZGlzY2FyZEVycm9yKHRhcmdldENvbnRhaW5lciwgZWwsIHBoeEZlZWRiYWNrRm9yKVxuICAgICAgICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgICAgICAgaWYoKERPTS5pc1BoeENoaWxkKGVsKSAmJiB2aWV3Lm93bnNFbGVtZW50KGVsKSkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSAmJiB2aWV3Lm93bnNFbGVtZW50KGVsLnBhcmVudE5vZGUpKXtcbiAgICAgICAgICAgIHRoaXMudHJhY2tBZnRlcihcInBoeENoaWxkQWRkZWRcIiwgZWwpXG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZGVkLnB1c2goZWwpXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZURpc2NhcmRlZDogKGVsKSA9PiB7XG4gICAgICAgICAgLy8gbmVzdGVkIHZpZXcgaGFuZGxpbmdcbiAgICAgICAgICBpZihET00uaXNQaHhDaGlsZChlbCkgfHwgRE9NLmlzUGh4U3RpY2t5KGVsKSl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGVsKSB9XG4gICAgICAgICAgdGhpcy50cmFja0FmdGVyKFwiZGlzY2FyZGVkXCIsIGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnROb2RlICE9PSBudWxsICYmIERPTS5pc1BoeFVwZGF0ZShlbC5wYXJlbnROb2RlLCBwaHhVcGRhdGUsIFtcImFwcGVuZFwiLCBcInByZXBlbmRcIl0pICYmIGVsLmlkKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZihlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKHBoeFJlbW92ZSkpe1xuICAgICAgICAgICAgcGVuZGluZ1JlbW92ZXMucHVzaChlbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0aGlzLnNraXBDSURTaWJsaW5nKGVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgb25FbFVwZGF0ZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlcy5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICAgIERPTS5jbGVhbkNoaWxkTm9kZXModG9FbCwgcGh4VXBkYXRlKVxuICAgICAgICAgIGlmKHRoaXMuc2tpcENJRFNpYmxpbmcodG9FbCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKERPTS5pc1BoeFN0aWNreShmcm9tRWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZihET00uaXNJZ25vcmVkKGZyb21FbCwgcGh4VXBkYXRlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtpc0lnbm9yZWQ6IHRydWV9KVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGZyb21FbC50eXBlID09PSBcIm51bWJlclwiICYmIChmcm9tRWwudmFsaWRpdHkgJiYgZnJvbUVsLnZhbGlkaXR5LmJhZElucHV0KSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYoIURPTS5zeW5jUGVuZGluZ1JlZihmcm9tRWwsIHRvRWwsIGRpc2FibGVXaXRoKSl7XG4gICAgICAgICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKERPTS5pc1BoeENoaWxkKHRvRWwpKXtcbiAgICAgICAgICAgIGxldCBwcmV2U2Vzc2lvbiA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pXG4gICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtleGNsdWRlOiBbUEhYX1NUQVRJQ119KVxuICAgICAgICAgICAgaWYocHJldlNlc3Npb24gIT09IFwiXCIpeyBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBwcmV2U2Vzc2lvbikgfVxuICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290SUQpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlucHV0IGhhbmRsaW5nXG4gICAgICAgICAgRE9NLmNvcHlQcml2YXRlcyh0b0VsLCBmcm9tRWwpXG4gICAgICAgICAgRE9NLmRpc2NhcmRFcnJvcih0YXJnZXRDb250YWluZXIsIHRvRWwsIHBoeEZlZWRiYWNrRm9yKVxuXG4gICAgICAgICAgbGV0IGlzRm9jdXNlZEZvcm1FbCA9IGZvY3VzZWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUoZm9jdXNlZCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbClcbiAgICAgICAgICBpZihpc0ZvY3VzZWRGb3JtRWwpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKGZyb21FbClcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihET00uaXNQaHhVcGRhdGUodG9FbCwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICAgIGFwcGVuZFByZXBlbmRVcGRhdGVzLnB1c2gobmV3IERPTVBvc3RNb3JwaFJlc3RvcmVyKGZyb21FbCwgdG9FbCwgdG9FbC5nZXRBdHRyaWJ1dGUocGh4VXBkYXRlKSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyh0b0VsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyh0b0VsKVxuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKGxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7IGRldGVjdER1cGxpY2F0ZUlkcygpIH1cblxuICAgIGlmKGFwcGVuZFByZXBlbmRVcGRhdGVzLmxlbmd0aCA+IDApe1xuICAgICAgbGl2ZVNvY2tldC50aW1lKFwicG9zdC1tb3JwaCBhcHBlbmQvcHJlcGVuZCByZXN0b3JhdGlvblwiLCAoKSA9PiB7XG4gICAgICAgIGFwcGVuZFByZXBlbmRVcGRhdGVzLmZvckVhY2godXBkYXRlID0+IHVwZGF0ZS5wZXJmb3JtKCkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGxpdmVTb2NrZXQuc2lsZW5jZUV2ZW50cygoKSA9PiBET00ucmVzdG9yZUZvY3VzKGZvY3VzZWQsIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpKVxuICAgIERPTS5kaXNwYXRjaEV2ZW50KGRvY3VtZW50LCBcInBoeDp1cGRhdGVcIilcbiAgICBhZGRlZC5mb3JFYWNoKGVsID0+IHRoaXMudHJhY2tBZnRlcihcImFkZGVkXCIsIGVsKSlcbiAgICB1cGRhdGVzLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwidXBkYXRlZFwiLCBlbCkpXG5cbiAgICBpZihwZW5kaW5nUmVtb3Zlcy5sZW5ndGggPiAwKXtcbiAgICAgIGxpdmVTb2NrZXQudHJhbnNpdGlvblJlbW92ZXMocGVuZGluZ1JlbW92ZXMpXG4gICAgICBsaXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBwZW5kaW5nUmVtb3Zlcy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBsZXQgY2hpbGQgPSBET00uZmlyc3RQaHhDaGlsZChlbClcbiAgICAgICAgICBpZihjaGlsZCl7IGxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGNoaWxkKSB9XG4gICAgICAgICAgZWwucmVtb3ZlKClcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy50cmFja0FmdGVyKFwidHJhbnNpdGlvbnNEaXNjYXJkZWRcIiwgcGVuZGluZ1JlbW92ZXMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmKGV4dGVybmFsRm9ybVRyaWdnZXJlZCl7XG4gICAgICBsaXZlU29ja2V0LmRpc2Nvbm5lY3QoKVxuICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkLnN1Ym1pdCgpXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpc0NJRFBhdGNoKCl7IHJldHVybiB0aGlzLmNpZFBhdGNoIH1cblxuICBza2lwQ0lEU2libGluZyhlbCl7XG4gICAgcmV0dXJuIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1NLSVApICE9PSBudWxsXG4gIH1cblxuICB0YXJnZXRDSURDb250YWluZXIoaHRtbCl7XG4gICAgaWYoIXRoaXMuaXNDSURQYXRjaCgpKXsgcmV0dXJuIH1cbiAgICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5jb250YWluZXIsIHRoaXMudGFyZ2V0Q0lEKVxuICAgIGlmKHJlc3QubGVuZ3RoID09PSAwICYmIERPTS5jaGlsZE5vZGVMZW5ndGgoaHRtbCkgPT09IDEpe1xuICAgICAgcmV0dXJuIGZpcnN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaXJzdCAmJiBmaXJzdC5wYXJlbnROb2RlXG4gICAgfVxuICB9XG5cbiAgLy8gYnVpbGRzIEhUTUwgZm9yIG1vcnBoZG9tIHBhdGNoXG4gIC8vIC0gZm9yIGZ1bGwgcGF0Y2hlcyBvZiBMaXZlVmlldyBvciBhIGNvbXBvbmVudCB3aXRoIGEgc2luZ2xlXG4gIC8vICAgcm9vdCBub2RlLCBzaW1wbHkgcmV0dXJucyB0aGUgSFRNTFxuICAvLyAtIGZvciBwYXRjaGVzIG9mIGEgY29tcG9uZW50IHdpdGggbXVsdGlwbGUgcm9vdCBub2RlcywgdGhlXG4gIC8vICAgcGFyZW50IG5vZGUgYmVjb21lcyB0aGUgdGFyZ2V0IGNvbnRhaW5lciBhbmQgbm9uLWNvbXBvbmVudFxuICAvLyAgIHNpYmxpbmdzIGFyZSBtYXJrZWQgYXMgc2tpcC5cbiAgYnVpbGREaWZmSFRNTChjb250YWluZXIsIGh0bWwsIHBoeFVwZGF0ZSwgdGFyZ2V0Q29udGFpbmVyKXtcbiAgICBsZXQgaXNDSURQYXRjaCA9IHRoaXMuaXNDSURQYXRjaCgpXG4gICAgbGV0IGlzQ0lEV2l0aFNpbmdsZVJvb3QgPSBpc0NJRFBhdGNoICYmIHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IHRoaXMudGFyZ2V0Q0lELnRvU3RyaW5nKClcbiAgICBpZighaXNDSURQYXRjaCB8fCBpc0NJRFdpdGhTaW5nbGVSb290KXtcbiAgICAgIHJldHVybiBodG1sXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbXBvbmVudCBwYXRjaCB3aXRoIG11bHRpcGxlIENJRCByb290c1xuICAgICAgbGV0IGRpZmZDb250YWluZXIgPSBudWxsXG4gICAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICAgIGRpZmZDb250YWluZXIgPSBET00uY2xvbmVOb2RlKHRhcmdldENvbnRhaW5lcilcbiAgICAgIGxldCBbZmlyc3RDb21wb25lbnQsIC4uLnJlc3RdID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdChkaWZmQ29udGFpbmVyLCB0aGlzLnRhcmdldENJRClcbiAgICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICAgIHJlc3QuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSlcbiAgICAgIEFycmF5LmZyb20oZGlmZkNvbnRhaW5lci5jaGlsZE5vZGVzKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgLy8gd2UgY2FuIG9ubHkgc2tpcCB0cmFja2FibGUgbm9kZXMgd2l0aCBhbiBJRFxuICAgICAgICBpZihjaGlsZC5pZCAmJiBjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgY2hpbGQuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpICE9PSB0aGlzLnRhcmdldENJRC50b1N0cmluZygpKXtcbiAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoUEhYX1NLSVAsIFwiXCIpXG4gICAgICAgICAgY2hpbGQuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgQXJyYXkuZnJvbSh0ZW1wbGF0ZS5jb250ZW50LmNoaWxkTm9kZXMpLmZvckVhY2goZWwgPT4gZGlmZkNvbnRhaW5lci5pbnNlcnRCZWZvcmUoZWwsIGZpcnN0Q29tcG9uZW50KSlcbiAgICAgIGZpcnN0Q29tcG9uZW50LnJlbW92ZSgpXG4gICAgICByZXR1cm4gZGlmZkNvbnRhaW5lci5vdXRlckhUTUxcbiAgICB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBDT01QT05FTlRTLFxuICBEWU5BTUlDUyxcbiAgVEVNUExBVEVTLFxuICBFVkVOVFMsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9TS0lQLFxuICBSRVBMWSxcbiAgU1RBVElDLFxuICBUSVRMRVxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBpc09iamVjdCxcbiAgbG9nRXJyb3IsXG4gIGlzQ2lkLFxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVkIHtcbiAgc3RhdGljIGV4dHJhY3QoZGlmZil7XG4gICAgbGV0IHtbUkVQTFldOiByZXBseSwgW0VWRU5UU106IGV2ZW50cywgW1RJVExFXTogdGl0bGV9ID0gZGlmZlxuICAgIGRlbGV0ZSBkaWZmW1JFUExZXVxuICAgIGRlbGV0ZSBkaWZmW0VWRU5UU11cbiAgICBkZWxldGUgZGlmZltUSVRMRV1cbiAgICByZXR1cm4ge2RpZmYsIHRpdGxlLCByZXBseTogcmVwbHkgfHwgbnVsbCwgZXZlbnRzOiBldmVudHMgfHwgW119XG4gIH1cblxuICBjb25zdHJ1Y3Rvcih2aWV3SWQsIHJlbmRlcmVkKXtcbiAgICB0aGlzLnZpZXdJZCA9IHZpZXdJZFxuICAgIHRoaXMucmVuZGVyZWQgPSB7fVxuICAgIHRoaXMubWVyZ2VEaWZmKHJlbmRlcmVkKVxuICB9XG5cbiAgcGFyZW50Vmlld0lkKCl7IHJldHVybiB0aGlzLnZpZXdJZCB9XG5cbiAgdG9TdHJpbmcob25seUNpZHMpe1xuICAgIHJldHVybiB0aGlzLnJlY3Vyc2l2ZVRvU3RyaW5nKHRoaXMucmVuZGVyZWQsIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIG9ubHlDaWRzKVxuICB9XG5cbiAgcmVjdXJzaXZlVG9TdHJpbmcocmVuZGVyZWQsIGNvbXBvbmVudHMgPSByZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMpe1xuICAgIG9ubHlDaWRzID0gb25seUNpZHMgPyBuZXcgU2V0KG9ubHlDaWRzKSA6IG51bGxcbiAgICBsZXQgb3V0cHV0ID0ge2J1ZmZlcjogXCJcIiwgY29tcG9uZW50czogY29tcG9uZW50cywgb25seUNpZHM6IG9ubHlDaWRzfVxuICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIG51bGwsIG91dHB1dClcbiAgICByZXR1cm4gb3V0cHV0LmJ1ZmZlclxuICB9XG5cbiAgY29tcG9uZW50Q0lEcyhkaWZmKXsgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmZbQ09NUE9ORU5UU10gfHwge30pLm1hcChpID0+IHBhcnNlSW50KGkpKSB9XG5cbiAgaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKXtcbiAgICBpZighZGlmZltDT01QT05FTlRTXSl7IHJldHVybiBmYWxzZSB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRpZmYpLmxlbmd0aCA9PT0gMVxuICB9XG5cbiAgZ2V0Q29tcG9uZW50KGRpZmYsIGNpZCl7IHJldHVybiBkaWZmW0NPTVBPTkVOVFNdW2NpZF0gfVxuXG4gIG1lcmdlRGlmZihkaWZmKXtcbiAgICBsZXQgbmV3YyA9IGRpZmZbQ09NUE9ORU5UU11cbiAgICBsZXQgY2FjaGUgPSB7fVxuICAgIGRlbGV0ZSBkaWZmW0NPTVBPTkVOVFNdXG4gICAgdGhpcy5yZW5kZXJlZCA9IHRoaXMubXV0YWJsZU1lcmdlKHRoaXMucmVuZGVyZWQsIGRpZmYpXG4gICAgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10gfHwge31cblxuICAgIGlmKG5ld2Mpe1xuICAgICAgbGV0IG9sZGMgPSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdXG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2Mpe1xuICAgICAgICBuZXdjW2NpZF0gPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoY2lkLCBuZXdjW2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgfVxuXG4gICAgICBmb3IobGV0IGNpZCBpbiBuZXdjKXsgb2xkY1tjaWRdID0gbmV3Y1tjaWRdIH1cbiAgICAgIGRpZmZbQ09NUE9ORU5UU10gPSBuZXdjXG4gICAgfVxuICB9XG5cbiAgY2FjaGVkRmluZENvbXBvbmVudChjaWQsIGNkaWZmLCBvbGRjLCBuZXdjLCBjYWNoZSl7XG4gICAgaWYoY2FjaGVbY2lkXSl7XG4gICAgICByZXR1cm4gY2FjaGVbY2lkXVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmRpZmYsIHN0YXQsIHNjaWQgPSBjZGlmZltTVEFUSUNdXG5cbiAgICAgIGlmKGlzQ2lkKHNjaWQpKXtcbiAgICAgICAgbGV0IHRkaWZmXG5cbiAgICAgICAgaWYoc2NpZCA+IDApe1xuICAgICAgICAgIHRkaWZmID0gdGhpcy5jYWNoZWRGaW5kQ29tcG9uZW50KHNjaWQsIG5ld2Nbc2NpZF0sIG9sZGMsIG5ld2MsIGNhY2hlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRkaWZmID0gb2xkY1stc2NpZF1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXQgPSB0ZGlmZltTVEFUSUNdXG4gICAgICAgIG5kaWZmID0gdGhpcy5jbG9uZU1lcmdlKHRkaWZmLCBjZGlmZilcbiAgICAgICAgbmRpZmZbU1RBVElDXSA9IHN0YXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5kaWZmID0gY2RpZmZbU1RBVElDXSAhPT0gdW5kZWZpbmVkID8gY2RpZmYgOiB0aGlzLmNsb25lTWVyZ2Uob2xkY1tjaWRdIHx8IHt9LCBjZGlmZilcbiAgICAgIH1cblxuICAgICAgY2FjaGVbY2lkXSA9IG5kaWZmXG4gICAgICByZXR1cm4gbmRpZmZcbiAgICB9XG4gIH1cblxuICBtdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtTVEFUSUNdICE9PSB1bmRlZmluZWQpe1xuICAgICAgcmV0dXJuIHNvdXJjZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKVxuICAgICAgcmV0dXJuIHRhcmdldFxuICAgIH1cbiAgfVxuXG4gIGRvTXV0YWJsZU1lcmdlKHRhcmdldCwgc291cmNlKXtcbiAgICBmb3IobGV0IGtleSBpbiBzb3VyY2Upe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGlmKGlzT2JqZWN0KHZhbCkgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXRWYWwsIHZhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xvbmVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgbGV0IG1lcmdlZCA9IHsuLi50YXJnZXQsIC4uLnNvdXJjZX1cbiAgICBmb3IobGV0IGtleSBpbiBtZXJnZWQpe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGlmKGlzT2JqZWN0KHZhbCkgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSB0aGlzLmNsb25lTWVyZ2UodGFyZ2V0VmFsLCB2YWwpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWRcbiAgfVxuXG4gIGNvbXBvbmVudFRvU3RyaW5nKGNpZCl7IHJldHVybiB0aGlzLnJlY3Vyc2l2ZUNJRFRvU3RyaW5nKHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIGNpZCkgfVxuXG4gIHBydW5lQ0lEcyhjaWRzKXtcbiAgICBjaWRzLmZvckVhY2goY2lkID0+IGRlbGV0ZSB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdW2NpZF0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgZ2V0KCl7IHJldHVybiB0aGlzLnJlbmRlcmVkIH1cblxuICBpc05ld0ZpbmdlcnByaW50KGRpZmYgPSB7fSl7IHJldHVybiAhIWRpZmZbU1RBVElDXSB9XG5cbiAgdGVtcGxhdGVTdGF0aWMocGFydCwgdGVtcGxhdGVzKXtcbiAgICBpZih0eXBlb2YgKHBhcnQpID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVzW3BhcnRdXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJ0XG4gICAgfVxuICB9XG5cbiAgdG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBpZihyZW5kZXJlZFtEWU5BTUlDU10peyByZXR1cm4gdGhpcy5jb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KSB9XG4gICAgbGV0IHtbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcblxuICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1swXVxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCBzdGF0aWNzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkW2kgLSAxXSwgdGVtcGxhdGVzLCBvdXRwdXQpXG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbaV1cbiAgICB9XG4gIH1cblxuICBjb21wcmVoZW5zaW9uVG9CdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KXtcbiAgICBsZXQge1tEWU5BTUlDU106IGR5bmFtaWNzLCBbU1RBVElDXTogc3RhdGljc30gPSByZW5kZXJlZFxuICAgIHN0YXRpY3MgPSB0aGlzLnRlbXBsYXRlU3RhdGljKHN0YXRpY3MsIHRlbXBsYXRlcylcbiAgICBsZXQgY29tcFRlbXBsYXRlcyA9IHRlbXBsYXRlcyB8fCByZW5kZXJlZFtURU1QTEFURVNdXG5cbiAgICBmb3IobGV0IGQgPSAwOyBkIDwgZHluYW1pY3MubGVuZ3RoOyBkKyspe1xuICAgICAgbGV0IGR5bmFtaWMgPSBkeW5hbWljc1tkXVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKGR5bmFtaWNbaSAtIDFdLCBjb21wVGVtcGxhdGVzLCBvdXRwdXQpXG4gICAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZCwgdGVtcGxhdGVzLCBvdXRwdXQpe1xuICAgIGlmKHR5cGVvZiAocmVuZGVyZWQpID09PSBcIm51bWJlclwiKXtcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyhvdXRwdXQuY29tcG9uZW50cywgcmVuZGVyZWQsIG91dHB1dC5vbmx5Q2lkcylcbiAgICB9IGVsc2UgaWYoaXNPYmplY3QocmVuZGVyZWQpKXtcbiAgICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHJlbmRlcmVkXG4gICAgfVxuICB9XG5cbiAgcmVjdXJzaXZlQ0lEVG9TdHJpbmcoY29tcG9uZW50cywgY2lkLCBvbmx5Q2lkcyl7XG4gICAgbGV0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbY2lkXSB8fCBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvciBDSUQgJHtjaWR9YCwgY29tcG9uZW50cylcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0aGlzLnJlY3Vyc2l2ZVRvU3RyaW5nKGNvbXBvbmVudCwgY29tcG9uZW50cywgb25seUNpZHMpXG4gICAgbGV0IGNvbnRhaW5lciA9IHRlbXBsYXRlLmNvbnRlbnRcbiAgICBsZXQgc2tpcCA9IG9ubHlDaWRzICYmICFvbmx5Q2lkcy5oYXMoY2lkKVxuXG4gICAgbGV0IFtoYXNDaGlsZE5vZGVzLCBoYXNDaGlsZENvbXBvbmVudHNdID1cbiAgICAgIEFycmF5LmZyb20oY29udGFpbmVyLmNoaWxkTm9kZXMpLnJlZHVjZSgoW2hhc05vZGVzLCBoYXNDb21wb25lbnRzXSwgY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKXtcbiAgICAgICAgICBpZihjaGlsZC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkpe1xuICAgICAgICAgICAgcmV0dXJuIFtoYXNOb2RlcywgdHJ1ZV1cbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQsIGNpZClcbiAgICAgICAgICBpZighY2hpbGQuaWQpeyBjaGlsZC5pZCA9IGAke3RoaXMucGFyZW50Vmlld0lkKCl9LSR7Y2lkfS0ke2l9YCB9XG4gICAgICAgICAgaWYoc2tpcCl7XG4gICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoUEhYX1NLSVAsIFwiXCIpXG4gICAgICAgICAgICBjaGlsZC5pbm5lckhUTUwgPSBcIlwiXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbdHJ1ZSwgaGFzQ29tcG9uZW50c11cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZihjaGlsZC5ub2RlVmFsdWUudHJpbSgpICE9PSBcIlwiKXtcbiAgICAgICAgICAgIGxvZ0Vycm9yKFwib25seSBIVE1MIGVsZW1lbnQgdGFncyBhcmUgYWxsb3dlZCBhdCB0aGUgcm9vdCBvZiBjb21wb25lbnRzLlxcblxcblwiICtcbiAgICAgICAgICAgICAgYGdvdDogXCIke2NoaWxkLm5vZGVWYWx1ZS50cmltKCl9XCJcXG5cXG5gICtcbiAgICAgICAgICAgICAgXCJ3aXRoaW46XFxuXCIsIHRlbXBsYXRlLmlubmVySFRNTC50cmltKCkpXG4gICAgICAgICAgICBjaGlsZC5yZXBsYWNlV2l0aCh0aGlzLmNyZWF0ZVNwYW4oY2hpbGQubm9kZVZhbHVlLCBjaWQpKVxuICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBoYXNDb21wb25lbnRzXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGlsZC5yZW1vdmUoKVxuICAgICAgICAgICAgcmV0dXJuIFtoYXNOb2RlcywgaGFzQ29tcG9uZW50c11cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIFtmYWxzZSwgZmFsc2VdKVxuXG4gICAgaWYoIWhhc0NoaWxkTm9kZXMgJiYgIWhhc0NoaWxkQ29tcG9uZW50cyl7XG4gICAgICBsb2dFcnJvcihcImV4cGVjdGVkIGF0IGxlYXN0IG9uZSBIVE1MIGVsZW1lbnQgdGFnIGluc2lkZSBhIGNvbXBvbmVudCwgYnV0IHRoZSBjb21wb25lbnQgaXMgZW1wdHk6XFxuXCIsXG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTC50cmltKCkpXG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVTcGFuKFwiXCIsIGNpZCkub3V0ZXJIVE1MXG4gICAgfSBlbHNlIGlmKCFoYXNDaGlsZE5vZGVzICYmIGhhc0NoaWxkQ29tcG9uZW50cyl7XG4gICAgICBsb2dFcnJvcihcImV4cGVjdGVkIGF0IGxlYXN0IG9uZSBIVE1MIGVsZW1lbnQgdGFnIGRpcmVjdGx5IGluc2lkZSBhIGNvbXBvbmVudCwgYnV0IG9ubHkgc3ViY29tcG9uZW50cyB3ZXJlIGZvdW5kLiBBIGNvbXBvbmVudCBtdXN0IHJlbmRlciBhdCBsZWFzdCBvbmUgSFRNTCB0YWcgZGlyZWN0bHkgaW5zaWRlIGl0c2VsZi5cIixcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MLnRyaW0oKSlcbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5pbm5lckhUTUxcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlLmlubmVySFRNTFxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZVNwYW4odGV4dCwgY2lkKXtcbiAgICBsZXQgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gICAgc3Bhbi5pbm5lclRleHQgPSB0ZXh0XG4gICAgc3Bhbi5zZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCwgY2lkKVxuICAgIHJldHVybiBzcGFuXG4gIH1cbn1cbiIsICJsZXQgdmlld0hvb2tJRCA9IDFcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXdIb29rIHtcbiAgc3RhdGljIG1ha2VJRCgpeyByZXR1cm4gdmlld0hvb2tJRCsrIH1cbiAgc3RhdGljIGVsZW1lbnRJRChlbCl7IHJldHVybiBlbC5waHhIb29rSWQgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGVsLCBjYWxsYmFja3Mpe1xuICAgIHRoaXMuX192aWV3ID0gdmlld1xuICAgIHRoaXMuX19saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgdGhpcy5fX2NhbGxiYWNrcyA9IGNhbGxiYWNrc1xuICAgIHRoaXMuX19saXN0ZW5lcnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuZWwucGh4SG9va0lkID0gdGhpcy5jb25zdHJ1Y3Rvci5tYWtlSUQoKVxuICAgIGZvcihsZXQga2V5IGluIHRoaXMuX19jYWxsYmFja3MpeyB0aGlzW2tleV0gPSB0aGlzLl9fY2FsbGJhY2tzW2tleV0gfVxuICB9XG5cbiAgX19tb3VudGVkKCl7IHRoaXMubW91bnRlZCAmJiB0aGlzLm1vdW50ZWQoKSB9XG4gIF9fdXBkYXRlZCgpeyB0aGlzLnVwZGF0ZWQgJiYgdGhpcy51cGRhdGVkKCkgfVxuICBfX2JlZm9yZVVwZGF0ZSgpeyB0aGlzLmJlZm9yZVVwZGF0ZSAmJiB0aGlzLmJlZm9yZVVwZGF0ZSgpIH1cbiAgX19kZXN0cm95ZWQoKXsgdGhpcy5kZXN0cm95ZWQgJiYgdGhpcy5kZXN0cm95ZWQoKSB9XG4gIF9fcmVjb25uZWN0ZWQoKXtcbiAgICBpZih0aGlzLl9faXNEaXNjb25uZWN0ZWQpe1xuICAgICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gZmFsc2VcbiAgICAgIHRoaXMucmVjb25uZWN0ZWQgJiYgdGhpcy5yZWNvbm5lY3RlZCgpXG4gICAgfVxuICB9XG4gIF9fZGlzY29ubmVjdGVkKCl7XG4gICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gdHJ1ZVxuICAgIHRoaXMuZGlzY29ubmVjdGVkICYmIHRoaXMuZGlzY29ubmVjdGVkKClcbiAgfVxuXG4gIHB1c2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy5wdXNoSG9va0V2ZW50KG51bGwsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KVxuICB9XG5cbiAgcHVzaEV2ZW50VG8ocGh4VGFyZ2V0LCBldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgcmV0dXJuIHZpZXcucHVzaEhvb2tFdmVudCh0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCBjYWxsYmFja1JlZiA9IChjdXN0b21FdmVudCwgYnlwYXNzKSA9PiBieXBhc3MgPyBldmVudCA6IGNhbGxiYWNrKGN1c3RvbUV2ZW50LmRldGFpbClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5hZGQoY2FsbGJhY2tSZWYpXG4gICAgcmV0dXJuIGNhbGxiYWNrUmVmXG4gIH1cblxuICByZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZil7XG4gICAgbGV0IGV2ZW50ID0gY2FsbGJhY2tSZWYobnVsbCwgdHJ1ZSlcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5kZWxldGUoY2FsbGJhY2tSZWYpXG4gIH1cblxuICB1cGxvYWQobmFtZSwgZmlsZXMpe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy5kaXNwYXRjaFVwbG9hZHMobmFtZSwgZmlsZXMpXG4gIH1cblxuICB1cGxvYWRUbyhwaHhUYXJnZXQsIG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIHZpZXcgPT4gdmlldy5kaXNwYXRjaFVwbG9hZHMobmFtZSwgZmlsZXMpKVxuICB9XG5cbiAgX19jbGVhbnVwX18oKXtcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmZvckVhY2goY2FsbGJhY2tSZWYgPT4gdGhpcy5yZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZikpXG4gIH1cbn1cbiIsICJpbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5cbmxldCBKUyA9IHtcbiAgZXhlYyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZGVmYXVsdHMpe1xuICAgIGxldCBbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXSA9IGRlZmF1bHRzIHx8IFtudWxsLCB7fV1cbiAgICBsZXQgY29tbWFuZHMgPSBwaHhFdmVudC5jaGFyQXQoMCkgPT09IFwiW1wiID9cbiAgICAgIEpTT04ucGFyc2UocGh4RXZlbnQpIDogW1tkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdXVxuXG4gICAgY29tbWFuZHMuZm9yRWFjaCgoW2tpbmQsIGFyZ3NdKSA9PiB7XG4gICAgICBpZihraW5kID09PSBkZWZhdWx0S2luZCAmJiBkZWZhdWx0QXJncy5kYXRhKXtcbiAgICAgICAgYXJncy5kYXRhID0gT2JqZWN0LmFzc2lnbihhcmdzLmRhdGEgfHwge30sIGRlZmF1bHRBcmdzLmRhdGEpXG4gICAgICB9XG4gICAgICB0aGlzLmZpbHRlclRvRWxzKHNvdXJjZUVsLCBhcmdzKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgdGhpc1tgZXhlY18ke2tpbmR9YF0oZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGlzVmlzaWJsZShlbCl7XG4gICAgcmV0dXJuICEhKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDApXG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIC8vIGNvbW1hbmRzXG5cbiAgZXhlY19kaXNwYXRjaChldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0bywgZXZlbnQsIGRldGFpbH0pe1xuICAgIERPTS5kaXNwYXRjaEV2ZW50KGVsLCBldmVudCwgZGV0YWlsKVxuICB9LFxuXG4gIGV4ZWNfcHVzaChldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIGFyZ3Mpe1xuICAgIGxldCB7ZXZlbnQsIGRhdGEsIHRhcmdldCwgcGFnZV9sb2FkaW5nLCBsb2FkaW5nLCB2YWx1ZX0gPSBhcmdzXG4gICAgbGV0IHB1c2hPcHRzID0ge2xvYWRpbmcsIHZhbHVlLCB0YXJnZXQsIHBhZ2VfbG9hZGluZzogISFwYWdlX2xvYWRpbmd9XG4gICAgbGV0IHRhcmdldFNyYyA9IGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIiA/IHNvdXJjZUVsLmZvcm0gOiBzb3VyY2VFbFxuICAgIGxldCBwaHhUYXJnZXQgPSB0YXJnZXQgfHwgdGFyZ2V0U3JjLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoXCJ0YXJnZXRcIikpIHx8IHRhcmdldFNyY1xuICAgIHZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsICh0YXJnZXRWaWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIil7XG4gICAgICAgIGxldCB7bmV3Q2lkLCBfdGFyZ2V0LCBjYWxsYmFja30gPSBhcmdzXG4gICAgICAgIGlmKF90YXJnZXQpeyBwdXNoT3B0cy5fdGFyZ2V0ID0gX3RhcmdldCB9XG4gICAgICAgIHRhcmdldFZpZXcucHVzaElucHV0KHNvdXJjZUVsLCB0YXJnZXRDdHgsIG5ld0NpZCwgZXZlbnQgfHwgcGh4RXZlbnQsIHB1c2hPcHRzLCBjYWxsYmFjaylcbiAgICAgIH0gZWxzZSBpZihldmVudFR5cGUgPT09IFwic3VibWl0XCIpe1xuICAgICAgICB0YXJnZXRWaWV3LnN1Ym1pdEZvcm0oc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIHB1c2hPcHRzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0Vmlldy5wdXNoRXZlbnQoZXZlbnRUeXBlLCBzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBldmVudCB8fCBwaHhFdmVudCwgZGF0YSwgcHVzaE9wdHMpXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICBleGVjX2FkZF9jbGFzcyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtuYW1lcywgdHJhbnNpdGlvbiwgdGltZX0pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBuYW1lcywgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpXG4gIH0sXG5cbiAgZXhlY19yZW1vdmVfY2xhc3MoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIG5hbWVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KVxuICB9LFxuXG4gIGV4ZWNfdHJhbnNpdGlvbihldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHt0aW1lLCB0cmFuc2l0aW9ufSl7XG4gICAgbGV0IFt0cmFuc2l0aW9uX3N0YXJ0LCBydW5uaW5nLCB0cmFuc2l0aW9uX2VuZF0gPSB0cmFuc2l0aW9uXG4gICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvbl9zdGFydC5jb25jYXQocnVubmluZyksIFtdKVxuICAgIGxldCBvbkRvbmUgPSAoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvbl9lbmQsIHRyYW5zaXRpb25fc3RhcnQuY29uY2F0KHJ1bm5pbmcpKVxuICAgIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH0sXG5cbiAgZXhlY190b2dnbGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lfSl7XG4gICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lKVxuICB9LFxuXG4gIGV4ZWNfc2hvdyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lfSl7XG4gICAgdGhpcy5zaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUpXG4gIH0sXG5cbiAgZXhlY19oaWRlKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmhpZGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSlcbiAgfSxcblxuICBleGVjX3NldF9hdHRyKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWxdfSl7XG4gICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbF1dLCBbXSlcbiAgfSxcblxuICBleGVjX3JlbW92ZV9hdHRyKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHJ9KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pXG4gIH0sXG5cbiAgLy8gdXRpbHMgZm9yIGNvbW1hbmRzXG5cbiAgc2hvdyhldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKXtcbiAgICBpZighdGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIG51bGwsIHRpbWUpXG4gICAgfVxuICB9LFxuXG4gIGhpZGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSl7XG4gICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIG51bGwsIHRyYW5zaXRpb24sIHRpbWUpXG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUpe1xuICAgIGxldCBbaW5DbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcywgaW5FbmRDbGFzc2VzXSA9IGlucyB8fCBbW10sIFtdLCBbXV1cbiAgICBsZXQgW291dENsYXNzZXMsIG91dFN0YXJ0Q2xhc3Nlcywgb3V0RW5kQ2xhc3Nlc10gPSBvdXRzIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKGluQ2xhc3Nlcy5sZW5ndGggPiAwIHx8IG91dENsYXNzZXMubGVuZ3RoID4gMCl7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0U3RhcnRDbGFzc2VzLCBpbkNsYXNzZXMuY29uY2F0KGluU3RhcnRDbGFzc2VzKS5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRDbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dEVuZENsYXNzZXMsIG91dFN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgb3V0Q2xhc3Nlcy5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihldmVudFR5cGUgPT09IFwicmVtb3ZlXCIpeyByZXR1cm4gfVxuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5TdGFydENsYXNzZXMsIG91dENsYXNzZXMuY29uY2F0KG91dFN0YXJ0Q2xhc3NlcykuY29uY2F0KG91dEVuZENsYXNzZXMpKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IChkaXNwbGF5IHx8IFwiYmxvY2tcIikpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5DbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluRW5kQ2xhc3NlcywgaW5TdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1zdGFydFwiKSlcbiAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIGluQ2xhc3Nlcy5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheSB8fCBcImJsb2NrXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgYWRkcywgcmVtb3ZlcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldyl7XG4gICAgbGV0IFt0cmFuc2l0aW9uX3J1biwgdHJhbnNpdGlvbl9zdGFydCwgdHJhbnNpdGlvbl9lbmRdID0gdHJhbnNpdGlvbiB8fCBbW10sIFtdLCBbXV1cbiAgICBpZih0cmFuc2l0aW9uX3J1bi5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBvblN0YXJ0ID0gKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIHRyYW5zaXRpb25fc3RhcnQuY29uY2F0KHRyYW5zaXRpb25fcnVuKSwgW10pXG4gICAgICBsZXQgb25Eb25lID0gKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGFkZHMuY29uY2F0KHRyYW5zaXRpb25fZW5kKSwgcmVtb3Zlcy5jb25jYXQodHJhbnNpdGlvbl9ydW4pLmNvbmNhdCh0cmFuc2l0aW9uX3N0YXJ0KSlcbiAgICAgIHJldHVybiB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGxldCBbcHJldkFkZHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiY2xhc3Nlc1wiLCBbW10sIFtdXSlcbiAgICAgIGxldCBrZWVwQWRkcyA9IGFkZHMuZmlsdGVyKG5hbWUgPT4gcHJldkFkZHMuaW5kZXhPZihuYW1lKSA8IDAgJiYgIWVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSlcbiAgICAgIGxldCBrZWVwUmVtb3ZlcyA9IHJlbW92ZXMuZmlsdGVyKG5hbWUgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDAgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IG5ld0FkZHMgPSBwcmV2QWRkcy5maWx0ZXIobmFtZSA9PiByZW1vdmVzLmluZGV4T2YobmFtZSkgPCAwKS5jb25jYXQoa2VlcEFkZHMpXG4gICAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcihuYW1lID0+IGFkZHMuaW5kZXhPZihuYW1lKSA8IDApLmNvbmNhdChrZWVwUmVtb3ZlcylcblxuICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLm5ld1JlbW92ZXMpXG4gICAgICAgIGN1cnJlbnRFbC5jbGFzc0xpc3QuYWRkKC4uLm5ld0FkZHMpXG4gICAgICAgIHJldHVybiBbbmV3QWRkcywgbmV3UmVtb3Zlc11cbiAgICAgIH0pXG4gICAgfSlcbiAgfSxcblxuICBzZXRPclJlbW92ZUF0dHJzKGVsLCBzZXRzLCByZW1vdmVzKXtcbiAgICBsZXQgW3ByZXZTZXRzLCBwcmV2UmVtb3Zlc10gPSBET00uZ2V0U3RpY2t5KGVsLCBcImF0dHJzXCIsIFtbXSwgW11dKVxuICAgIGxldCBrZWVwU2V0cyA9IHNldHMuZmlsdGVyKChbYXR0ciwgX3ZhbF0pID0+ICF0aGlzLmhhc1NldChwcmV2U2V0cywgYXR0cikgJiYgIWVsLmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKGF0dHIpKVxuICAgIGxldCBrZWVwUmVtb3ZlcyA9IHJlbW92ZXMuZmlsdGVyKGF0dHIgPT4gcHJldlJlbW92ZXMuaW5kZXhPZihhdHRyKSA8IDAgJiYgZWwuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oYXR0cikpXG4gICAgbGV0IG5ld1NldHMgPSBwcmV2U2V0cy5maWx0ZXIoKFthdHRyLCBfdmFsXSkgPT4gcmVtb3Zlcy5pbmRleE9mKGF0dHIpIDwgMCkuY29uY2F0KGtlZXBTZXRzKVxuICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKGF0dHIgPT4gIXRoaXMuaGFzU2V0KHNldHMsIGF0dHIpKS5jb25jYXQoa2VlcFJlbW92ZXMpXG5cbiAgICBET00ucHV0U3RpY2t5KGVsLCBcImF0dHJzXCIsIGN1cnJlbnRFbCA9PiB7XG4gICAgICBuZXdSZW1vdmVzLmZvckVhY2goYXR0ciA9PiBjdXJyZW50RWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpKVxuICAgICAgbmV3U2V0cy5mb3JFYWNoKChbYXR0ciwgdmFsXSkgPT4gY3VycmVudEVsLnNldEF0dHJpYnV0ZShhdHRyLCB2YWwpKVxuICAgICAgcmV0dXJuIFtuZXdTZXRzLCBuZXdSZW1vdmVzXVxuICAgIH0pXG4gIH0sXG5cbiAgaGFzU2V0KHNldHMsIG5hbWVTZWFyY2gpeyByZXR1cm4gc2V0cy5maW5kKChbbmFtZSwgdmFsXSkgPT4gbmFtZSA9PT0gbmFtZVNlYXJjaCkgfSxcblxuICBoYXNBbGxDbGFzc2VzKGVsLCBjbGFzc2VzKXsgcmV0dXJuIGNsYXNzZXMuZXZlcnkobmFtZSA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpIH0sXG5cbiAgaXNUb2dnbGVkT3V0KGVsLCBvdXRDbGFzc2VzKXtcbiAgICByZXR1cm4gIXRoaXMuaXNWaXNpYmxlKGVsKSB8fCB0aGlzLmhhc0FsbENsYXNzZXMoZWwsIG91dENsYXNzZXMpXG4gIH0sXG5cbiAgZmlsdGVyVG9FbHMoc291cmNlRWwsIHt0b30pe1xuICAgIHJldHVybiB0byA/IERPTS5hbGwoZG9jdW1lbnQsIHRvKSA6IFtzb3VyY2VFbF1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBKU1xuIiwgImltcG9ydCB7XG4gIEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQsXG4gIENIRUNLQUJMRV9JTlBVVFMsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIFBIWF9BVVRPX1JFQ09WRVIsXG4gIFBIWF9DT01QT05FTlQsXG4gIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gIFBIWF9ESVNBQkxFX1dJVEgsXG4gIFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSxcbiAgUEhYX0RJU0FCTEVELFxuICBQSFhfRElTQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRVZFTlRfQ0xBU1NFUyxcbiAgUEhYX0VSUk9SX0NMQVNTLFxuICBQSFhfRkVFREJBQ0tfRk9SLFxuICBQSFhfSEFTX1NVQk1JVFRFRCxcbiAgUEhYX0hPT0ssXG4gIFBIWF9QQUdFX0xPQURJTkcsXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUk9HUkVTUyxcbiAgUEhYX1JFQURPTkxZLFxuICBQSFhfUkVGLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJBQ0tfU1RBVElDLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1VQREFURSxcbiAgUEhYX1VQTE9BRF9SRUYsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQVVNIX1RJTUVPVVQsXG4gIFBIWF9NQUlOLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGlzRW1wdHksXG4gIGlzRXF1YWxPYmosXG4gIGxvZ0Vycm9yLFxuICBtYXliZSxcbiAgaXNDaWQsXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUGF0Y2ggZnJvbSBcIi4vZG9tX3BhdGNoXCJcbmltcG9ydCBMaXZlVXBsb2FkZXIgZnJvbSBcIi4vbGl2ZV91cGxvYWRlclwiXG5pbXBvcnQgUmVuZGVyZWQgZnJvbSBcIi4vcmVuZGVyZWRcIlxuaW1wb3J0IFZpZXdIb29rIGZyb20gXCIuL3ZpZXdfaG9va1wiXG5pbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuXG5sZXQgc2VyaWFsaXplRm9ybSA9IChmb3JtLCBtZXRhID0ge30pID0+IHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pXG4gIGxldCB0b1JlbW92ZSA9IFtdXG5cbiAgZm9ybURhdGEuZm9yRWFjaCgodmFsLCBrZXksIF9pbmRleCkgPT4ge1xuICAgIGlmKHZhbCBpbnN0YW5jZW9mIEZpbGUpeyB0b1JlbW92ZS5wdXNoKGtleSkgfVxuICB9KVxuXG4gIC8vIENsZWFudXAgYWZ0ZXIgYnVpbGRpbmcgZmlsZURhdGFcbiAgdG9SZW1vdmUuZm9yRWFjaChrZXkgPT4gZm9ybURhdGEuZGVsZXRlKGtleSkpXG5cbiAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICBmb3IobGV0IFtrZXksIHZhbF0gb2YgZm9ybURhdGEuZW50cmllcygpKXsgcGFyYW1zLmFwcGVuZChrZXksIHZhbCkgfVxuICBmb3IobGV0IG1ldGFLZXkgaW4gbWV0YSl7IHBhcmFtcy5hcHBlbmQobWV0YUtleSwgbWV0YVttZXRhS2V5XSkgfVxuXG4gIHJldHVybiBwYXJhbXMudG9TdHJpbmcoKVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcbiAgY29uc3RydWN0b3IoZWwsIGxpdmVTb2NrZXQsIHBhcmVudFZpZXcsIGZsYXNoKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG4gICAgdGhpcy5mbGFzaCA9IGZsYXNoXG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRWaWV3XG4gICAgdGhpcy5yb290ID0gcGFyZW50VmlldyA/IHBhcmVudFZpZXcucm9vdCA6IHRoaXNcbiAgICB0aGlzLmVsID0gZWxcbiAgICB0aGlzLmlkID0gdGhpcy5lbC5pZFxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMuY2hpbGRKb2lucyA9IDBcbiAgICB0aGlzLmxvYWRlclRpbWVyID0gbnVsbFxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgICB0aGlzLnBydW5pbmdDSURzID0gW11cbiAgICB0aGlzLnJlZGlyZWN0ID0gZmFsc2VcbiAgICB0aGlzLmhyZWYgPSBudWxsXG4gICAgdGhpcy5qb2luQ291bnQgPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmpvaW5Db3VudCAtIDEgOiAwXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IHRydWVcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlXG4gICAgdGhpcy5qb2luQ2FsbGJhY2sgPSBmdW5jdGlvbihvbkRvbmUpeyBvbkRvbmUgJiYgb25Eb25lKCkgfVxuICAgIHRoaXMuc3RvcENhbGxiYWNrID0gZnVuY3Rpb24oKXsgfVxuICAgIHRoaXMucGVuZGluZ0pvaW5PcHMgPSB0aGlzLnBhcmVudCA/IG51bGwgOiBbXVxuICAgIHRoaXMudmlld0hvb2tzID0ge31cbiAgICB0aGlzLnVwbG9hZGVycyA9IHt9XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IFtdXG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMucGFyZW50ID8gbnVsbCA6IHt9XG4gICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdID0ge31cbiAgICB0aGlzLmNoYW5uZWwgPSB0aGlzLmxpdmVTb2NrZXQuY2hhbm5lbChgbHY6JHt0aGlzLmlkfWAsICgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlZGlyZWN0OiB0aGlzLnJlZGlyZWN0ID8gdGhpcy5ocmVmIDogdW5kZWZpbmVkLFxuICAgICAgICB1cmw6IHRoaXMucmVkaXJlY3QgPyB1bmRlZmluZWQgOiB0aGlzLmhyZWYgfHwgdW5kZWZpbmVkLFxuICAgICAgICBwYXJhbXM6IHRoaXMuY29ubmVjdFBhcmFtcygpLFxuICAgICAgICBzZXNzaW9uOiB0aGlzLmdldFNlc3Npb24oKSxcbiAgICAgICAgc3RhdGljOiB0aGlzLmdldFN0YXRpYygpLFxuICAgICAgICBmbGFzaDogdGhpcy5mbGFzaFxuICAgICAgfVxuICAgIH0pXG4gICAgdGhpcy5zaG93TG9hZGVyKHRoaXMubGl2ZVNvY2tldC5sb2FkZXJUaW1lb3V0KVxuICAgIHRoaXMuYmluZENoYW5uZWwoKVxuICB9XG5cbiAgc2V0SHJlZihocmVmKXsgdGhpcy5ocmVmID0gaHJlZiB9XG5cbiAgc2V0UmVkaXJlY3QoaHJlZil7XG4gICAgdGhpcy5yZWRpcmVjdCA9IHRydWVcbiAgICB0aGlzLmhyZWYgPSBocmVmXG4gIH1cblxuICBpc01haW4oKXsgcmV0dXJuIHRoaXMuZWwuZ2V0QXR0cmlidXRlKFBIWF9NQUlOKSAhPT0gbnVsbCB9XG5cbiAgY29ubmVjdFBhcmFtcygpe1xuICAgIGxldCBwYXJhbXMgPSB0aGlzLmxpdmVTb2NrZXQucGFyYW1zKHRoaXMuZWwpXG4gICAgbGV0IG1hbmlmZXN0ID1cbiAgICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHt0aGlzLmJpbmRpbmcoUEhYX1RSQUNLX1NUQVRJQyl9XWApXG4gICAgICAgIC5tYXAobm9kZSA9PiBub2RlLnNyYyB8fCBub2RlLmhyZWYpLmZpbHRlcih1cmwgPT4gdHlwZW9mICh1cmwpID09PSBcInN0cmluZ1wiKVxuXG4gICAgaWYobWFuaWZlc3QubGVuZ3RoID4gMCl7IHBhcmFtc1tcIl90cmFja19zdGF0aWNcIl0gPSBtYW5pZmVzdCB9XG4gICAgcGFyYW1zW1wiX21vdW50c1wiXSA9IHRoaXMuam9pbkNvdW50XG5cbiAgICByZXR1cm4gcGFyYW1zXG4gIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5jaGFubmVsLmNhblB1c2goKSB9XG5cbiAgZ2V0U2Vzc2lvbigpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pIH1cblxuICBnZXRTdGF0aWMoKXtcbiAgICBsZXQgdmFsID0gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQylcbiAgICByZXR1cm4gdmFsID09PSBcIlwiID8gbnVsbCA6IHZhbFxuICB9XG5cbiAgZGVzdHJveShjYWxsYmFjayA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlXG4gICAgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVxuICAgIGlmKHRoaXMucGFyZW50KXsgZGVsZXRlIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLnBhcmVudC5pZF1bdGhpcy5pZF0gfVxuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGxldCBvbkZpbmlzaGVkID0gKCkgPT4ge1xuICAgICAgY2FsbGJhY2soKVxuICAgICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7XG4gICAgICAgIHRoaXMuZGVzdHJveUhvb2sodGhpcy52aWV3SG9va3NbaWRdKVxuICAgICAgfVxuICAgIH1cblxuICAgIERPTS5tYXJrUGh4Q2hpbGREZXN0cm95ZWQodGhpcy5lbClcblxuICAgIHRoaXMubG9nKFwiZGVzdHJveWVkXCIsICgpID0+IFtcInRoZSBjaGlsZCBoYXMgYmVlbiByZW1vdmVkIGZyb20gdGhlIHBhcmVudFwiXSlcbiAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgICAgLnJlY2VpdmUoXCJva1wiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCBvbkZpbmlzaGVkKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsIG9uRmluaXNoZWQpXG4gIH1cblxuICBzZXRDb250YWluZXJDbGFzc2VzKC4uLmNsYXNzZXMpe1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgIFBIWF9DT05ORUNURURfQ0xBU1MsXG4gICAgICBQSFhfRElTQ09OTkVDVEVEX0NMQVNTLFxuICAgICAgUEhYX0VSUk9SX0NMQVNTXG4gICAgKVxuICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKVxuICB9XG5cbiAgc2hvd0xvYWRlcih0aW1lb3V0KXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkZXJUaW1lcilcbiAgICBpZih0aW1lb3V0KXtcbiAgICAgIHRoaXMubG9hZGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuc2hvd0xvYWRlcigpLCB0aW1lb3V0KVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXsgdGhpcy52aWV3SG9va3NbaWRdLl9fZGlzY29ubmVjdGVkKCkgfVxuICAgICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9ESVNDT05ORUNURURfQ0xBU1MpXG4gICAgfVxuICB9XG5cbiAgaGlkZUxvYWRlcigpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIHRoaXMuc2V0Q29udGFpbmVyQ2xhc3NlcyhQSFhfQ09OTkVDVEVEX0NMQVNTKVxuICB9XG5cbiAgdHJpZ2dlclJlY29ubmVjdGVkKCl7XG4gICAgZm9yKGxldCBpZCBpbiB0aGlzLnZpZXdIb29rcyl7IHRoaXMudmlld0hvb2tzW2lkXS5fX3JlY29ubmVjdGVkKCkgfVxuICB9XG5cbiAgbG9nKGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQubG9nKHRoaXMsIGtpbmQsIG1zZ0NhbGxiYWNrKVxuICB9XG5cbiAgdHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUgPSBmdW5jdGlvbigpe30pe1xuICAgIHRoaXMubGl2ZVNvY2tldC50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIHdpdGhpblRhcmdldHMocGh4VGFyZ2V0LCBjYWxsYmFjayl7XG4gICAgaWYocGh4VGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgcGh4VGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudCl7XG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHBoeFRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCBwaHhUYXJnZXQpKVxuICAgIH1cblxuICAgIGlmKGlzQ2lkKHBoeFRhcmdldCkpe1xuICAgICAgbGV0IHRhcmdldHMgPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuZWwsIHBoeFRhcmdldClcbiAgICAgIGlmKHRhcmdldHMubGVuZ3RoID09PSAwKXtcbiAgICAgICAgbG9nRXJyb3IoYG5vIGNvbXBvbmVudCBmb3VuZCBtYXRjaGluZyBwaHgtdGFyZ2V0IG9mICR7cGh4VGFyZ2V0fWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayh0aGlzLCBwYXJzZUludChwaHhUYXJnZXQpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGFyZ2V0cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwaHhUYXJnZXQpKVxuICAgICAgaWYodGFyZ2V0cy5sZW5ndGggPT09IDApeyBsb2dFcnJvcihgbm90aGluZyBmb3VuZCBtYXRjaGluZyB0aGUgcGh4LXRhcmdldCBzZWxlY3RvciBcIiR7cGh4VGFyZ2V0fVwiYCkgfVxuICAgICAgdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB0aGlzLmxpdmVTb2NrZXQub3duZXIodGFyZ2V0LCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIHRhcmdldCkpKVxuICAgIH1cbiAgfVxuXG4gIGFwcGx5RGlmZih0eXBlLCByYXdEaWZmLCBjYWxsYmFjayl7XG4gICAgdGhpcy5sb2codHlwZSwgKCkgPT4gW1wiXCIsIGNsb25lKHJhd0RpZmYpXSlcbiAgICBsZXQge2RpZmYsIHJlcGx5LCBldmVudHMsIHRpdGxlfSA9IFJlbmRlcmVkLmV4dHJhY3QocmF3RGlmZilcbiAgICBpZih0aXRsZSl7IERPTS5wdXRUaXRsZSh0aXRsZSkgfVxuXG4gICAgY2FsbGJhY2soe2RpZmYsIHJlcGx5LCBldmVudHN9KVxuICAgIHJldHVybiByZXBseVxuICB9XG5cbiAgb25Kb2luKHJlc3Ape1xuICAgIGxldCB7cmVuZGVyZWQsIGNvbnRhaW5lcn0gPSByZXNwXG4gICAgaWYoY29udGFpbmVyKXtcbiAgICAgIGxldCBbdGFnLCBhdHRyc10gPSBjb250YWluZXJcbiAgICAgIHRoaXMuZWwgPSBET00ucmVwbGFjZVJvb3RDb250YWluZXIodGhpcy5lbCwgdGFnLCBhdHRycylcbiAgICB9XG4gICAgdGhpcy5jaGlsZEpvaW5zID0gMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5mbGFzaCA9IG51bGxcblxuICAgIEJyb3dzZXIuZHJvcExvY2FsKHRoaXMubGl2ZVNvY2tldC5sb2NhbFN0b3JhZ2UsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSwgQ09OU0VDVVRJVkVfUkVMT0FEUylcbiAgICB0aGlzLmFwcGx5RGlmZihcIm1vdW50XCIsIHJlbmRlcmVkLCAoe2RpZmYsIGV2ZW50c30pID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZWQgPSBuZXcgUmVuZGVyZWQodGhpcy5pZCwgZGlmZilcbiAgICAgIGxldCBodG1sID0gdGhpcy5yZW5kZXJDb250YWluZXIobnVsbCwgXCJqb2luXCIpXG4gICAgICB0aGlzLmRyb3BQZW5kaW5nUmVmcygpXG4gICAgICBsZXQgZm9ybXMgPSB0aGlzLmZvcm1zRm9yUmVjb3ZlcnkoaHRtbClcbiAgICAgIHRoaXMuam9pbkNvdW50KytcblxuICAgICAgaWYoZm9ybXMubGVuZ3RoID4gMCl7XG4gICAgICAgIGZvcm1zLmZvckVhY2goKFtmb3JtLCBuZXdGb3JtLCBuZXdDaWRdLCBpKSA9PiB7XG4gICAgICAgICAgdGhpcy5wdXNoRm9ybVJlY292ZXJ5KGZvcm0sIG5ld0NpZCwgcmVzcCA9PiB7XG4gICAgICAgICAgICBpZihpID09PSBmb3Jtcy5sZW5ndGggLSAxKXtcbiAgICAgICAgICAgICAgdGhpcy5vbkpvaW5Db21wbGV0ZShyZXNwLCBodG1sLCBldmVudHMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgZXZlbnRzKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkcm9wUGVuZGluZ1JlZnMoKXtcbiAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7UEhYX1JFRl9TUkN9PVwiJHt0aGlzLmlkfVwiXVske1BIWF9SRUZ9XWAsIGVsID0+IHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW5Db21wbGV0ZSh7bGl2ZV9wYXRjaH0sIGh0bWwsIGV2ZW50cyl7XG4gICAgLy8gSW4gb3JkZXIgdG8gcHJvdmlkZSBhIGJldHRlciBleHBlcmllbmNlLCB3ZSB3YW50IHRvIGpvaW5cbiAgICAvLyBhbGwgTGl2ZVZpZXdzIGZpcnN0IGFuZCBvbmx5IHRoZW4gYXBwbHkgdGhlaXIgcGF0Y2hlcy5cbiAgICBpZih0aGlzLmpvaW5Db3VudCA+IDEgfHwgKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5pc0pvaW5QZW5kaW5nKCkpKXtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIGV2ZW50cylcbiAgICB9XG5cbiAgICAvLyBPbmUgZG93bnNpZGUgb2YgdGhpcyBhcHByb2FjaCBpcyB0aGF0IHdlIG5lZWQgdG8gZmluZCBwaHhDaGlsZHJlblxuICAgIC8vIGluIHRoZSBodG1sIGZyYWdtZW50LCBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBET00uIFRoZSBmcmFnbWVudFxuICAgIC8vIGFsc28gZG9lcyBub3QgaW5jbHVkZSBQSFhfU1RBVElDLCBzbyB3ZSBuZWVkIHRvIGNvcHkgaXQgb3ZlciBmcm9tXG4gICAgLy8gdGhlIERPTS5cbiAgICBsZXQgbmV3Q2hpbGRyZW4gPSBET00uZmluZFBoeENoaWxkcmVuSW5GcmFnbWVudChodG1sLCB0aGlzLmlkKS5maWx0ZXIodG9FbCA9PiB7XG4gICAgICBsZXQgZnJvbUVsID0gdG9FbC5pZCAmJiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7dG9FbC5pZH1cIl1gKVxuICAgICAgbGV0IHBoeFN0YXRpYyA9IGZyb21FbCAmJiBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9TVEFUSUMpXG4gICAgICBpZihwaHhTdGF0aWMpeyB0b0VsLnNldEF0dHJpYnV0ZShQSFhfU1RBVElDLCBwaHhTdGF0aWMpIH1cbiAgICAgIHJldHVybiB0aGlzLmpvaW5DaGlsZCh0b0VsKVxuICAgIH0pXG5cbiAgICBpZihuZXdDaGlsZHJlbi5sZW5ndGggPT09IDApe1xuICAgICAgaWYodGhpcy5wYXJlbnQpe1xuICAgICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBldmVudHMpXSlcbiAgICAgICAgdGhpcy5wYXJlbnQuYWNrSm9pbih0aGlzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpXG4gICAgICAgIHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgZXZlbnRzKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBldmVudHMpXSlcbiAgICB9XG4gIH1cblxuICBhdHRhY2hUcnVlRG9jRWwoKXtcbiAgICB0aGlzLmVsID0gRE9NLmJ5SWQodGhpcy5pZClcbiAgICB0aGlzLmVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290LmlkKVxuICB9XG5cbiAgYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgZXZlbnRzKXtcbiAgICB0aGlzLmF0dGFjaFRydWVEb2NFbCgpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIG51bGwpXG4gICAgcGF0Y2gubWFya1BydW5hYmxlQ29udGVudEZvclJlbW92YWwoKVxuICAgIHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCBmYWxzZSlcbiAgICB0aGlzLmpvaW5OZXdDaGlsZHJlbigpXG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9IT09LKX1dLCBbZGF0YS1waHgtJHtQSFhfSE9PS31dYCwgaG9va0VsID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy5hZGRIb29rKGhvb2tFbClcbiAgICAgIGlmKGhvb2speyBob29rLl9fbW91bnRlZCgpIH1cbiAgICB9KVxuXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0LmRpc3BhdGNoRXZlbnRzKGV2ZW50cylcbiAgICB0aGlzLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKVxuXG4gICAgaWYobGl2ZV9wYXRjaCl7XG4gICAgICBsZXQge2tpbmQsIHRvfSA9IGxpdmVfcGF0Y2hcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UGF0Y2godG8sIGtpbmQpXG4gICAgfVxuICAgIHRoaXMuaGlkZUxvYWRlcigpXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxKXsgdGhpcy50cmlnZ2VyUmVjb25uZWN0ZWQoKSB9XG4gICAgdGhpcy5zdG9wQ2FsbGJhY2soKVxuICB9XG5cbiAgdHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQudHJpZ2dlckRPTShcIm9uQmVmb3JlRWxVcGRhdGVkXCIsIFtmcm9tRWwsIHRvRWxdKVxuICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGZyb21FbClcbiAgICBsZXQgaXNJZ25vcmVkID0gaG9vayAmJiBET00uaXNJZ25vcmVkKGZyb21FbCwgdGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpKVxuICAgIGlmKGhvb2sgJiYgIWZyb21FbC5pc0VxdWFsTm9kZSh0b0VsKSAmJiAhKGlzSWdub3JlZCAmJiBpc0VxdWFsT2JqKGZyb21FbC5kYXRhc2V0LCB0b0VsLmRhdGFzZXQpKSl7XG4gICAgICBob29rLl9fYmVmb3JlVXBkYXRlKClcbiAgICAgIHJldHVybiBob29rXG4gICAgfVxuICB9XG5cbiAgcGVyZm9ybVBhdGNoKHBhdGNoLCBwcnVuZUNpZHMpe1xuICAgIGxldCByZW1vdmVkRWxzID0gW11cbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG4gICAgbGV0IHVwZGF0ZWRIb29rSWRzID0gbmV3IFNldCgpXG5cbiAgICBwYXRjaC5hZnRlcihcImFkZGVkXCIsIGVsID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25Ob2RlQWRkZWRcIiwgW2VsXSlcblxuICAgICAgbGV0IG5ld0hvb2sgPSB0aGlzLmFkZEhvb2soZWwpXG4gICAgICBpZihuZXdIb29rKXsgbmV3SG9vay5fX21vdW50ZWQoKSB9XG4gICAgfSlcblxuICAgIHBhdGNoLmFmdGVyKFwicGh4Q2hpbGRBZGRlZFwiLCBlbCA9PiB7XG4gICAgICBpZihET00uaXNQaHhTdGlja3koZWwpKXtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LmpvaW5Sb290Vmlld3MoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYmVmb3JlKFwidXBkYXRlZFwiLCAoZnJvbUVsLCB0b0VsKSA9PiB7XG4gICAgICBsZXQgaG9vayA9IHRoaXMudHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKVxuICAgICAgaWYoaG9vayl7IHVwZGF0ZWRIb29rSWRzLmFkZChmcm9tRWwuaWQpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ1cGRhdGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKHVwZGF0ZWRIb29rSWRzLmhhcyhlbC5pZCkpeyB0aGlzLmdldEhvb2soZWwpLl9fdXBkYXRlZCgpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJkaXNjYXJkZWRcIiwgKGVsKSA9PiB7XG4gICAgICBpZihlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpeyByZW1vdmVkRWxzLnB1c2goZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBlbHMgPT4gdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChlbHMsIHBydW5lQ2lkcykpXG4gICAgcGF0Y2gucGVyZm9ybSgpXG4gICAgdGhpcy5hZnRlckVsZW1lbnRzUmVtb3ZlZChyZW1vdmVkRWxzLCBwcnVuZUNpZHMpXG5cbiAgICByZXR1cm4gcGh4Q2hpbGRyZW5BZGRlZFxuICB9XG5cbiAgYWZ0ZXJFbGVtZW50c1JlbW92ZWQoZWxlbWVudHMsIHBydW5lQ2lkcyl7XG4gICAgbGV0IGRlc3Ryb3llZENJRHMgPSBbXVxuICAgIGVsZW1lbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIGxldCBjb21wb25lbnRzID0gRE9NLmFsbChwYXJlbnQsIGBbJHtQSFhfQ09NUE9ORU5UfV1gKVxuICAgICAgICBjb21wb25lbnRzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBsZXQgY2lkID0gdGhpcy5jb21wb25lbnRJRChlbClcbiAgICAgICAgaWYoaXNDaWQoY2lkKSAmJiBkZXN0cm95ZWRDSURzLmluZGV4T2YoY2lkKSA9PT0gLTEpeyBkZXN0cm95ZWRDSURzLnB1c2goY2lkKSB9XG4gICAgICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGVsKVxuICAgICAgICBob29rICYmIHRoaXMuZGVzdHJveUhvb2soaG9vaylcbiAgICAgIH0pXG4gICAgfSlcbiAgICAvLyBXZSBzaG91bGQgbm90IHBydW5lQ2lkcyBvbiBqb2lucy4gT3RoZXJ3aXNlLCBpbiBjYXNlIG9mXG4gICAgLy8gcmVqb2lucywgd2UgbWF5IG5vdGlmeSBjaWRzIHRoYXQgbm8gbG9uZ2VyIGJlbG9uZyB0byB0aGVcbiAgICAvLyBjdXJyZW50IExpdmVWaWV3IHRvIGJlIHJlbW92ZWQuXG4gICAgaWYocHJ1bmVDaWRzKXtcbiAgICAgIHRoaXMubWF5YmVQdXNoQ29tcG9uZW50c0Rlc3Ryb3llZChkZXN0cm95ZWRDSURzKVxuICAgIH1cbiAgfVxuXG4gIGpvaW5OZXdDaGlsZHJlbigpe1xuICAgIERPTS5maW5kUGh4Q2hpbGRyZW4odGhpcy5lbCwgdGhpcy5pZCkuZm9yRWFjaChlbCA9PiB0aGlzLmpvaW5DaGlsZChlbCkpXG4gIH1cblxuICBnZXRDaGlsZEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdW2lkXSB9XG5cbiAgZ2V0RGVzY2VuZGVudEJ5RWwoZWwpe1xuICAgIGlmKGVsLmlkID09PSB0aGlzLmlkKXtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuW2VsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKV1bZWwuaWRdXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveURlc2NlbmRlbnQoaWQpe1xuICAgIGZvcihsZXQgcGFyZW50SWQgaW4gdGhpcy5yb290LmNoaWxkcmVuKXtcbiAgICAgIGZvcihsZXQgY2hpbGRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdKXtcbiAgICAgICAgaWYoY2hpbGRJZCA9PT0gaWQpeyByZXR1cm4gdGhpcy5yb290LmNoaWxkcmVuW3BhcmVudElkXVtjaGlsZElkXS5kZXN0cm95KCkgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGpvaW5DaGlsZChlbCl7XG4gICAgbGV0IGNoaWxkID0gdGhpcy5nZXRDaGlsZEJ5SWQoZWwuaWQpXG4gICAgaWYoIWNoaWxkKXtcbiAgICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMubGl2ZVNvY2tldCwgdGhpcylcbiAgICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXVt2aWV3LmlkXSA9IHZpZXdcbiAgICAgIHZpZXcuam9pbigpXG4gICAgICB0aGlzLmNoaWxkSm9pbnMrK1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBpc0pvaW5QZW5kaW5nKCl7IHJldHVybiB0aGlzLmpvaW5QZW5kaW5nIH1cblxuICBhY2tKb2luKF9jaGlsZCl7XG4gICAgdGhpcy5jaGlsZEpvaW5zLS1cblxuICAgIGlmKHRoaXMuY2hpbGRKb2lucyA9PT0gMCl7XG4gICAgICBpZih0aGlzLnBhcmVudCl7XG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQWxsQ2hpbGRKb2luc0NvbXBsZXRlKCl7XG4gICAgdGhpcy5qb2luQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nSm9pbk9wcy5mb3JFYWNoKChbdmlldywgb3BdKSA9PiB7XG4gICAgICAgIGlmKCF2aWV3LmlzRGVzdHJveWVkKCkpeyBvcCgpIH1cbiAgICAgIH0pXG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gW11cbiAgICB9KVxuICB9XG5cbiAgdXBkYXRlKGRpZmYsIGV2ZW50cyl7XG4gICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkgfHwgdGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkpe1xuICAgICAgcmV0dXJuIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goe2RpZmYsIGV2ZW50c30pXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZC5tZXJnZURpZmYoZGlmZilcbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG5cbiAgICAvLyBXaGVuIHRoZSBkaWZmIG9ubHkgY29udGFpbnMgY29tcG9uZW50IGRpZmZzLCB0aGVuIHdhbGsgY29tcG9uZW50c1xuICAgIC8vIGFuZCBwYXRjaCBvbmx5IHRoZSBwYXJlbnQgY29tcG9uZW50IGNvbnRhaW5lcnMgZm91bmQgaW4gdGhlIGRpZmYuXG4gICAgLy8gT3RoZXJ3aXNlLCBwYXRjaCBlbnRpcmUgTFYgY29udGFpbmVyLlxuICAgIGlmKHRoaXMucmVuZGVyZWQuaXNDb21wb25lbnRPbmx5RGlmZihkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImNvbXBvbmVudCBwYXRjaCBjb21wbGV0ZVwiLCAoKSA9PiB7XG4gICAgICAgIGxldCBwYXJlbnRDaWRzID0gRE9NLmZpbmRQYXJlbnRDSURzKHRoaXMuZWwsIHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKSlcbiAgICAgICAgcGFyZW50Q2lkcy5mb3JFYWNoKHBhcmVudENJRCA9PiB7XG4gICAgICAgICAgaWYodGhpcy5jb21wb25lbnRQYXRjaCh0aGlzLnJlbmRlcmVkLmdldENvbXBvbmVudChkaWZmLCBwYXJlbnRDSUQpLCBwYXJlbnRDSUQpKXsgcGh4Q2hpbGRyZW5BZGRlZCA9IHRydWUgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYoIWlzRW1wdHkoZGlmZikpe1xuICAgICAgdGhpcy5saXZlU29ja2V0LnRpbWUoXCJmdWxsIHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IGh0bWwgPSB0aGlzLnJlbmRlckNvbnRhaW5lcihkaWZmLCBcInVwZGF0ZVwiKVxuICAgICAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgbnVsbClcbiAgICAgICAgcGh4Q2hpbGRyZW5BZGRlZCA9IHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCB0cnVlKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLmxpdmVTb2NrZXQuZGlzcGF0Y2hFdmVudHMoZXZlbnRzKVxuICAgIGlmKHBoeENoaWxkcmVuQWRkZWQpeyB0aGlzLmpvaW5OZXdDaGlsZHJlbigpIH1cbiAgfVxuXG4gIHJlbmRlckNvbnRhaW5lcihkaWZmLCBraW5kKXtcbiAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0LnRpbWUoYHRvU3RyaW5nIGRpZmYgKCR7a2luZH0pYCwgKCkgPT4ge1xuICAgICAgbGV0IHRhZyA9IHRoaXMuZWwudGFnTmFtZVxuICAgICAgLy8gRG9uJ3Qgc2tpcCBhbnkgY29tcG9uZW50IGluIHRoZSBkaWZmIG5vciBhbnkgbWFya2VkIGFzIHBydW5lZFxuICAgICAgLy8gKGFzIHRoZXkgbWF5IGhhdmUgYmVlbiBhZGRlZCBiYWNrKVxuICAgICAgbGV0IGNpZHMgPSBkaWZmID8gdGhpcy5yZW5kZXJlZC5jb21wb25lbnRDSURzKGRpZmYpLmNvbmNhdCh0aGlzLnBydW5pbmdDSURzKSA6IG51bGxcbiAgICAgIGxldCBodG1sID0gdGhpcy5yZW5kZXJlZC50b1N0cmluZyhjaWRzKVxuICAgICAgcmV0dXJuIGA8JHt0YWd9PiR7aHRtbH08LyR7dGFnfT5gXG4gICAgfSlcbiAgfVxuXG4gIGNvbXBvbmVudFBhdGNoKGRpZmYsIGNpZCl7XG4gICAgaWYoaXNFbXB0eShkaWZmKSkgcmV0dXJuIGZhbHNlXG4gICAgbGV0IGh0bWwgPSB0aGlzLnJlbmRlcmVkLmNvbXBvbmVudFRvU3RyaW5nKGNpZClcbiAgICBsZXQgcGF0Y2ggPSBuZXcgRE9NUGF0Y2godGhpcywgdGhpcy5lbCwgdGhpcy5pZCwgaHRtbCwgY2lkKVxuICAgIGxldCBjaGlsZHJlbkFkZGVkID0gdGhpcy5wZXJmb3JtUGF0Y2gocGF0Y2gsIHRydWUpXG4gICAgcmV0dXJuIGNoaWxkcmVuQWRkZWRcbiAgfVxuXG4gIGdldEhvb2soZWwpeyByZXR1cm4gdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGVsKV0gfVxuXG4gIGFkZEhvb2soZWwpe1xuICAgIGlmKFZpZXdIb29rLmVsZW1lbnRJRChlbCkgfHwgIWVsLmdldEF0dHJpYnV0ZSl7IHJldHVybiB9XG4gICAgbGV0IGhvb2tOYW1lID0gZWwuZ2V0QXR0cmlidXRlKGBkYXRhLXBoeC0ke1BIWF9IT09LfWApIHx8IGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0hPT0spKVxuICAgIGlmKGhvb2tOYW1lICYmICF0aGlzLm93bnNFbGVtZW50KGVsKSl7IHJldHVybiB9XG4gICAgbGV0IGNhbGxiYWNrcyA9IHRoaXMubGl2ZVNvY2tldC5nZXRIb29rQ2FsbGJhY2tzKGhvb2tOYW1lKVxuXG4gICAgaWYoY2FsbGJhY2tzKXtcbiAgICAgIGlmKCFlbC5pZCl7IGxvZ0Vycm9yKGBubyBET00gSUQgZm9yIGhvb2sgXCIke2hvb2tOYW1lfVwiLiBIb29rcyByZXF1aXJlIGEgdW5pcXVlIElEIG9uIGVhY2ggZWxlbWVudC5gLCBlbCkgfVxuICAgICAgbGV0IGhvb2sgPSBuZXcgVmlld0hvb2sodGhpcywgZWwsIGNhbGxiYWNrcylcbiAgICAgIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV0gPSBob29rXG4gICAgICByZXR1cm4gaG9va1xuICAgIH0gZWxzZSBpZihob29rTmFtZSAhPT0gbnVsbCl7XG4gICAgICBsb2dFcnJvcihgdW5rbm93biBob29rIGZvdW5kIGZvciBcIiR7aG9va05hbWV9XCJgLCBlbClcbiAgICB9XG4gIH1cblxuICBkZXN0cm95SG9vayhob29rKXtcbiAgICBob29rLl9fZGVzdHJveWVkKClcbiAgICBob29rLl9fY2xlYW51cF9fKClcbiAgICBkZWxldGUgdGhpcy52aWV3SG9va3NbVmlld0hvb2suZWxlbWVudElEKGhvb2suZWwpXVxuICB9XG5cbiAgYXBwbHlQZW5kaW5nVXBkYXRlcygpe1xuICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgIHRoaXMucGVuZGluZ0RpZmZzID0gW11cbiAgfVxuXG4gIG9uQ2hhbm5lbChldmVudCwgY2Ipe1xuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBldmVudCwgcmVzcCA9PiB7XG4gICAgICBpZih0aGlzLmlzSm9pblBlbmRpbmcoKSl7XG4gICAgICAgIHRoaXMucm9vdC5wZW5kaW5nSm9pbk9wcy5wdXNoKFt0aGlzLCAoKSA9PiBjYihyZXNwKV0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiBjYihyZXNwKSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZENoYW5uZWwoKXtcbiAgICAvLyBUaGUgZGlmZiBldmVudCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgcmVndWxhciB1cGRhdGUgb3BlcmF0aW9ucy5cbiAgICAvLyBBbGwgb3RoZXIgb3BlcmF0aW9ucyBhcmUgcXVldWVkIHRvIGJlIGFwcGxpZWQgb25seSBhZnRlciBqb2luLlxuICAgIHRoaXMubGl2ZVNvY2tldC5vbkNoYW5uZWwodGhpcy5jaGFubmVsLCBcImRpZmZcIiwgKHJhd0RpZmYpID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmF3RGlmZiwgKHtkaWZmLCBldmVudHN9KSA9PiB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpKVxuICAgICAgfSlcbiAgICB9KVxuICAgIHRoaXMub25DaGFubmVsKFwicmVkaXJlY3RcIiwgKHt0bywgZmxhc2h9KSA9PiB0aGlzLm9uUmVkaXJlY3Qoe3RvLCBmbGFzaH0pKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9wYXRjaFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUGF0Y2gocmVkaXIpKVxuICAgIHRoaXMub25DaGFubmVsKFwibGl2ZV9yZWRpcmVjdFwiLCAocmVkaXIpID0+IHRoaXMub25MaXZlUmVkaXJlY3QocmVkaXIpKVxuICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKHJlYXNvbiA9PiB0aGlzLm9uRXJyb3IocmVhc29uKSlcbiAgICB0aGlzLmNoYW5uZWwub25DbG9zZShyZWFzb24gPT4gdGhpcy5vbkNsb3NlKHJlYXNvbikpXG4gIH1cblxuICBkZXN0cm95QWxsQ2hpbGRyZW4oKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSl7XG4gICAgICB0aGlzLmdldENoaWxkQnlJZChpZCkuZGVzdHJveSgpXG4gICAgfVxuICB9XG5cbiAgb25MaXZlUmVkaXJlY3QocmVkaXIpe1xuICAgIGxldCB7dG8sIGtpbmQsIGZsYXNofSA9IHJlZGlyXG4gICAgbGV0IHVybCA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QodXJsLCBraW5kLCBmbGFzaClcbiAgfVxuXG4gIG9uTGl2ZVBhdGNoKHJlZGlyKXtcbiAgICBsZXQge3RvLCBraW5kfSA9IHJlZGlyXG4gICAgdGhpcy5ocmVmID0gdGhpcy5leHBhbmRVUkwodG8pXG4gICAgdGhpcy5saXZlU29ja2V0Lmhpc3RvcnlQYXRjaCh0bywga2luZClcbiAgfVxuXG4gIGV4cGFuZFVSTCh0byl7XG4gICAgcmV0dXJuIHRvLnN0YXJ0c1dpdGgoXCIvXCIpID8gYCR7d2luZG93LmxvY2F0aW9uLnByb3RvY29sfS8vJHt3aW5kb3cubG9jYXRpb24uaG9zdH0ke3RvfWAgOiB0b1xuICB9XG5cbiAgb25SZWRpcmVjdCh7dG8sIGZsYXNofSl7IHRoaXMubGl2ZVNvY2tldC5yZWRpcmVjdCh0bywgZmxhc2gpIH1cblxuICBpc0Rlc3Ryb3llZCgpeyByZXR1cm4gdGhpcy5kZXN0cm95ZWQgfVxuXG4gIGpvaW4oY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuaXNNYWluKCkpe1xuICAgICAgdGhpcy5zdG9wQ2FsbGJhY2sgPSB0aGlzLmxpdmVTb2NrZXQud2l0aFBhZ2VMb2FkaW5nKHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImluaXRpYWxcIn0pXG4gICAgfVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gKG9uRG9uZSkgPT4ge1xuICAgICAgb25Eb25lID0gb25Eb25lIHx8IGZ1bmN0aW9uKCl7fVxuICAgICAgY2FsbGJhY2sgPyBjYWxsYmFjayh0aGlzLmpvaW5Db3VudCwgb25Eb25lKSA6IG9uRG9uZSgpXG4gICAgfVxuICAgIHRoaXMubGl2ZVNvY2tldC53cmFwUHVzaCh0aGlzLCB7dGltZW91dDogZmFsc2V9LCAoKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jaGFubmVsLmpvaW4oKVxuICAgICAgICAucmVjZWl2ZShcIm9rXCIsIGRhdGEgPT4ge1xuICAgICAgICAgIGlmKCF0aGlzLmlzRGVzdHJveWVkKCkpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4gdGhpcy5vbkpvaW4oZGF0YSkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlc3AgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiB0aGlzLm9uSm9pbkVycm9yKHJlc3ApKVxuICAgICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4gIXRoaXMuaXNEZXN0cm95ZWQoKSAmJiB0aGlzLm9uSm9pbkVycm9yKHtyZWFzb246IFwidGltZW91dFwifSkpXG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbkVycm9yKHJlc3Ape1xuICAgIGlmKHJlc3AucmVhc29uID09PSBcInVuYXV0aG9yaXplZFwiIHx8IHJlc3AucmVhc29uID09PSBcInN0YWxlXCIpe1xuICAgICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmF1dGhvcml6ZWQgbGl2ZV9yZWRpcmVjdC4gRmFsbGluZyBiYWNrIHRvIHBhZ2UgcmVxdWVzdFwiLCByZXNwXSlcbiAgICAgIHJldHVybiB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLmhyZWZ9KVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0IHx8IHJlc3AubGl2ZV9yZWRpcmVjdCl7XG4gICAgICB0aGlzLmpvaW5QZW5kaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICAgIGlmKHJlc3AucmVkaXJlY3QpeyByZXR1cm4gdGhpcy5vblJlZGlyZWN0KHJlc3AucmVkaXJlY3QpIH1cbiAgICBpZihyZXNwLmxpdmVfcmVkaXJlY3QpeyByZXR1cm4gdGhpcy5vbkxpdmVSZWRpcmVjdChyZXNwLmxpdmVfcmVkaXJlY3QpIH1cbiAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtcInVuYWJsZSB0byBqb2luXCIsIHJlc3BdKVxuICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKVxuICB9XG5cbiAgb25DbG9zZShyZWFzb24pe1xuICAgIGlmKHRoaXMuaXNEZXN0cm95ZWQoKSl7IHJldHVybiB9XG4gICAgaWYoKHRoaXMuaXNKb2luUGVuZGluZygpICYmIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSAhPT0gXCJoaWRkZW5cIikgfHxcbiAgICAgICh0aGlzLmxpdmVTb2NrZXQuaGFzUGVuZGluZ0xpbmsoKSAmJiByZWFzb24gIT09IFwibGVhdmVcIikpe1xuXG4gICAgICByZXR1cm4gdGhpcy5saXZlU29ja2V0LnJlbG9hZFdpdGhKaXR0ZXIodGhpcylcbiAgICB9XG4gICAgdGhpcy5kZXN0cm95QWxsQ2hpbGRyZW4oKVxuICAgIHRoaXMubGl2ZVNvY2tldC5kcm9wQWN0aXZlRWxlbWVudCh0aGlzKVxuICAgIC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIGJlIG51bGwgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbiAgICBpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KXsgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCkgfVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5pc1VubG9hZGVkKCkpe1xuICAgICAgdGhpcy5zaG93TG9hZGVyKEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQpXG4gICAgfVxuICB9XG5cbiAgb25FcnJvcihyZWFzb24pe1xuICAgIHRoaXMub25DbG9zZShyZWFzb24pXG4gICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ2aWV3IGNyYXNoZWRcIiwgcmVhc29uXSlcbiAgICBpZighdGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7IHRoaXMuZGlzcGxheUVycm9yKCkgfVxuICB9XG5cbiAgZGlzcGxheUVycm9yKCl7XG4gICAgaWYodGhpcy5pc01haW4oKSl7IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImVycm9yXCJ9KSB9XG4gICAgdGhpcy5zaG93TG9hZGVyKClcbiAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUywgUEhYX0VSUk9SX0NMQVNTKVxuICB9XG5cbiAgcHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuXG4gICAgbGV0IFtyZWYsIFtlbF0sIG9wdHNdID0gcmVmR2VuZXJhdG9yID8gcmVmR2VuZXJhdG9yKCkgOiBbbnVsbCwgW10sIHt9XVxuICAgIGxldCBvbkxvYWRpbmdEb25lID0gZnVuY3Rpb24oKXsgfVxuICAgIGlmKG9wdHMucGFnZV9sb2FkaW5nIHx8IChlbCAmJiAoZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfUEFHRV9MT0FESU5HKSkgIT09IG51bGwpKSl7XG4gICAgICBvbkxvYWRpbmdEb25lID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7a2luZDogXCJlbGVtZW50XCIsIHRhcmdldDogZWx9KVxuICAgIH1cblxuICAgIGlmKHR5cGVvZiAocGF5bG9hZC5jaWQpICE9PSBcIm51bWJlclwiKXsgZGVsZXRlIHBheWxvYWQuY2lkIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5saXZlU29ja2V0LndyYXBQdXNoKHRoaXMsIHt0aW1lb3V0OiB0cnVlfSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsLnB1c2goZXZlbnQsIHBheWxvYWQsIFBVU0hfVElNRU9VVCkucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4ge1xuICAgICAgICAgIGlmKHJlZiAhPT0gbnVsbCl7IHRoaXMudW5kb1JlZnMocmVmKSB9XG4gICAgICAgICAgbGV0IGZpbmlzaCA9IChob29rUmVwbHkpID0+IHtcbiAgICAgICAgICAgIGlmKHJlc3AucmVkaXJlY3QpeyB0aGlzLm9uUmVkaXJlY3QocmVzcC5yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVzcC5saXZlX3BhdGNoKXsgdGhpcy5vbkxpdmVQYXRjaChyZXNwLmxpdmVfcGF0Y2gpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9yZWRpcmVjdCl7IHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgICAgICAgICBvbkxvYWRpbmdEb25lKClcbiAgICAgICAgICAgIG9uUmVwbHkocmVzcCwgaG9va1JlcGx5KVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXNwLmRpZmYpe1xuICAgICAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgICAgICBsZXQgaG9va1JlcGx5ID0gdGhpcy5hcHBseURpZmYoXCJ1cGRhdGVcIiwgcmVzcC5kaWZmLCAoe2RpZmYsIGV2ZW50c30pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShkaWZmLCBldmVudHMpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGZpbmlzaChob29rUmVwbHkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW5pc2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIHVuZG9SZWZzKHJlZil7XG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5pZH1cIl1bJHtQSFhfUkVGfT1cIiR7cmVmfVwiXWAsIGVsID0+IHtcbiAgICAgIGxldCBkaXNhYmxlZFZhbCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICAvLyByZW1vdmUgcmVmc1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUYpXG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRl9TUkMpXG4gICAgICAvLyByZXN0b3JlIGlucHV0c1xuICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKFBIWF9SRUFET05MWSkgIT09IG51bGwpe1xuICAgICAgICBlbC5yZWFkT25seSA9IGZhbHNlXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVBRE9OTFkpXG4gICAgICB9XG4gICAgICBpZihkaXNhYmxlZFZhbCAhPT0gbnVsbCl7XG4gICAgICAgIGVsLmRpc2FibGVkID0gZGlzYWJsZWRWYWwgPT09IFwidHJ1ZVwiID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRUQpXG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgY2xhc3Nlc1xuICAgICAgUEhYX0VWRU5UX0NMQVNTRVMuZm9yRWFjaChjbGFzc05hbWUgPT4gRE9NLnJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpKVxuICAgICAgLy8gcmVzdG9yZSBkaXNhYmxlc1xuICAgICAgbGV0IGRpc2FibGVSZXN0b3JlID0gZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIGlmKGRpc2FibGVSZXN0b3JlICE9PSBudWxsKXtcbiAgICAgICAgZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVJlc3RvcmVcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSlcbiAgICAgIH1cbiAgICAgIGxldCB0b0VsID0gRE9NLnByaXZhdGUoZWwsIFBIWF9SRUYpXG4gICAgICBpZih0b0VsKXtcbiAgICAgICAgbGV0IGhvb2sgPSB0aGlzLnRyaWdnZXJCZWZvcmVVcGRhdGVIb29rKGVsLCB0b0VsKVxuICAgICAgICBET01QYXRjaC5wYXRjaEVsKGVsLCB0b0VsLCB0aGlzLmxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpKVxuICAgICAgICBpZihob29rKXsgaG9vay5fX3VwZGF0ZWQoKSB9XG4gICAgICAgIERPTS5kZWxldGVQcml2YXRlKGVsLCBQSFhfUkVGKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwdXRSZWYoZWxlbWVudHMsIGV2ZW50LCBvcHRzID0ge30pe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZisrXG4gICAgbGV0IGRpc2FibGVXaXRoID0gdGhpcy5iaW5kaW5nKFBIWF9ESVNBQkxFX1dJVEgpXG4gICAgaWYob3B0cy5sb2FkaW5nKXsgZWxlbWVudHMgPSBlbGVtZW50cy5jb25jYXQoRE9NLmFsbChkb2N1bWVudCwgb3B0cy5sb2FkaW5nKSl9XG5cbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYHBoeC0ke2V2ZW50fS1sb2FkaW5nYClcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfUkVGLCBuZXdSZWYpXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRl9TUkMsIHRoaXMuZWwuaWQpXG4gICAgICBsZXQgZGlzYWJsZVRleHQgPSBlbC5nZXRBdHRyaWJ1dGUoZGlzYWJsZVdpdGgpXG4gICAgICBpZihkaXNhYmxlVGV4dCAhPT0gbnVsbCl7XG4gICAgICAgIGlmKCFlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVfV0lUSF9SRVNUT1JFKSl7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSwgZWwuaW5uZXJUZXh0KVxuICAgICAgICB9XG4gICAgICAgIGlmKGRpc2FibGVUZXh0ICE9PSBcIlwiKXsgZWwuaW5uZXJUZXh0ID0gZGlzYWJsZVRleHQgfVxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIFtuZXdSZWYsIGVsZW1lbnRzLCBvcHRzXVxuICB9XG5cbiAgY29tcG9uZW50SUQoZWwpe1xuICAgIGxldCBjaWQgPSBlbC5nZXRBdHRyaWJ1dGUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpXG4gICAgcmV0dXJuIGNpZCA/IHBhcnNlSW50KGNpZCkgOiBudWxsXG4gIH1cblxuICB0YXJnZXRDb21wb25lbnRJRCh0YXJnZXQsIHRhcmdldEN0eCwgb3B0cyA9IHt9KXtcbiAgICBpZihpc0NpZCh0YXJnZXRDdHgpKXsgcmV0dXJuIHRhcmdldEN0eCB9XG5cbiAgICBsZXQgY2lkT3JTZWxlY3RvciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwidGFyZ2V0XCIpKVxuICAgIGlmKGlzQ2lkKGNpZE9yU2VsZWN0b3IpKXtcbiAgICAgIHJldHVybiBwYXJzZUludChjaWRPclNlbGVjdG9yKVxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHggJiYgKGNpZE9yU2VsZWN0b3IgIT09IG51bGwgfHwgb3B0cy50YXJnZXQpKXtcbiAgICAgIHJldHVybiB0aGlzLmNsb3Nlc3RDb21wb25lbnRJRCh0YXJnZXRDdHgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eCl7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7XG4gICAgICByZXR1cm4gdGFyZ2V0Q3R4XG4gICAgfSBlbHNlIGlmKHRhcmdldEN0eCl7XG4gICAgICByZXR1cm4gbWF5YmUodGFyZ2V0Q3R4LmNsb3Nlc3QoYFske1BIWF9DT01QT05FTlR9XWApLCBlbCA9PiB0aGlzLm93bnNFbGVtZW50KGVsKSAmJiB0aGlzLmNvbXBvbmVudElEKGVsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBwdXNoSG9va0V2ZW50KHRhcmdldEN0eCwgZXZlbnQsIHBheWxvYWQsIG9uUmVwbHkpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpe1xuICAgICAgdGhpcy5sb2coXCJob29rXCIsICgpID0+IFtcInVuYWJsZSB0byBwdXNoIGhvb2sgZXZlbnQuIExpdmVWaWV3IG5vdCBjb25uZWN0ZWRcIiwgZXZlbnQsIHBheWxvYWRdKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBbcmVmLCBlbHMsIG9wdHNdID0gdGhpcy5wdXRSZWYoW10sIFwiaG9va1wiKVxuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiBbcmVmLCBlbHMsIG9wdHNdLCBcImV2ZW50XCIsIHtcbiAgICAgIHR5cGU6IFwiaG9va1wiLFxuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgdmFsdWU6IHBheWxvYWQsXG4gICAgICBjaWQ6IHRoaXMuY2xvc2VzdENvbXBvbmVudElEKHRhcmdldEN0eClcbiAgICB9LCAocmVzcCwgcmVwbHkpID0+IG9uUmVwbHkocmVwbHksIHJlZikpXG5cbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICBleHRyYWN0TWV0YShlbCwgbWV0YSwgdmFsdWUpe1xuICAgIGxldCBwcmVmaXggPSB0aGlzLmJpbmRpbmcoXCJ2YWx1ZS1cIilcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBsZXQgbmFtZSA9IGVsLmF0dHJpYnV0ZXNbaV0ubmFtZVxuICAgICAgaWYobmFtZS5zdGFydHNXaXRoKHByZWZpeCkpeyBtZXRhW25hbWUucmVwbGFjZShwcmVmaXgsIFwiXCIpXSA9IGVsLmdldEF0dHJpYnV0ZShuYW1lKSB9XG4gICAgfVxuICAgIGlmKGVsLnZhbHVlICE9PSB1bmRlZmluZWQpe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbWV0YS52YWx1ZSA9IGVsLnZhbHVlXG5cbiAgICAgIGlmKGVsLnRhZ05hbWUgPT09IFwiSU5QVVRcIiAmJiBDSEVDS0FCTEVfSU5QVVRTLmluZGV4T2YoZWwudHlwZSkgPj0gMCAmJiAhZWwuY2hlY2tlZCl7XG4gICAgICAgIGRlbGV0ZSBtZXRhLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmKHZhbHVlKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIGZvcihsZXQga2V5IGluIHZhbHVlKXsgbWV0YVtrZXldID0gdmFsdWVba2V5XSB9XG4gICAgfVxuICAgIHJldHVybiBtZXRhXG4gIH1cblxuICBwdXNoRXZlbnQodHlwZSwgZWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIG1ldGEsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KCgpID0+IHRoaXMucHV0UmVmKFtlbF0sIHR5cGUsIG9wdHMpLCBcImV2ZW50XCIsIHtcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogdGhpcy5leHRyYWN0TWV0YShlbCwgbWV0YSwgb3B0cy52YWx1ZSksXG4gICAgICBjaWQ6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZWwsIHRhcmdldEN0eCwgb3B0cylcbiAgICB9KVxuICB9XG5cbiAgcHVzaEZpbGVQcm9ncmVzcyhmaWxlRWwsIGVudHJ5UmVmLCBwcm9ncmVzcywgb25SZXBseSA9IGZ1bmN0aW9uICgpeyB9KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZpbGVFbC5mb3JtLCAodmlldywgdGFyZ2V0Q3R4KSA9PiB7XG4gICAgICB2aWV3LnB1c2hXaXRoUmVwbHkobnVsbCwgXCJwcm9ncmVzc1wiLCB7XG4gICAgICAgIGV2ZW50OiBmaWxlRWwuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhQSFhfUFJPR1JFU1MpKSxcbiAgICAgICAgcmVmOiBmaWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cnlfcmVmOiBlbnRyeVJlZixcbiAgICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgICBjaWQ6IHZpZXcudGFyZ2V0Q29tcG9uZW50SUQoZmlsZUVsLmZvcm0sIHRhcmdldEN0eClcbiAgICAgIH0sIG9uUmVwbHkpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hJbnB1dChpbnB1dEVsLCB0YXJnZXRDdHgsIGZvcmNlQ2lkLCBwaHhFdmVudCwgb3B0cywgY2FsbGJhY2spe1xuICAgIGxldCB1cGxvYWRzXG4gICAgbGV0IGNpZCA9IGlzQ2lkKGZvcmNlQ2lkKSA/IGZvcmNlQ2lkIDogdGhpcy50YXJnZXRDb21wb25lbnRJRChpbnB1dEVsLmZvcm0sIHRhcmdldEN0eClcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5wdXRSZWYoW2lucHV0RWwsIGlucHV0RWwuZm9ybV0sIFwiY2hhbmdlXCIsIG9wdHMpXG4gICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShpbnB1dEVsLmZvcm0sIHtfdGFyZ2V0OiBvcHRzLl90YXJnZXR9KVxuICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZmlsZXMgJiYgaW5wdXRFbC5maWxlcy5sZW5ndGggPiAwKXtcbiAgICAgIExpdmVVcGxvYWRlci50cmFja0ZpbGVzKGlucHV0RWwsIEFycmF5LmZyb20oaW5wdXRFbC5maWxlcykpXG4gICAgfVxuICAgIHVwbG9hZHMgPSBMaXZlVXBsb2FkZXIuc2VyaWFsaXplVXBsb2FkcyhpbnB1dEVsKVxuICAgIGxldCBldmVudCA9IHtcbiAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgdXBsb2FkczogdXBsb2FkcyxcbiAgICAgIGNpZDogY2lkXG4gICAgfVxuICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwgZXZlbnQsIHJlc3AgPT4ge1xuICAgICAgRE9NLnNob3dFcnJvcihpbnB1dEVsLCB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKSlcbiAgICAgIGlmKERPTS5pc1VwbG9hZElucHV0KGlucHV0RWwpICYmIGlucHV0RWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1waHgtYXV0by11cGxvYWRcIikgIT09IG51bGwpe1xuICAgICAgICBpZihMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZXQgW3JlZiwgX2Vsc10gPSByZWZHZW5lcmF0b3IoKVxuICAgICAgICAgIHRoaXMudXBsb2FkRmlsZXMoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHJlc3ApXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJBd2FpdGluZ1N1Ym1pdChpbnB1dEVsLmZvcm0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJpZ2dlckF3YWl0aW5nU3VibWl0KGZvcm1FbCl7XG4gICAgbGV0IGF3YWl0aW5nU3VibWl0ID0gdGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKVxuICAgIGlmKGF3YWl0aW5nU3VibWl0KXtcbiAgICAgIGxldCBbX2VsLCBfcmVmLCBfb3B0cywgY2FsbGJhY2tdID0gYXdhaXRpbmdTdWJtaXRcbiAgICAgIHRoaXMuY2FuY2VsU3VibWl0KGZvcm1FbClcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBnZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKXtcbiAgICByZXR1cm4gdGhpcy5mb3JtU3VibWl0cy5maW5kKChbZWwsIF9yZWYsIF9vcHRzLCBfY2FsbGJhY2tdKSA9PiBlbC5pc1NhbWVOb2RlKGZvcm1FbCkpXG4gIH1cblxuICBzY2hlZHVsZVN1Ym1pdChmb3JtRWwsIHJlZiwgb3B0cywgY2FsbGJhY2spe1xuICAgIGlmKHRoaXMuZ2V0U2NoZWR1bGVkU3VibWl0KGZvcm1FbCkpeyByZXR1cm4gdHJ1ZSB9XG4gICAgdGhpcy5mb3JtU3VibWl0cy5wdXNoKFtmb3JtRWwsIHJlZiwgb3B0cywgY2FsbGJhY2tdKVxuICB9XG5cbiAgY2FuY2VsU3VibWl0KGZvcm1FbCl7XG4gICAgdGhpcy5mb3JtU3VibWl0cyA9IHRoaXMuZm9ybVN1Ym1pdHMuZmlsdGVyKChbZWwsIHJlZiwgX2NhbGxiYWNrXSkgPT4ge1xuICAgICAgaWYoZWwuaXNTYW1lTm9kZShmb3JtRWwpKXtcbiAgICAgICAgdGhpcy51bmRvUmVmcyhyZWYpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHVzaEZvcm1TdWJtaXQoZm9ybUVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBvcHRzLCBvblJlcGx5KXtcbiAgICBsZXQgZmlsdGVySWdub3JlZCA9IGVsID0+IHtcbiAgICAgIGxldCB1c2VySWdub3JlZCA9IGNsb3Nlc3RQaHhCaW5kaW5nKGVsLCBgJHt0aGlzLmJpbmRpbmcoUEhYX1VQREFURSl9PWlnbm9yZWAsIGVsLmZvcm0pXG4gICAgICByZXR1cm4gISh1c2VySWdub3JlZCB8fCBjbG9zZXN0UGh4QmluZGluZyhlbCwgXCJkYXRhLXBoeC11cGRhdGU9aWdub3JlXCIsIGVsLmZvcm0pKVxuICAgIH1cbiAgICBsZXQgZmlsdGVyRGlzYWJsZXMgPSBlbCA9PiB7XG4gICAgICByZXR1cm4gZWwuaGFzQXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckJ1dHRvbiA9IGVsID0+IGVsLnRhZ05hbWUgPT0gXCJCVVRUT05cIlxuXG4gICAgbGV0IGZpbHRlcklucHV0ID0gZWwgPT4gW1wiSU5QVVRcIiwgXCJURVhUQVJFQVwiLCBcIlNFTEVDVFwiXS5pbmNsdWRlcyhlbC50YWdOYW1lKVxuXG4gICAgbGV0IHJlZkdlbmVyYXRvciA9ICgpID0+IHtcbiAgICAgIGxldCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKGZvcm1FbC5lbGVtZW50cylcbiAgICAgIGxldCBkaXNhYmxlcyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyRGlzYWJsZXMpXG4gICAgICBsZXQgYnV0dG9ucyA9IGZvcm1FbGVtZW50cy5maWx0ZXIoZmlsdGVyQnV0dG9uKS5maWx0ZXIoZmlsdGVySWdub3JlZClcbiAgICAgIGxldCBpbnB1dHMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlcklucHV0KS5maWx0ZXIoZmlsdGVySWdub3JlZClcblxuICAgICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVELCBidXR0b24uZGlzYWJsZWQpXG4gICAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH0pXG4gICAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFksIGlucHV0LnJlYWRPbmx5KVxuICAgICAgICBpbnB1dC5yZWFkT25seSA9IHRydWVcbiAgICAgICAgaWYoaW5wdXQuZmlsZXMpe1xuICAgICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGlucHV0LmRpc2FibGVkKVxuICAgICAgICAgIGlucHV0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgZm9ybUVsLnNldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX1BBR0VfTE9BRElORyksIFwiXCIpXG4gICAgICByZXR1cm4gdGhpcy5wdXRSZWYoW2Zvcm1FbF0uY29uY2F0KGRpc2FibGVzKS5jb25jYXQoYnV0dG9ucykuY29uY2F0KGlucHV0cyksIFwic3VibWl0XCIsIG9wdHMpXG4gICAgfVxuXG4gICAgbGV0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybUVsLCB0YXJnZXRDdHgpXG4gICAgaWYoTGl2ZVVwbG9hZGVyLmhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCkpe1xuICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwdXNoID0gKCkgPT4gdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIG9wdHMsIG9uUmVwbHkpXG4gICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZVN1Ym1pdChmb3JtRWwsIHJlZiwgb3B0cywgcHVzaClcbiAgICB9IGVsc2UgaWYoTGl2ZVVwbG9hZGVyLmlucHV0c0F3YWl0aW5nUHJlZmxpZ2h0KGZvcm1FbCkubGVuZ3RoID4gMCl7XG4gICAgICBsZXQgW3JlZiwgZWxzXSA9IHJlZkdlbmVyYXRvcigpXG4gICAgICBsZXQgcHJveHlSZWZHZW4gPSAoKSA9PiBbcmVmLCBlbHMsIG9wdHNdXG4gICAgICB0aGlzLnVwbG9hZEZpbGVzKGZvcm1FbCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgKF91cGxvYWRzKSA9PiB7XG4gICAgICAgIGxldCBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oZm9ybUVsLCB7fSlcbiAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KHByb3h5UmVmR2VuLCBcImV2ZW50XCIsIHtcbiAgICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGZvcm1EYXRhLFxuICAgICAgICAgIGNpZDogY2lkXG4gICAgICAgIH0sIG9uUmVwbHkpXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGZvcm1FbClcbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwge1xuICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgIGNpZDogY2lkXG4gICAgICB9LCBvblJlcGx5KVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZEZpbGVzKGZvcm1FbCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgb25Db21wbGV0ZSl7XG4gICAgbGV0IGpvaW5Db3VudEF0VXBsb2FkID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgaW5wdXRFbHMgPSBMaXZlVXBsb2FkZXIuYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpXG4gICAgbGV0IG51bUZpbGVJbnB1dHNJblByb2dyZXNzID0gaW5wdXRFbHMubGVuZ3RoXG5cbiAgICAvLyBnZXQgZWFjaCBmaWxlIGlucHV0XG4gICAgaW5wdXRFbHMuZm9yRWFjaChpbnB1dEVsID0+IHtcbiAgICAgIGxldCB1cGxvYWRlciA9IG5ldyBMaXZlVXBsb2FkZXIoaW5wdXRFbCwgdGhpcywgKCkgPT4ge1xuICAgICAgICBudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcy0tXG4gICAgICAgIGlmKG51bUZpbGVJbnB1dHNJblByb2dyZXNzID09PSAwKXsgb25Db21wbGV0ZSgpIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnVwbG9hZGVyc1tpbnB1dEVsXSA9IHVwbG9hZGVyXG4gICAgICBsZXQgZW50cmllcyA9IHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkudG9QcmVmbGlnaHRQYXlsb2FkKCkpXG5cbiAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICByZWY6IGlucHV0RWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbXCJzZW5kaW5nIHByZWZsaWdodCByZXF1ZXN0XCIsIHBheWxvYWRdKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJhbGxvd191cGxvYWRcIiwgcGF5bG9hZCwgcmVzcCA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcImdvdCBwcmVmbGlnaHQgcmVzcG9uc2VcIiwgcmVzcF0pXG4gICAgICAgIGlmKHJlc3AuZXJyb3Ipe1xuICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmKVxuICAgICAgICAgIGxldCBbZW50cnlfcmVmLCByZWFzb25dID0gcmVzcC5lcnJvclxuICAgICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtgZXJyb3IgZm9yIGVudHJ5ICR7ZW50cnlfcmVmfWAsIHJlYXNvbl0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG9uRXJyb3IgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IGpvaW5Db3VudEF0VXBsb2FkKXsgY2FsbGJhY2soKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGxvYWRlci5pbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCB0aGlzLmxpdmVTb2NrZXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRpc3BhdGNoVXBsb2FkcyhuYW1lLCBmaWxlc09yQmxvYnMpe1xuICAgIGxldCBpbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyh0aGlzLmVsKS5maWx0ZXIoZWwgPT4gZWwubmFtZSA9PT0gbmFtZSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSBpZihpbnB1dHMubGVuZ3RoID4gMSl7IGxvZ0Vycm9yKGBkdXBsaWNhdGUgbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIHsgRE9NLmRpc3BhdGNoRXZlbnQoaW5wdXRzWzBdLCBQSFhfVFJBQ0tfVVBMT0FEUywge2ZpbGVzOiBmaWxlc09yQmxvYnN9KSB9XG4gIH1cblxuICBwdXNoRm9ybVJlY292ZXJ5KGZvcm0sIG5ld0NpZCwgY2FsbGJhY2spe1xuICAgIHRoaXMubGl2ZVNvY2tldC53aXRoaW5Pd25lcnMoZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgbGV0IGlucHV0ID0gZm9ybS5lbGVtZW50c1swXVxuICAgICAgbGV0IHBoeEV2ZW50ID0gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSB8fCBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG5cbiAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBpbnB1dC5uYW1lLCBuZXdDaWQ6IG5ld0NpZCwgY2FsbGJhY2s6IGNhbGxiYWNrfV0pXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hMaW5rUGF0Y2goaHJlZiwgdGFyZ2V0RWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgbGlua1JlZiA9IHRoaXMubGl2ZVNvY2tldC5zZXRQZW5kaW5nTGluayhocmVmKVxuICAgIGxldCByZWZHZW4gPSB0YXJnZXRFbCA/ICgpID0+IHRoaXMucHV0UmVmKFt0YXJnZXRFbF0sIFwiY2xpY2tcIikgOiBudWxsXG4gICAgbGV0IGZhbGxiYWNrID0gKCkgPT4gdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuXG4gICAgbGV0IHB1c2ggPSB0aGlzLnB1c2hXaXRoUmVwbHkocmVmR2VuLCBcImxpdmVfcGF0Y2hcIiwge3VybDogaHJlZn0sIHJlc3AgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZihyZXNwLmxpbmtfcmVkaXJlY3Qpe1xuICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlTWFpbihocmVmLCBudWxsLCBjYWxsYmFjaywgbGlua1JlZilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZih0aGlzLmxpdmVTb2NrZXQuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICAgICAgdGhpcy5ocmVmID0gaHJlZlxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKVxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKHB1c2gpe1xuICAgICAgcHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCBmYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgZmFsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGZvcm1zRm9yUmVjb3ZlcnkoaHRtbCl7XG4gICAgaWYodGhpcy5qb2luQ291bnQgPT09IDApeyByZXR1cm4gW10gfVxuXG4gICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcblxuICAgIHJldHVybiAoXG4gICAgICBET00uYWxsKHRoaXMuZWwsIGBmb3JtWyR7cGh4Q2hhbmdlfV1gKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5pZCAmJiB0aGlzLm93bnNFbGVtZW50KGZvcm0pKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5lbGVtZW50cy5sZW5ndGggPiAwKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSAhPT0gXCJpZ25vcmVcIilcbiAgICAgICAgLm1hcChmb3JtID0+IHtcbiAgICAgICAgICBsZXQgbmV3Rm9ybSA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcihgZm9ybVtpZD1cIiR7Zm9ybS5pZH1cIl1bJHtwaHhDaGFuZ2V9PVwiJHtmb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpfVwiXWApXG4gICAgICAgICAgaWYobmV3Rm9ybSl7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm0sIG5ld0Zvcm0sIHRoaXMudGFyZ2V0Q29tcG9uZW50SUQobmV3Rm9ybSldXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybSwgbnVsbCwgbnVsbF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoKFtmb3JtLCBuZXdGb3JtLCBuZXdDaWRdKSA9PiBuZXdGb3JtKVxuICAgIClcbiAgfVxuXG4gIG1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcyl7XG4gICAgbGV0IHdpbGxEZXN0cm95Q0lEcyA9IGRlc3Ryb3llZENJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgIH0pXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5wcnVuaW5nQ0lEcy5wdXNoKC4uLndpbGxEZXN0cm95Q0lEcylcblxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc193aWxsX2Rlc3Ryb3lcIiwge2NpZHM6IHdpbGxEZXN0cm95Q0lEc30sICgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNpZHMgYXJlIGVpdGhlciBiYWNrIG9uIHRoZSBwYWdlIG9yIHRoZXkgd2lsbCBiZSBmdWxseSByZW1vdmVkLFxuICAgICAgICAvLyBzbyB3ZSBjYW4gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgcHJ1bmluZ0NJRHMuXG4gICAgICAgIHRoaXMucHJ1bmluZ0NJRHMgPSB0aGlzLnBydW5pbmdDSURzLmZpbHRlcihjaWQgPT4gd2lsbERlc3Ryb3lDSURzLmluZGV4T2YoY2lkKSAhPT0gLTEpXG5cbiAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgIC8vIGlmIHRoZXkgd2VyZSBhZGRlZCBiYWNrLCB3ZSBkb24ndCBhY3R1YWxseSBkZXN0cm95IHRoZW0uXG4gICAgICAgIGxldCBjb21wbGV0ZWx5RGVzdHJveUNJRHMgPSB3aWxsRGVzdHJveUNJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgfSlcblxuICAgICAgICBpZihjb21wbGV0ZWx5RGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30sIChyZXNwKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvd25zRWxlbWVudChlbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKSA9PT0gdGhpcy5pZCB8fFxuICAgICAgbWF5YmUoZWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIG5vZGUgPT4gbm9kZS5pZCkgPT09IHRoaXMuaWRcbiAgfVxuXG4gIHN1Ym1pdEZvcm0oZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgb3B0cyA9IHt9KXtcbiAgICBET00ucHV0UHJpdmF0ZShmb3JtLCBQSFhfSEFTX1NVQk1JVFRFRCwgdHJ1ZSlcbiAgICBsZXQgcGh4RmVlZGJhY2sgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKVxuICAgIGxldCBpbnB1dHMgPSBBcnJheS5mcm9tKGZvcm0uZWxlbWVudHMpXG4gICAgdGhpcy5saXZlU29ja2V0LmJsdXJBY3RpdmVFbGVtZW50KHRoaXMpXG4gICAgdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBvcHRzLCAoKSA9PiB7XG4gICAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBET00uc2hvd0Vycm9yKGlucHV0LCBwaHhGZWVkYmFjaykpXG4gICAgICB0aGlzLmxpdmVTb2NrZXQucmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpXG4gICAgfSlcbiAgfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhraW5kKSB9XG59XG4iLCAiLyoqIEluaXRpYWxpemVzIHRoZSBMaXZlU29ja2V0XG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3NzOi8vZXhhbXBsZS5jb20vbGl2ZVwiYCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvbGl2ZVwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7UGhvZW5peC5Tb2NrZXR9IHNvY2tldCAtIHRoZSByZXF1aXJlZCBQaG9lbml4IFNvY2tldCBjbGFzcyBpbXBvcnRlZCBmcm9tIFwicGhvZW5peFwiLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbiAqICAgICBpbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG4gKiAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24uIE91dHNpZGUgb2Yga2V5cyBsaXN0ZWQgYmVsb3csIGFsbFxuICogY29uZmlndXJhdGlvbiBpcyBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIFBob2VuaXggU29ja2V0IGNvbnN0cnVjdG9yLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmRlZmF1bHRzXSAtIFRoZSBvcHRpb25hbCBkZWZhdWx0cyB0byB1c2UgZm9yIHZhcmlvdXMgYmluZGluZ3MsXG4gKiBzdWNoIGFzIGBwaHgtZGVib3VuY2VgLiBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKlxuICogICAtIGRlYm91bmNlIC0gdGhlIG1pbGxpc2Vjb25kIHBoeC1kZWJvdW5jZSB0aW1lLiBEZWZhdWx0cyAzMDBcbiAqICAgLSB0aHJvdHRsZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtdGhyb3R0bGUgdGltZS4gRGVmYXVsdHMgMzAwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMucGFyYW1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3IgcGFzc2luZyBjb25uZWN0IHBhcmFtcy5cbiAqIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBMaXZlVmlldy4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIChlbCkgPT4ge3ZpZXc6IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtbXktdmlldy1uYW1lXCIsIHRva2VuOiB3aW5kb3cubXlUb2tlbn1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluZGluZ1ByZWZpeF0gLSBUaGUgb3B0aW9uYWwgcHJlZml4IHRvIHVzZSBmb3IgYWxsIHBoeCBET00gYW5ub3RhdGlvbnMuXG4gKiBEZWZhdWx0cyB0byBcInBoeC1cIi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5ob29rc10gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IGZvciByZWZlcmVuY2luZyBMaXZlVmlldyBob29rIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy51cGxvYWRlcnNdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgdXBsb2FkZXIgY2FsbGJhY2tzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5sb2FkZXJUaW1lb3V0XSAtIFRoZSBvcHRpb25hbCBkZWxheSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYXBwbHlcbiAqIGxvYWRpbmcgc3RhdGVzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5tYXhSZWxvYWRzXSAtIFRoZSBtYXhpbXVtIHJlbG9hZHMgYmVmb3JlIGVudGVyaW5nIGZhaWxzYWZlIG1vZGUuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1pbl0gLSBUaGUgbWluaW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMucmVsb2FkSml0dGVyTWF4XSAtIFRoZSBtYXhpbXVtIHRpbWUgYmV0d2VlbiBub3JtYWwgcmVsb2FkIGF0dGVtcHRzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5mYWlsc2FmZUppdHRlcl0gLSBUaGUgdGltZSBiZXR3ZWVuIHJlbG9hZCBhdHRlbXB0cyBpbiBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmlld0xvZ2dlcl0gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdG8gbG9nIGRlYnVnIGluZm9ybWF0aW9uLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLm1ldGFkYXRhXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgbWFwcGluZyBldmVudCBuYW1lcyB0byBmdW5jdGlvbnMgZm9yXG4gKiBwb3B1bGF0aW5nIGV2ZW50IG1ldGFkYXRhLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgbWV0YWRhdGE6IHtcbiAqICAgICAgIGNsaWNrOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gKiAgICAgICAgICAgbWV0YUtleTogZS5tZXRhS2V5LFxuICogICAgICAgICAgIGRldGFpbDogZS5kZXRhaWwgfHwgMSxcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIGtleWRvd246IChlLCBlbCkgPT4ge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGtleTogZS5rZXksXG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBzaGlmdEtleTogZS5zaGlmdEtleVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnNlc3Npb25TdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCB3aGVuIExpdmVWaWV3IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBzZXNzaW9uU3RvcmFnZWAuICBGb3IgZXhhbXBsZSwgVGhpcyBjb3VsZFxuICogaGFwcGVuIGlmIGEgc2l0ZSBsb2FkcyBhIGNyb3NzLWRvbWFpbiBMaXZlVmlldyBpbiBhbiBpZnJhbWUuICBFeGFtcGxlIHVzYWdlOlxuICpcbiAqICAgICBjbGFzcyBJbk1lbW9yeVN0b3JhZ2Uge1xuICogICAgICAgY29uc3RydWN0b3IoKSB7IHRoaXMuc3RvcmFnZSA9IHt9IH1cbiAqICAgICAgIGdldEl0ZW0oa2V5TmFtZSkgeyByZXR1cm4gdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHJlbW92ZUl0ZW0oa2V5TmFtZSkgeyBkZWxldGUgdGhpcy5zdG9yYWdlW2tleU5hbWVdIH1cbiAqICAgICAgIHNldEl0ZW0oa2V5TmFtZSwga2V5VmFsdWUpIHsgdGhpcy5zdG9yYWdlW2tleU5hbWVdID0ga2V5VmFsdWUgfVxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdHMubG9jYWxTdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCBmb3Igd2hlbiBMaXZlVmlldyB3b24ndCBoYXZlIGFjY2VzcyB0byBgbG9jYWxTdG9yYWdlYC5cbiAqIFNlZSBgb3B0cy5zZXNzaW9uU3RvcmFnZWAgZm9yIGV4YW1wbGVzLlxuKi9cblxuaW1wb3J0IHtcbiAgQklORElOR19QUkVGSVgsXG4gIENPTlNFQ1VUSVZFX1JFTE9BRFMsXG4gIERFRkFVTFRTLFxuICBGQUlMU0FGRV9KSVRURVIsXG4gIExPQURFUl9USU1FT1VULFxuICBNQVhfUkVMT0FEUyxcbiAgUEhYX0RFQk9VTkNFLFxuICBQSFhfRFJPUF9UQVJHRVQsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0tFWSxcbiAgUEhYX0xJTktfU1RBVEUsXG4gIFBIWF9MSVZFX0xJTkssXG4gIFBIWF9MVl9ERUJVRyxcbiAgUEhYX0xWX0xBVEVOQ1lfU0lNLFxuICBQSFhfTFZfUFJPRklMRSxcbiAgUEhYX01BSU4sXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9WSUVXX1NFTEVDVE9SLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1RIUk9UVExFLFxuICBQSFhfVFJBQ0tfVVBMT0FEUyxcbiAgUEhYX1NFU1NJT04sXG4gIFJFTE9BRF9KSVRURVJfTUlOLFxuICBSRUxPQURfSklUVEVSX01BWCxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgY2xvbmUsXG4gIGNsb3Nlc3RQaHhCaW5kaW5nLFxuICBjbG9zdXJlLFxuICBkZWJ1ZyxcbiAgaXNPYmplY3QsXG4gIG1heWJlXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IEJyb3dzZXIgZnJvbSBcIi4vYnJvd3NlclwiXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgSG9va3MgZnJvbSBcIi4vaG9va3NcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBWaWV3IGZyb20gXCIuL3ZpZXdcIlxuaW1wb3J0IEpTIGZyb20gXCIuL2pzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGl2ZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKHVybCwgcGh4U29ja2V0LCBvcHRzID0ge30pe1xuICAgIHRoaXMudW5sb2FkZWQgPSBmYWxzZVxuICAgIGlmKCFwaHhTb2NrZXQgfHwgcGh4U29ja2V0LmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiT2JqZWN0XCIpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcbiAgICAgIGEgcGhvZW5peCBTb2NrZXQgbXVzdCBiZSBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHRoZSBMaXZlU29ja2V0IGNvbnN0cnVjdG9yLiBGb3IgZXhhbXBsZTpcblxuICAgICAgICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4gICAgICAgICAgaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuICAgICAgICAgIGxldCBsaXZlU29ja2V0ID0gbmV3IExpdmVTb2NrZXQoXCIvbGl2ZVwiLCBTb2NrZXQsIHsuLi59KVxuICAgICAgYClcbiAgICB9XG4gICAgdGhpcy5zb2NrZXQgPSBuZXcgcGh4U29ja2V0KHVybCwgb3B0cylcbiAgICB0aGlzLmJpbmRpbmdQcmVmaXggPSBvcHRzLmJpbmRpbmdQcmVmaXggfHwgQklORElOR19QUkVGSVhcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKG9wdHMucGFyYW1zIHx8IHt9KVxuICAgIHRoaXMudmlld0xvZ2dlciA9IG9wdHMudmlld0xvZ2dlclxuICAgIHRoaXMubWV0YWRhdGFDYWxsYmFja3MgPSBvcHRzLm1ldGFkYXRhIHx8IHt9XG4gICAgdGhpcy5kZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oY2xvbmUoREVGQVVMVFMpLCBvcHRzLmRlZmF1bHRzIHx8IHt9KVxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IG51bGxcbiAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gICAgdGhpcy5tYWluID0gbnVsbFxuICAgIHRoaXMubGlua1JlZiA9IDFcbiAgICB0aGlzLmNsaWNrUmVmID0gMVxuICAgIHRoaXMucm9vdHMgPSB7fVxuICAgIHRoaXMuaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKHdpbmRvdy5sb2NhdGlvbilcbiAgICB0aGlzLmhvb2tzID0gb3B0cy5ob29rcyB8fCB7fVxuICAgIHRoaXMudXBsb2FkZXJzID0gb3B0cy51cGxvYWRlcnMgfHwge31cbiAgICB0aGlzLmxvYWRlclRpbWVvdXQgPSBvcHRzLmxvYWRlclRpbWVvdXQgfHwgTE9BREVSX1RJTUVPVVRcbiAgICB0aGlzLm1heFJlbG9hZHMgPSBvcHRzLm1heFJlbG9hZHMgfHwgTUFYX1JFTE9BRFNcbiAgICB0aGlzLnJlbG9hZEppdHRlck1pbiA9IG9wdHMucmVsb2FkSml0dGVyTWluIHx8IFJFTE9BRF9KSVRURVJfTUlOXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNYXggPSBvcHRzLnJlbG9hZEppdHRlck1heCB8fCBSRUxPQURfSklUVEVSX01BWFxuICAgIHRoaXMuZmFpbHNhZmVKaXR0ZXIgPSBvcHRzLmZhaWxzYWZlSml0dGVyIHx8IEZBSUxTQUZFX0pJVFRFUlxuICAgIHRoaXMubG9jYWxTdG9yYWdlID0gb3B0cy5sb2NhbFN0b3JhZ2UgfHwgd2luZG93LmxvY2FsU3RvcmFnZVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2UgPSBvcHRzLnNlc3Npb25TdG9yYWdlIHx8IHdpbmRvdy5zZXNzaW9uU3RvcmFnZVxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IGZhbHNlXG4gICAgdGhpcy5kb21DYWxsYmFja3MgPSBPYmplY3QuYXNzaWduKHtvbk5vZGVBZGRlZDogY2xvc3VyZSgpLCBvbkJlZm9yZUVsVXBkYXRlZDogY2xvc3VyZSgpfSwgb3B0cy5kb20gfHwge30pXG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBUcmFuc2l0aW9uU2V0KClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9lID0+IHtcbiAgICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgfSlcbiAgICB0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgaWYodGhpcy5pc1VubG9hZGVkKCkpe1xuICAgICAgICAvLyByZWxvYWQgcGFnZSBpZiBiZWluZyByZXN0b3JlZCBmcm9tIGJhY2svZm9yd2FyZCBjYWNoZSBhbmQgYnJvd3NlciBkb2VzIG5vdCBlbWl0IFwicGFnZXNob3dcIlxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gcHVibGljXG5cbiAgaXNQcm9maWxlRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9QUk9GSUxFKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGlzRGVidWdFbmFibGVkKCl7IHJldHVybiB0aGlzLnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0RFQlVHKSA9PT0gXCJ0cnVlXCIgfVxuXG4gIGVuYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgZW5hYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBkaXNhYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9ERUJVRykgfVxuXG4gIGRpc2FibGVQcm9maWxpbmcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9QUk9GSUxFKSB9XG5cbiAgZW5hYmxlTGF0ZW5jeVNpbSh1cHBlckJvdW5kTXMpe1xuICAgIHRoaXMuZW5hYmxlRGVidWcoKVxuICAgIGNvbnNvbGUubG9nKFwibGF0ZW5jeSBzaW11bGF0b3IgZW5hYmxlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoaXMgYnJvd3NlciBzZXNzaW9uLiBDYWxsIGRpc2FibGVMYXRlbmN5U2ltKCkgdG8gZGlzYWJsZVwiKVxuICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0sIHVwcGVyQm91bmRNcylcbiAgfVxuXG4gIGRpc2FibGVMYXRlbmN5U2ltKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfTEFURU5DWV9TSU0pIH1cblxuICBnZXRMYXRlbmN5U2ltKCl7XG4gICAgbGV0IHN0ciA9IHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0pXG4gICAgcmV0dXJuIHN0ciA/IHBhcnNlSW50KHN0cikgOiBudWxsXG4gIH1cblxuICBnZXRTb2NrZXQoKXsgcmV0dXJuIHRoaXMuc29ja2V0IH1cblxuICBjb25uZWN0KCl7XG4gICAgbGV0IGRvQ29ubmVjdCA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuam9pblJvb3RWaWV3cygpKXtcbiAgICAgICAgdGhpcy5iaW5kVG9wTGV2ZWxFdmVudHMoKVxuICAgICAgICB0aGlzLnNvY2tldC5jb25uZWN0KClcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoW1wiY29tcGxldGVcIiwgXCJsb2FkZWRcIiwgXCJpbnRlcmFjdGl2ZVwiXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IDApe1xuICAgICAgZG9Db25uZWN0KClcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gZG9Db25uZWN0KCkpXG4gICAgfVxuICB9XG5cbiAgZGlzY29ubmVjdChjYWxsYmFjayl7IHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoY2FsbGJhY2spIH1cblxuICBleGVjSlMoZWwsIGVuY29kZWRKUywgZXZlbnRUeXBlID0gbnVsbCl7XG4gICAgdGhpcy5vd25lcihlbCwgdmlldyA9PiBKUy5leGVjKGV2ZW50VHlwZSwgZW5jb2RlZEpTLCB2aWV3LCBlbCkpXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgdHJpZ2dlckRPTShraW5kLCBhcmdzKXsgdGhpcy5kb21DYWxsYmFja3Nba2luZF0oLi4uYXJncykgfVxuXG4gIHRpbWUobmFtZSwgZnVuYyl7XG4gICAgaWYoIXRoaXMuaXNQcm9maWxlRW5hYmxlZCgpIHx8ICFjb25zb2xlLnRpbWUpeyByZXR1cm4gZnVuYygpIH1cbiAgICBjb25zb2xlLnRpbWUobmFtZSlcbiAgICBsZXQgcmVzdWx0ID0gZnVuYygpXG4gICAgY29uc29sZS50aW1lRW5kKG5hbWUpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgbG9nKHZpZXcsIGtpbmQsIG1zZ0NhbGxiYWNrKXtcbiAgICBpZih0aGlzLnZpZXdMb2dnZXIpe1xuICAgICAgbGV0IFttc2csIG9ial0gPSBtc2dDYWxsYmFjaygpXG4gICAgICB0aGlzLnZpZXdMb2dnZXIodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfSBlbHNlIGlmKHRoaXMuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIGRlYnVnKHZpZXcsIGtpbmQsIG1zZywgb2JqKVxuICAgIH1cbiAgfVxuXG4gIHJlcXVlc3RET01VcGRhdGUoY2FsbGJhY2spe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuYWZ0ZXIoY2FsbGJhY2spXG4gIH1cblxuICB0cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSA9IGZ1bmN0aW9uKCl7fSl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGRUcmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsIG9uRG9uZSlcbiAgfVxuXG4gIG9uQ2hhbm5lbChjaGFubmVsLCBldmVudCwgY2Ipe1xuICAgIGNoYW5uZWwub24oZXZlbnQsIGRhdGEgPT4ge1xuICAgICAgbGV0IGxhdGVuY3kgPSB0aGlzLmdldExhdGVuY3lTaW0oKVxuICAgICAgaWYoIWxhdGVuY3kpe1xuICAgICAgICBjYihkYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coYHNpbXVsYXRpbmcgJHtsYXRlbmN5fW1zIG9mIGxhdGVuY3kgZnJvbSBzZXJ2ZXIgdG8gY2xpZW50YClcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBjYihkYXRhKSwgbGF0ZW5jeSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgd3JhcFB1c2godmlldywgb3B0cywgcHVzaCl7XG4gICAgbGV0IGxhdGVuY3kgPSB0aGlzLmdldExhdGVuY3lTaW0oKVxuICAgIGxldCBvbGRKb2luQ291bnQgPSB2aWV3LmpvaW5Db3VudFxuICAgIGlmKCFsYXRlbmN5KXtcbiAgICAgIGlmKG9wdHMudGltZW91dCl7XG4gICAgICAgIHJldHVybiBwdXNoKCkucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgICAgIGlmKHZpZXcuam9pbkNvdW50ID09PSBvbGRKb2luQ291bnQgJiYgIXZpZXcuaXNEZXN0cm95ZWQoKSl7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodmlldywgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZyh2aWV3LCBcInRpbWVvdXRcIiwgKCkgPT4gW1wicmVjZWl2ZWQgdGltZW91dCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggc2VydmVyLiBGYWxsaW5nIGJhY2sgdG8gaGFyZCByZWZyZXNoIGZvciByZWNvdmVyeVwiXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHB1c2goKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBzaW11bGF0aW5nICR7bGF0ZW5jeX1tcyBvZiBsYXRlbmN5IGZyb20gY2xpZW50IHRvIHNlcnZlcmApXG4gICAgbGV0IGZha2VQdXNoID0ge1xuICAgICAgcmVjZWl2ZXM6IFtdLFxuICAgICAgcmVjZWl2ZShraW5kLCBjYil7IHRoaXMucmVjZWl2ZXMucHVzaChba2luZCwgY2JdKSB9XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYodmlldy5pc0Rlc3Ryb3llZCgpKXsgcmV0dXJuIH1cbiAgICAgIGZha2VQdXNoLnJlY2VpdmVzLnJlZHVjZSgoYWNjLCBba2luZCwgY2JdKSA9PiBhY2MucmVjZWl2ZShraW5kLCBjYiksIHB1c2goKSlcbiAgICB9LCBsYXRlbmN5KVxuICAgIHJldHVybiBmYWtlUHVzaFxuICB9XG5cbiAgcmVsb2FkV2l0aEppdHRlcih2aWV3LCBsb2cpe1xuICAgIHZpZXcuZGVzdHJveSgpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICBsZXQgbWluTXMgPSB0aGlzLnJlbG9hZEppdHRlck1pblxuICAgIGxldCBtYXhNcyA9IHRoaXMucmVsb2FkSml0dGVyTWF4XG4gICAgbGV0IGFmdGVyTXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4TXMgLSBtaW5NcyArIDEpKSArIG1pbk1zXG4gICAgbGV0IHRyaWVzID0gQnJvd3Nlci51cGRhdGVMb2NhbCh0aGlzLmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTLCAwLCBjb3VudCA9PiBjb3VudCArIDEpXG4gICAgbG9nID8gbG9nKCkgOiB0aGlzLmxvZyh2aWV3LCBcImpvaW5cIiwgKCkgPT4gW2BlbmNvdW50ZXJlZCAke3RyaWVzfSBjb25zZWN1dGl2ZSByZWxvYWRzYF0pXG4gICAgaWYodHJpZXMgPiB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgdGhpcy5sb2codmlldywgXCJqb2luXCIsICgpID0+IFtgZXhjZWVkZWQgJHt0aGlzLm1heFJlbG9hZHN9IGNvbnNlY3V0aXZlIHJlbG9hZHMuIEVudGVyaW5nIGZhaWxzYWZlIG1vZGVgXSlcbiAgICAgIGFmdGVyTXMgPSB0aGlzLmZhaWxzYWZlSml0dGVyXG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYodGhpcy5oYXNQZW5kaW5nTGluaygpKXtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgYWZ0ZXJNcylcbiAgfVxuXG4gIGdldEhvb2tDYWxsYmFja3MobmFtZSl7XG4gICAgcmV0dXJuIG5hbWUgJiYgbmFtZS5zdGFydHNXaXRoKFwiUGhvZW5peC5cIikgPyBIb29rc1tuYW1lLnNwbGl0KFwiLlwiKVsxXV0gOiB0aGlzLmhvb2tzW25hbWVdXG4gIH1cblxuICBpc1VubG9hZGVkKCl7IHJldHVybiB0aGlzLnVubG9hZGVkIH1cblxuICBpc0Nvbm5lY3RlZCgpeyByZXR1cm4gdGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSB9XG5cbiAgZ2V0QmluZGluZ1ByZWZpeCgpeyByZXR1cm4gdGhpcy5iaW5kaW5nUHJlZml4IH1cblxuICBiaW5kaW5nKGtpbmQpeyByZXR1cm4gYCR7dGhpcy5nZXRCaW5kaW5nUHJlZml4KCl9JHtraW5kfWAgfVxuXG4gIGNoYW5uZWwodG9waWMsIHBhcmFtcyl7IHJldHVybiB0aGlzLnNvY2tldC5jaGFubmVsKHRvcGljLCBwYXJhbXMpIH1cblxuICBqb2luUm9vdFZpZXdzKCl7XG4gICAgbGV0IHJvb3RzRm91bmQgPSBmYWxzZVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGAke1BIWF9WSUVXX1NFTEVDVE9SfTpub3QoWyR7UEhYX1BBUkVOVF9JRH1dKWAsIHJvb3RFbCA9PiB7XG4gICAgICBpZighdGhpcy5nZXRSb290QnlJZChyb290RWwuaWQpKXtcbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLm5ld1Jvb3RWaWV3KHJvb3RFbClcbiAgICAgICAgdmlldy5zZXRIcmVmKHRoaXMuZ2V0SHJlZigpKVxuICAgICAgICB2aWV3LmpvaW4oKVxuICAgICAgICBpZihyb290RWwuZ2V0QXR0cmlidXRlKFBIWF9NQUlOKSl7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgfVxuICAgICAgcm9vdHNGb3VuZCA9IHRydWVcbiAgICB9KVxuICAgIHJldHVybiByb290c0ZvdW5kXG4gIH1cblxuICByZWRpcmVjdCh0bywgZmxhc2gpe1xuICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gICAgQnJvd3Nlci5yZWRpcmVjdCh0bywgZmxhc2gpXG4gIH1cblxuICByZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgY2FsbGJhY2sgPSBudWxsLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgbGV0IG9sZE1haW5FbCA9IHRoaXMubWFpbi5lbFxuICAgIGxldCBuZXdNYWluRWwgPSBET00uY2xvbmVOb2RlKG9sZE1haW5FbCwgXCJcIilcbiAgICB0aGlzLm1haW4uc2hvd0xvYWRlcih0aGlzLmxvYWRlclRpbWVvdXQpXG4gICAgdGhpcy5tYWluLmRlc3Ryb3koKVxuXG4gICAgdGhpcy5tYWluID0gdGhpcy5uZXdSb290VmlldyhuZXdNYWluRWwsIGZsYXNoKVxuICAgIHRoaXMubWFpbi5zZXRSZWRpcmVjdChocmVmKVxuICAgIHRoaXMudHJhbnNpdGlvblJlbW92ZXMoKVxuICAgIHRoaXMubWFpbi5qb2luKChqb2luQ291bnQsIG9uRG9uZSkgPT4ge1xuICAgICAgaWYoam9pbkNvdW50ID09PSAxICYmIHRoaXMuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICAgIERPTS5maW5kUGh4U3RpY2t5KGRvY3VtZW50KS5mb3JFYWNoKGVsID0+IG5ld01haW5FbC5hcHBlbmRDaGlsZChlbCkpXG4gICAgICAgICAgb2xkTWFpbkVsLnJlcGxhY2VXaXRoKG5ld01haW5FbClcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICAgICAgb25Eb25lKClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJhbnNpdGlvblJlbW92ZXMoZWxlbWVudHMpe1xuICAgIGxldCByZW1vdmVBdHRyID0gdGhpcy5iaW5kaW5nKFwicmVtb3ZlXCIpXG4gICAgZWxlbWVudHMgPSBlbGVtZW50cyB8fCBET00uYWxsKGRvY3VtZW50LCBgWyR7cmVtb3ZlQXR0cn1dYClcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGlmKGRvY3VtZW50LmJvZHkuY29udGFpbnMoZWwpKXsgLy8gc2tpcCBjaGlsZHJlbiBhbHJlYWR5IHJlbW92ZWRcbiAgICAgICAgdGhpcy5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShyZW1vdmVBdHRyKSwgXCJyZW1vdmVcIilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgaXNQaHhWaWV3KGVsKXsgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsIH1cblxuICBuZXdSb290VmlldyhlbCwgZmxhc2gpe1xuICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMsIG51bGwsIGZsYXNoKVxuICAgIHRoaXMucm9vdHNbdmlldy5pZF0gPSB2aWV3XG4gICAgcmV0dXJuIHZpZXdcbiAgfVxuXG4gIG93bmVyKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgdmlldyA9IG1heWJlKGNoaWxkRWwuY2xvc2VzdChQSFhfVklFV19TRUxFQ1RPUiksIGVsID0+IHRoaXMuZ2V0Vmlld0J5RWwoZWwpKSB8fCB0aGlzLm1haW5cbiAgICBpZih2aWV3KXsgY2FsbGJhY2sodmlldykgfVxuICB9XG5cbiAgd2l0aGluT3duZXJzKGNoaWxkRWwsIGNhbGxiYWNrKXtcbiAgICB0aGlzLm93bmVyKGNoaWxkRWwsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgY2hpbGRFbCkpXG4gIH1cblxuICBnZXRWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3RJZCA9IGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRClcbiAgICByZXR1cm4gbWF5YmUodGhpcy5nZXRSb290QnlJZChyb290SWQpLCByb290ID0+IHJvb3QuZ2V0RGVzY2VuZGVudEJ5RWwoZWwpKVxuICB9XG5cbiAgZ2V0Um9vdEJ5SWQoaWQpeyByZXR1cm4gdGhpcy5yb290c1tpZF0gfVxuXG4gIGRlc3Ryb3lBbGxWaWV3cygpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy5yb290cyl7XG4gICAgICB0aGlzLnJvb3RzW2lkXS5kZXN0cm95KClcbiAgICAgIGRlbGV0ZSB0aGlzLnJvb3RzW2lkXVxuICAgIH1cbiAgfVxuXG4gIGRlc3Ryb3lWaWV3QnlFbChlbCl7XG4gICAgbGV0IHJvb3QgPSB0aGlzLmdldFJvb3RCeUlkKGVsLmdldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCkpXG4gICAgaWYocm9vdCAmJiByb290LmlkID09PSBlbC5pZCl7XG4gICAgICByb290LmRlc3Ryb3koKVxuICAgICAgZGVsZXRlIHRoaXMucm9vdHNbcm9vdC5pZF1cbiAgICB9IGVsc2UgaWYocm9vdCl7XG4gICAgICByb290LmRlc3Ryb3lEZXNjZW5kZW50KGVsLmlkKVxuICAgIH1cbiAgfVxuXG4gIHNldEFjdGl2ZUVsZW1lbnQodGFyZ2V0KXtcbiAgICBpZih0aGlzLmFjdGl2ZUVsZW1lbnQgPT09IHRhcmdldCl7IHJldHVybiB9XG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gdGFyZ2V0XG4gICAgbGV0IGNhbmNlbCA9ICgpID0+IHtcbiAgICAgIGlmKHRhcmdldCA9PT0gdGhpcy5hY3RpdmVFbGVtZW50KXsgdGhpcy5hY3RpdmVFbGVtZW50ID0gbnVsbCB9XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcylcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcylcbiAgICB9XG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGNhbmNlbClcbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGNhbmNlbClcbiAgfVxuXG4gIGdldEFjdGl2ZUVsZW1lbnQoKXtcbiAgICBpZihkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KXtcbiAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiBiZSBudWxsIGluIEludGVybmV0IEV4cGxvcmVyIDExXG4gICAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5XG4gICAgfVxuICB9XG5cbiAgZHJvcEFjdGl2ZUVsZW1lbnQodmlldyl7XG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICYmIHZpZXcub3duc0VsZW1lbnQodGhpcy5wcmV2QWN0aXZlKSl7XG4gICAgICB0aGlzLnByZXZBY3RpdmUgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgcmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpe1xuICAgIGlmKHRoaXMucHJldkFjdGl2ZSAmJiB0aGlzLnByZXZBY3RpdmUgIT09IGRvY3VtZW50LmJvZHkpe1xuICAgICAgdGhpcy5wcmV2QWN0aXZlLmZvY3VzKClcbiAgICB9XG4gIH1cblxuICBibHVyQWN0aXZlRWxlbWVudCgpe1xuICAgIHRoaXMucHJldkFjdGl2ZSA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICE9PSBkb2N1bWVudC5ib2R5KXsgdGhpcy5wcmV2QWN0aXZlLmJsdXIoKSB9XG4gIH1cblxuICBiaW5kVG9wTGV2ZWxFdmVudHMoKXtcbiAgICBpZih0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMpeyByZXR1cm4gfVxuXG4gICAgdGhpcy5ib3VuZFRvcExldmVsRXZlbnRzID0gdHJ1ZVxuICAgIC8vIGVudGVyIGZhaWxzYWZlIHJlbG9hZCBpZiBzZXJ2ZXIgaGFzIGdvbmUgYXdheSBpbnRlbnRpb25hbGx5LCBzdWNoIGFzIFwiZGlzY29ubmVjdFwiIGJyb2FkY2FzdFxuICAgIHRoaXMuc29ja2V0Lm9uQ2xvc2UoZXZlbnQgPT4ge1xuICAgICAgaWYoZXZlbnQuY29kZSA9PT0gMTAwMCAmJiB0aGlzLm1haW4pe1xuICAgICAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodGhpcy5tYWluKVxuICAgICAgfVxuICAgIH0pXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCl7IH0pIC8vIGVuc3VyZSBhbGwgY2xpY2sgZXZlbnRzIGJ1YmJsZSBmb3IgbW9iaWxlIFNhZmFyaVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZXNob3dcIiwgZSA9PiB7XG4gICAgICBpZihlLnBlcnNpc3RlZCl7IC8vIHJlbG9hZCBwYWdlIGlmIGJlaW5nIHJlc3RvcmVkIGZyb20gYmFjay9mb3J3YXJkIGNhY2hlXG4gICAgICAgIHRoaXMuZ2V0U29ja2V0KCkuZGlzY29ubmVjdCgpXG4gICAgICAgIHRoaXMud2l0aFBhZ2VMb2FkaW5nKHt0bzogd2luZG93LmxvY2F0aW9uLmhyZWYsIGtpbmQ6IFwicmVkaXJlY3RcIn0pXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0sIHRydWUpXG4gICAgdGhpcy5iaW5kTmF2KClcbiAgICB0aGlzLmJpbmRDbGlja3MoKVxuICAgIHRoaXMuYmluZEZvcm1zKClcbiAgICB0aGlzLmJpbmQoe2tleXVwOiBcImtleXVwXCIsIGtleWRvd246IFwia2V5ZG93blwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGxldCBtYXRjaEtleSA9IHRhcmdldEVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0tFWSkpXG4gICAgICBsZXQgcHJlc3NlZEtleSA9IGUua2V5ICYmIGUua2V5LnRvTG93ZXJDYXNlKCkgLy8gY2hyb21lIGNsaWNrZWQgYXV0b2NvbXBsZXRlcyBzZW5kIGEga2V5ZG93biB3aXRob3V0IGtleVxuICAgICAgaWYobWF0Y2hLZXkgJiYgbWF0Y2hLZXkudG9Mb3dlckNhc2UoKSAhPT0gcHJlc3NlZEtleSl7IHJldHVybiB9XG5cbiAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiZm9jdXNvdXRcIiwgZm9jdXM6IFwiZm9jdXNpblwifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCBwaHhFdmVudCwgZXZlbnRUYXJnZXQpID0+IHtcbiAgICAgIGlmKCFldmVudFRhcmdldCl7XG4gICAgICAgIGxldCBkYXRhID0ge2tleTogZS5rZXksIC4uLnRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKX1cbiAgICAgICAgSlMuZXhlYyh0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMuYmluZCh7Ymx1cjogXCJibHVyXCIsIGZvY3VzOiBcImZvY3VzXCJ9LCAoZSwgdHlwZSwgdmlldywgdGFyZ2V0RWwsIHRhcmdldEN0eCwgcGh4RXZlbnQsIHBoeFRhcmdldCkgPT4ge1xuICAgICAgLy8gYmx1ciBhbmQgZm9jdXMgYXJlIHRyaWdnZXJlZCBvbiBkb2N1bWVudCBhbmQgd2luZG93LiBEaXNjYXJkIG9uZSB0byBhdm9pZCBkdXBzXG4gICAgICBpZihwaHhUYXJnZXQgPT09IFwid2luZG93XCIpe1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZXZlbnRNZXRhKHR5cGUsIGUsIHRhcmdldEVsKVxuICAgICAgICBKUy5leGVjKHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgICAgfVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBlID0+IGUucHJldmVudERlZmF1bHQoKSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRyb3BcIiwgZSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGxldCBkcm9wVGFyZ2V0SWQgPSBtYXliZShjbG9zZXN0UGh4QmluZGluZyhlLnRhcmdldCwgdGhpcy5iaW5kaW5nKFBIWF9EUk9QX1RBUkdFVCkpLCB0cnVlVGFyZ2V0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRydWVUYXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKVxuICAgICAgfSlcbiAgICAgIGxldCBkcm9wVGFyZ2V0ID0gZHJvcFRhcmdldElkICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRyb3BUYXJnZXRJZClcbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kYXRhVHJhbnNmZXIuZmlsZXMgfHwgW10pXG4gICAgICBpZighZHJvcFRhcmdldCB8fCBkcm9wVGFyZ2V0LmRpc2FibGVkIHx8IGZpbGVzLmxlbmd0aCA9PT0gMCB8fCAhKGRyb3BUYXJnZXQuZmlsZXMgaW5zdGFuY2VvZiBGaWxlTGlzdCkpeyByZXR1cm4gfVxuXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyhkcm9wVGFyZ2V0LCBmaWxlcylcbiAgICAgIGRyb3BUYXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJpbnB1dFwiLCB7YnViYmxlczogdHJ1ZX0pKVxuICAgIH0pXG4gICAgdGhpcy5vbihQSFhfVFJBQ0tfVVBMT0FEUywgZSA9PiB7XG4gICAgICBsZXQgdXBsb2FkVGFyZ2V0ID0gZS50YXJnZXRcbiAgICAgIGlmKCFET00uaXNVcGxvYWRJbnB1dCh1cGxvYWRUYXJnZXQpKXsgcmV0dXJuIH1cbiAgICAgIGxldCBmaWxlcyA9IEFycmF5LmZyb20oZS5kZXRhaWwuZmlsZXMgfHwgW10pLmZpbHRlcihmID0+IGYgaW5zdGFuY2VvZiBGaWxlIHx8IGYgaW5zdGFuY2VvZiBCbG9iKVxuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXModXBsb2FkVGFyZ2V0LCBmaWxlcylcbiAgICAgIHVwbG9hZFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgfSlcbiAgfVxuXG4gIGV2ZW50TWV0YShldmVudE5hbWUsIGUsIHRhcmdldEVsKXtcbiAgICBsZXQgY2FsbGJhY2sgPSB0aGlzLm1ldGFkYXRhQ2FsbGJhY2tzW2V2ZW50TmFtZV1cbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhlLCB0YXJnZXRFbCkgOiB7fVxuICB9XG5cbiAgc2V0UGVuZGluZ0xpbmsoaHJlZil7XG4gICAgdGhpcy5saW5rUmVmKytcbiAgICB0aGlzLnBlbmRpbmdMaW5rID0gaHJlZlxuICAgIHJldHVybiB0aGlzLmxpbmtSZWZcbiAgfVxuXG4gIGNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpe1xuICAgIGlmKHRoaXMubGlua1JlZiAhPT0gbGlua1JlZil7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ocmVmID0gdGhpcy5wZW5kaW5nTGlua1xuICAgICAgdGhpcy5wZW5kaW5nTGluayA9IG51bGxcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZ2V0SHJlZigpeyByZXR1cm4gdGhpcy5ocmVmIH1cblxuICBoYXNQZW5kaW5nTGluaygpeyByZXR1cm4gISF0aGlzLnBlbmRpbmdMaW5rIH1cblxuICBiaW5kKGV2ZW50cywgY2FsbGJhY2spe1xuICAgIGZvcihsZXQgZXZlbnQgaW4gZXZlbnRzKXtcbiAgICAgIGxldCBicm93c2VyRXZlbnROYW1lID0gZXZlbnRzW2V2ZW50XVxuXG4gICAgICB0aGlzLm9uKGJyb3dzZXJFdmVudE5hbWUsIGUgPT4ge1xuICAgICAgICBsZXQgYmluZGluZyA9IHRoaXMuYmluZGluZyhldmVudClcbiAgICAgICAgbGV0IHdpbmRvd0JpbmRpbmcgPSB0aGlzLmJpbmRpbmcoYHdpbmRvdy0ke2V2ZW50fWApXG4gICAgICAgIGxldCB0YXJnZXRQaHhFdmVudCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSAmJiBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoYmluZGluZylcbiAgICAgICAgaWYodGFyZ2V0UGh4RXZlbnQpe1xuICAgICAgICAgIHRoaXMuZGVib3VuY2UoZS50YXJnZXQsIGUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZXZlbnQsIHZpZXcsIGUudGFyZ2V0LCB0YXJnZXRQaHhFdmVudCwgbnVsbClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBET00uYWxsKGRvY3VtZW50LCBgWyR7d2luZG93QmluZGluZ31dYCwgZWwgPT4ge1xuICAgICAgICAgICAgbGV0IHBoeEV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKHdpbmRvd0JpbmRpbmcpXG4gICAgICAgICAgICB0aGlzLmRlYm91bmNlKGVsLCBlLCAoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlLCBldmVudCwgdmlldywgZWwsIHBoeEV2ZW50LCBcIndpbmRvd1wiKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGJpbmRDbGlja3MoKXtcbiAgICB0aGlzLmJpbmRDbGljayhcImNsaWNrXCIsIFwiY2xpY2tcIiwgZmFsc2UpXG4gICAgdGhpcy5iaW5kQ2xpY2soXCJtb3VzZWRvd25cIiwgXCJjYXB0dXJlLWNsaWNrXCIsIHRydWUpXG4gIH1cblxuICBiaW5kQ2xpY2soZXZlbnROYW1lLCBiaW5kaW5nTmFtZSwgY2FwdHVyZSl7XG4gICAgbGV0IGNsaWNrID0gdGhpcy5iaW5kaW5nKGJpbmRpbmdOYW1lKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZSA9PiB7XG4gICAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHRoaXMuY2xpY2tSZWYrK1xuICAgICAgbGV0IGNsaWNrUmVmV2FzID0gdGhpcy5jbGlja1JlZlxuICAgICAgbGV0IHRhcmdldCA9IG51bGxcbiAgICAgIGlmKGNhcHR1cmUpe1xuICAgICAgICB0YXJnZXQgPSBlLnRhcmdldC5tYXRjaGVzKGBbJHtjbGlja31dYCkgPyBlLnRhcmdldCA6IGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoYFske2NsaWNrfV1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIGNsaWNrKVxuICAgICAgICB0aGlzLmRpc3BhdGNoQ2xpY2tBd2F5KGUsIGNsaWNrUmVmV2FzKVxuICAgICAgfVxuICAgICAgbGV0IHBoeEV2ZW50ID0gdGFyZ2V0ICYmIHRhcmdldC5nZXRBdHRyaWJ1dGUoY2xpY2spXG4gICAgICBpZighcGh4RXZlbnQpeyByZXR1cm4gfVxuICAgICAgaWYodGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiKXsgZS5wcmV2ZW50RGVmYXVsdCgpIH1cblxuICAgICAgdGhpcy5kZWJvdW5jZSh0YXJnZXQsIGUsICgpID0+IHtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnModGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBKUy5leGVjKFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCB0YXJnZXQpfV0pXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIGNhcHR1cmUpXG4gIH1cblxuICBkaXNwYXRjaENsaWNrQXdheShlLCBjbGlja1JlZldhcyl7XG4gICAgbGV0IHBoeENsaWNrQXdheSA9IHRoaXMuYmluZGluZyhcImNsaWNrLWF3YXlcIilcbiAgICBsZXQgcGh4Q2xpY2sgPSB0aGlzLmJpbmRpbmcoXCJjbGlja1wiKVxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtwaHhDbGlja0F3YXl9XWAsIGVsID0+IHtcbiAgICAgIGlmKCEoZWwuaXNTYW1lTm9kZShlLnRhcmdldCkgfHwgZWwuY29udGFpbnMoZS50YXJnZXQpKSl7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgICBsZXQgcGh4RXZlbnQgPSBlbC5nZXRBdHRyaWJ1dGUocGh4Q2xpY2tBd2F5KVxuICAgICAgICAgIGlmKEpTLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGUudGFyZ2V0LmNsb3Nlc3QoYFske3BoeENsaWNrfV1gKSB8fCBlLnRhcmdldFxuICAgICAgICAgICAgSlMuZXhlYyhcImNsaWNrXCIsIHBoeEV2ZW50LCB2aWV3LCBlbCwgW1wicHVzaFwiLCB7ZGF0YTogdGhpcy5ldmVudE1ldGEoXCJjbGlja1wiLCBlLCBlLnRhcmdldCl9XSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGJpbmROYXYoKXtcbiAgICBpZighQnJvd3Nlci5jYW5QdXNoU3RhdGUoKSl7IHJldHVybiB9XG4gICAgaWYoaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbil7IGhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiIH1cbiAgICBsZXQgc2Nyb2xsVGltZXIgPSBudWxsXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgX2UgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVyKVxuICAgICAgc2Nyb2xsVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgQnJvd3Nlci51cGRhdGVDdXJyZW50U3RhdGUoc3RhdGUgPT4gT2JqZWN0LmFzc2lnbihzdGF0ZSwge3Njcm9sbDogd2luZG93LnNjcm9sbFl9KSlcbiAgICAgIH0sIDEwMClcbiAgICB9KVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgZXZlbnQgPT4ge1xuICAgICAgaWYoIXRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pKXsgcmV0dXJuIH1cbiAgICAgIGxldCB7dHlwZSwgaWQsIHJvb3QsIHNjcm9sbH0gPSBldmVudC5zdGF0ZSB8fCB7fVxuICAgICAgbGV0IGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuXG4gICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZih0aGlzLm1haW4uaXNDb25uZWN0ZWQoKSAmJiAodHlwZSA9PT0gXCJwYXRjaFwiICYmIGlkID09PSB0aGlzLm1haW4uaWQpKXtcbiAgICAgICAgICB0aGlzLm1haW4ucHVzaExpbmtQYXRjaChocmVmLCBudWxsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgbnVsbCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYocm9vdCl7IHRoaXMucmVwbGFjZVJvb3RIaXN0b3J5KCkgfVxuICAgICAgICAgICAgaWYodHlwZW9mKHNjcm9sbCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgc2Nyb2xsKVxuICAgICAgICAgICAgICB9LCAwKSAvLyB0aGUgYm9keSBuZWVkcyB0byByZW5kZXIgYmVmb3JlIHdlIHNjcm9sbC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIFBIWF9MSVZFX0xJTkspXG4gICAgICBsZXQgdHlwZSA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFBIWF9MSVZFX0xJTkspXG4gICAgICBsZXQgd2FudHNOZXdUYWIgPSBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IGUuYnV0dG9uID09PSAxXG4gICAgICBpZighdHlwZSB8fCAhdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4gfHwgd2FudHNOZXdUYWIpeyByZXR1cm4gfVxuICAgICAgbGV0IGhyZWYgPSB0YXJnZXQuaHJlZlxuICAgICAgbGV0IGxpbmtTdGF0ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJTktfU1RBVEUpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGlmKHRoaXMucGVuZGluZ0xpbmsgPT09IGhyZWYpeyByZXR1cm4gfVxuXG4gICAgICB0aGlzLnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZih0eXBlID09PSBcInBhdGNoXCIpe1xuICAgICAgICAgIHRoaXMucHVzaEhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIHRhcmdldClcbiAgICAgICAgfSBlbHNlIGlmKHR5cGUgPT09IFwicmVkaXJlY3RcIil7XG4gICAgICAgICAgdGhpcy5oaXN0b3J5UmVkaXJlY3QoaHJlZiwgbGlua1N0YXRlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHtQSFhfTElWRV9MSU5LfSB0byBiZSBcInBhdGNoXCIgb3IgXCJyZWRpcmVjdFwiLCBnb3Q6ICR7dHlwZX1gKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9KXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIGBwaHg6JHtldmVudH1gLCBwYXlsb2FkKVxuICB9XG5cbiAgZGlzcGF0Y2hFdmVudHMoZXZlbnRzKXtcbiAgICBldmVudHMuZm9yRWFjaCgoW2V2ZW50LCBwYXlsb2FkXSkgPT4gdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50LCBwYXlsb2FkKSlcbiAgfVxuXG4gIHdpdGhQYWdlTG9hZGluZyhpbmZvLCBjYWxsYmFjayl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBcInBoeDpwYWdlLWxvYWRpbmctc3RhcnRcIiwgaW5mbylcbiAgICBsZXQgZG9uZSA9ICgpID0+IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwgaW5mbylcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBjYWxsYmFjayhkb25lKSA6IGRvbmVcbiAgfVxuXG4gIHB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCB0YXJnZXRFbCl7XG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInBhdGNoXCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMubWFpbi5wdXNoTGlua1BhdGNoKGhyZWYsIHRhcmdldEVsLCBsaW5rUmVmID0+IHtcbiAgICAgICAgdGhpcy5oaXN0b3J5UGF0Y2goaHJlZiwgbGlua1N0YXRlLCBsaW5rUmVmKVxuICAgICAgICBkb25lKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIGxpbmtSZWYgPSB0aGlzLnNldFBlbmRpbmdMaW5rKGhyZWYpKXtcbiAgICBpZighdGhpcy5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7IHJldHVybiB9XG5cbiAgICBCcm93c2VyLnB1c2hTdGF0ZShsaW5rU3RhdGUsIHt0eXBlOiBcInBhdGNoXCIsIGlkOiB0aGlzLm1haW4uaWR9LCBocmVmKVxuICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gIH1cblxuICBoaXN0b3J5UmVkaXJlY3QoaHJlZiwgbGlua1N0YXRlLCBmbGFzaCl7XG4gICAgbGV0IHNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZXG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgZmxhc2gsICgpID0+IHtcbiAgICAgICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJyZWRpcmVjdFwiLCBpZDogdGhpcy5tYWluLmlkLCBzY3JvbGw6IHNjcm9sbH0sIGhyZWYpXG4gICAgICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcmVwbGFjZVJvb3RIaXN0b3J5KCl7XG4gICAgQnJvd3Nlci5wdXNoU3RhdGUoXCJyZXBsYWNlXCIsIHtyb290OiB0cnVlLCB0eXBlOiBcInBhdGNoXCIsIGlkOiB0aGlzLm1haW4uaWR9KVxuICB9XG5cbiAgcmVnaXN0ZXJOZXdMb2NhdGlvbihuZXdMb2NhdGlvbil7XG4gICAgbGV0IHtwYXRobmFtZSwgc2VhcmNofSA9IHRoaXMuY3VycmVudExvY2F0aW9uXG4gICAgaWYocGF0aG5hbWUgKyBzZWFyY2ggPT09IG5ld0xvY2F0aW9uLnBhdGhuYW1lICsgbmV3TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKG5ld0xvY2F0aW9uKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBiaW5kRm9ybXMoKXtcbiAgICBsZXQgaXRlcmF0aW9ucyA9IDBcbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeEV2ZW50ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGlmKCFwaHhFdmVudCl7IHJldHVybiB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUudGFyZ2V0LmRpc2FibGVkID0gdHJ1ZVxuICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICBKUy5leGVjKFwic3VibWl0XCIsIHBoeEV2ZW50LCB2aWV3LCBlLnRhcmdldCwgW1wicHVzaFwiLCB7fV0pXG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuXG4gICAgZm9yKGxldCB0eXBlIG9mIFtcImNoYW5nZVwiLCBcImlucHV0XCJdKXtcbiAgICAgIHRoaXMub24odHlwZSwgZSA9PiB7XG4gICAgICAgIGxldCBpbnB1dCA9IGUudGFyZ2V0XG4gICAgICAgIGxldCBwaHhFdmVudCA9IGlucHV0LmZvcm0gJiYgaW5wdXQuZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFwiY2hhbmdlXCIpKVxuICAgICAgICBpZighcGh4RXZlbnQpeyByZXR1cm4gfVxuICAgICAgICBpZihpbnB1dC50eXBlID09PSBcIm51bWJlclwiICYmIGlucHV0LnZhbGlkaXR5ICYmIGlucHV0LnZhbGlkaXR5LmJhZElucHV0KXsgcmV0dXJuIH1cbiAgICAgICAgbGV0IGN1cnJlbnRJdGVyYXRpb25zID0gaXRlcmF0aW9uc1xuICAgICAgICBpdGVyYXRpb25zKytcbiAgICAgICAgbGV0IHthdDogYXQsIHR5cGU6IGxhc3RUeXBlfSA9IERPTS5wcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIpIHx8IHt9XG4gICAgICAgIC8vIGRldGVjdCBkdXAgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGRpc3BhdGNoIGJvdGggXCJpbnB1dFwiIGFuZCBcImNoYW5nZVwiXG4gICAgICAgIGlmKGF0ID09PSBjdXJyZW50SXRlcmF0aW9ucyAtIDEgJiYgdHlwZSAhPT0gbGFzdFR5cGUpeyByZXR1cm4gfVxuXG4gICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBcInByZXYtaXRlcmF0aW9uXCIsIHthdDogY3VycmVudEl0ZXJhdGlvbnMsIHR5cGU6IHR5cGV9KVxuXG4gICAgICAgIHRoaXMuZGVib3VuY2UoaW5wdXQsIGUsICgpID0+IHtcbiAgICAgICAgICB0aGlzLndpdGhpbk93bmVycyhpbnB1dC5mb3JtLCB2aWV3ID0+IHtcbiAgICAgICAgICAgIERPTS5wdXRQcml2YXRlKGlucHV0LCBQSFhfSEFTX0ZPQ1VTRUQsIHRydWUpXG4gICAgICAgICAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGlucHV0KSl7XG4gICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlRWxlbWVudChpbnB1dClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBlLnRhcmdldC5uYW1lfV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0sIGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCBwaHhEZWJvdW5jZSA9IHRoaXMuYmluZGluZyhQSFhfREVCT1VOQ0UpXG4gICAgbGV0IHBoeFRocm90dGxlID0gdGhpcy5iaW5kaW5nKFBIWF9USFJPVFRMRSlcbiAgICBsZXQgZGVmYXVsdERlYm91bmNlID0gdGhpcy5kZWZhdWx0cy5kZWJvdW5jZS50b1N0cmluZygpXG4gICAgbGV0IGRlZmF1bHRUaHJvdHRsZSA9IHRoaXMuZGVmYXVsdHMudGhyb3R0bGUudG9TdHJpbmcoKVxuICAgIERPTS5kZWJvdW5jZShlbCwgZXZlbnQsIHBoeERlYm91bmNlLCBkZWZhdWx0RGVib3VuY2UsIHBoeFRocm90dGxlLCBkZWZhdWx0VGhyb3R0bGUsIGNhbGxiYWNrKVxuICB9XG5cbiAgc2lsZW5jZUV2ZW50cyhjYWxsYmFjayl7XG4gICAgdGhpcy5zaWxlbmNlZCA9IHRydWVcbiAgICBjYWxsYmFjaygpXG4gICAgdGhpcy5zaWxlbmNlZCA9IGZhbHNlXG4gIH1cblxuICBvbihldmVudCwgY2FsbGJhY2spe1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBlID0+IHtcbiAgICAgIGlmKCF0aGlzLnNpbGVuY2VkKXsgY2FsbGJhY2soZSkgfVxuICAgIH0pXG4gIH1cbn1cblxuY2xhc3MgVHJhbnNpdGlvblNldCB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgdGhpcy50cmFuc2l0aW9ucyA9IG5ldyBTZXQoKVxuICAgIHRoaXMucGVuZGluZ09wcyA9IFtdXG4gICAgdGhpcy5yZXNldCgpXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMuZm9yRWFjaCh0aW1lciA9PiB7XG4gICAgICBjYW5jZWxUaW1lb3V0KHRpbWVyKVxuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgfSlcbiAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gIH1cblxuICBhZnRlcihjYWxsYmFjayl7XG4gICAgaWYodGhpcy5zaXplKCkgPT09IDApe1xuICAgICAgY2FsbGJhY2soKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hQZW5kaW5nT3AoY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpe1xuICAgIG9uU3RhcnQoKVxuICAgIGxldCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgICBvbkRvbmUoKVxuICAgICAgaWYodGhpcy5zaXplKCkgPT09IDApeyB0aGlzLmZsdXNoUGVuZGluZ09wcygpIH1cbiAgICB9LCB0aW1lKVxuICAgIHRoaXMudHJhbnNpdGlvbnMuYWRkKHRpbWVyKVxuICB9XG5cbiAgcHVzaFBlbmRpbmdPcChvcCl7IHRoaXMucGVuZGluZ09wcy5wdXNoKG9wKSB9XG5cbiAgc2l6ZSgpeyByZXR1cm4gdGhpcy50cmFuc2l0aW9ucy5zaXplIH1cblxuICBmbHVzaFBlbmRpbmdPcHMoKXtcbiAgICB0aGlzLnBlbmRpbmdPcHMuZm9yRWFjaChvcCA9PiBvcCgpKVxuICAgIHRoaXMucGVuZGluZ09wcyA9IFtdXG4gIH1cbn1cbiIsICJpbXBvcnQgXCIuLi9jc3MvcHJpc20tdnNjLWRhcmstcGx1cy5jc3NcIjtcbmltcG9ydCBcIi4uL2Nzcy9idWxtYS5jc3NcIjtcbmltcG9ydCBcIi4uL2Nzcy9hbmltYXRlLmNzc1wiO1xuaW1wb3J0IFwiLi4vY3NzL2FwcC5jc3NcIjtcblxuLy8gd2VicGFjayBhdXRvbWF0aWNhbGx5IGJ1bmRsZXMgYWxsIG1vZHVsZXMgaW4geW91clxuLy8gZW50cnkgcG9pbnRzLiBUaG9zZSBlbnRyeSBwb2ludHMgY2FuIGJlIGNvbmZpZ3VyZWRcbi8vIGluIFwid2VicGFjay5jb25maWcuanNcIi5cbi8vXG4vLyBJbXBvcnQgZGVwcyB3aXRoIHRoZSBkZXAgbmFtZSBvciBsb2NhbCBmaWxlcyB3aXRoIGEgcmVsYXRpdmUgcGF0aCwgZm9yIGV4YW1wbGU6XG4vL1xuLy8gICAgIGltcG9ydCB7U29ja2V0fSBmcm9tIFwicGhvZW5peFwiXG4vLyAgICAgaW1wb3J0IHNvY2tldCBmcm9tIFwiLi9zb2NrZXRcIlxuLy9cbmltcG9ydCBcInBob2VuaXhfaHRtbFwiXG5pbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuaW1wb3J0IHtMaXZlU29ja2V0fSBmcm9tIFwicGhvZW5peF9saXZlX3ZpZXdcIlxuaW1wb3J0IFByaXNtIGZyb20gJy4uL3ZlbmRvci9wcmlzbS5qcyc7XG4vLyBVbmNvbW1lbnQgd2hlbiB3ZSBzdGFydCB1c2luZyBtZXJtYWlkXG4vLyBpbXBvcnQgbWVybWFpZCBmcm9tIFwibWVybWFpZFwiXG4vLyBtZXJtYWlkLmluaXRpYWxpemUoe3N0YXJ0T25Mb2FkOmZhbHNlfSk7XG5cbndpbmRvdy50b2dnbGVOb2RlID0gKGEpID0+IHtcbiAgYS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5tZW51LWxpc3QnKS5jbGFzc0xpc3QudG9nZ2xlKCdpcy1oaWRkZW4nKVxuICBjb25zdCBpID0gYS5xdWVyeVNlbGVjdG9yKCdzcGFuLmljb24gPiBpJylcbiAgaS5jbGFzc0xpc3QudG9nZ2xlKCdmYS1mb2xkZXItb3BlbicpXG4gIGkuY2xhc3NMaXN0LnRvZ2dsZSgnZmEtZm9sZGVyJylcbn1cblxubGV0IEhvb2tzID0ge31cblxuSG9va3MuRXZlbnRMb2cgPSB7XG4gIHVwZGF0ZWQoKXtcbiAgICBjb25zdCBldmVudExvZyA9IHRoaXMuZWwucGFyZW50Tm9kZVxuICAgIGV2ZW50TG9nLnNjcm9sbFRvcCA9IGV2ZW50TG9nLnNjcm9sbEhlaWdodFxuICB9XG59XG5cbndpbmRvdy5oYW5kbGVFbmFibGVMYXRlbmN5U2ltQ2xpY2sgPSBmdW5jdGlvbihjaGVja2JveCkge1xuICBsZXQgc29ja2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLWlmcmFtZVwiKS5jb250ZW50V2luZG93LmxpdmVTb2NrZXRcbiAgbGV0IHZhbHVlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlYnVnX3Byb2ZpbGVfbGF0ZW5jeV9zaW1fdmFsdWVcIilcblxuICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgIHZhbHVlSW5wdXQuZGlzYWJsZWQgPSBmYWxzZVxuICAgIGxldCB2YWx1ZSA9IHZhbHVlSW5wdXQudmFsdWUgfHwgMTAwXG4gICAgdmFsdWVJbnB1dC52YWx1ZSA9IHZhbHVlXG4gICAgc29ja2V0LmVuYWJsZUxhdGVuY3lTaW0odmFsdWUpXG4gIH0gZWxzZSB7XG4gICAgc29ja2V0LmRpc2FibGVMYXRlbmN5U2ltKClcbiAgICB2YWx1ZUlucHV0LmRpc2FibGVkID0gdHJ1ZVxuICB9XG5cbiAgdXBkYXRlUGxheWdyb3VuZFRhYkxhYmVsKClcbn1cblxud2luZG93LmhhbmRsZUVuYWJsZURlYnVnQ2xpY2sgPSBmdW5jdGlvbihjaGVja2JveCkge1xuICBsZXQgc29ja2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLWlmcmFtZVwiKS5jb250ZW50V2luZG93LmxpdmVTb2NrZXRcblxuICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgIHNvY2tldC5lbmFibGVEZWJ1ZygpXG4gIH0gZWxzZSB7XG4gICAgc29ja2V0LmRpc2FibGVEZWJ1ZygpXG4gIH1cbn1cblxud2luZG93LmhhbmRsZUVuYWJsZVByb2ZpbGVDbGljayA9IGZ1bmN0aW9uKGNoZWNrYm94KSB7XG4gIGxldCBzb2NrZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmQtaWZyYW1lXCIpLmNvbnRlbnRXaW5kb3cubGl2ZVNvY2tldFxuXG4gIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgc29ja2V0LmVuYWJsZVByb2ZpbGluZygpXG4gIH0gZWxzZSB7XG4gICAgc29ja2V0LmRpc2FibGVQcm9maWxpbmcoKVxuICB9XG59XG5cbndpbmRvdy5oYW5kbGVMYXRlbmN5U2ltVmFsdWVCbHVyID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgY29uc3Qgc29ja2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLWlmcmFtZVwiKS5jb250ZW50V2luZG93LmxpdmVTb2NrZXRcbiAgY29uc3Qgb2xkVmFsdWUgPSBzb2NrZXQuZ2V0TGF0ZW5jeVNpbSgpXG5cbiAgaWYgKGlucHV0LnZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpbnB1dC52YWx1ZSB8fCAxMDAwXG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZVxuICAgIHNvY2tldC5lbmFibGVMYXRlbmN5U2ltKHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGluaXREZWJ1Z1Byb2ZpbGUoc29ja2V0KSB7XG4gIGNvbnN0IGRlYnVnUHJvZmlsZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC10b29scy1kZWJ1Zy1wcm9maWxlXCIpXG4gIGNvbnN0IGRlYnVnUHJvZmlsZURpc2FibGVkRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLXRvb2xzLWRlYnVnLXByb2ZpbGUtZGlzYWJsZWRcIilcblxuICBpZiAoIXNvY2tldCkge1xuICAgIGRlYnVnUHJvZmlsZURpdi5oaWRkZW4gPSB0cnVlXG4gICAgZGVidWdQcm9maWxlRGlzYWJsZWREaXYuaGlkZGVuID0gZmFsc2VcbiAgICByZXR1cm5cbiAgfVxuXG4gIGRlYnVnUHJvZmlsZURpdi5oaWRkZW4gPSBmYWxzZVxuICBkZWJ1Z1Byb2ZpbGVEaXNhYmxlZERpdi5oaWRkZW4gPSB0cnVlXG5cbiAgY29uc3QgZGVidWdDaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVidWdfcHJvZmlsZV9lbmFibGVfZGVidWdcIilcbiAgZGVidWdDaGVja2JveC5jaGVja2VkID0gc29ja2V0LmlzRGVidWdFbmFibGVkKClcblxuICBjb25zdCBwcm9maWxlQ2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlYnVnX3Byb2ZpbGVfZW5hYmxlX3Byb2ZpbGVcIilcbiAgcHJvZmlsZUNoZWNrYm94LmNoZWNrZWQgPSBzb2NrZXQuaXNQcm9maWxlRW5hYmxlZCgpXG5cbiAgY29uc3QgbGF0ZW5jeVNpbUNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Z19wcm9maWxlX2VuYWJsZV9sYXRlbmN5X3NpbVwiKVxuICBjb25zdCBsYXRlbmN5U2ltSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlYnVnX3Byb2ZpbGVfbGF0ZW5jeV9zaW1fdmFsdWVcIilcbiAgY29uc3QgbGF0ZW5jeVNpbVZhbHVlID0gc29ja2V0LmdldExhdGVuY3lTaW0oKVxuXG4gIGlmIChsYXRlbmN5U2ltVmFsdWUpIHtcbiAgICBsYXRlbmN5U2ltQ2hlY2tib3guY2hlY2tlZCA9IHRydWVcbiAgICBsYXRlbmN5U2ltSW5wdXQudmFsdWUgPSBsYXRlbmN5U2ltVmFsdWVcbiAgfVxuICB1cGRhdGVQbGF5Z3JvdW5kVGFiTGFiZWwoKVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQbGF5Z3JvdW5kVGFiTGFiZWwoKSB7XG4gIGNvbnN0IHNvY2tldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC1pZnJhbWVcIikuY29udGVudFdpbmRvdy5saXZlU29ja2V0XG4gIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLXRhYi1sYWJlbFwiKVxuXG4gIGlmIChzb2NrZXQuZ2V0TGF0ZW5jeVNpbSgpKSB7XG4gICAgbGFiZWwuaW5uZXJIVE1MID0gJ1BsYXlncm91bmQgPHNwYW4gY2xhc3M9XCJpcy1zaXplLTZcIiB0aXRsZT1cIkxhdGVuY3kgc2ltdWxhdG9yIGlzIGVuYWJsZWRcIj5cdTI2QTBcdUZFMEY8L3NwYW4+J1xuICB9IGVsc2Uge1xuICAgIGxhYmVsLmlubmVyVGV4dCA9IFwiUGxheWdyb3VuZFwiXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVQYXRjaFNvY2tldChzb2NrZXQpIHtcbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBjb25zb2xlLmxvZyhcIltDYXRhbG9ndWVdIHdpbmRvdy5saXZlU29ja2V0IGhhcyBub3QgYmVlbiBzZXQuIERlYnVnL1Byb2ZpbGUgdGFiIHdpbGwgYmUgZGlzYWJsZWQuXCIpXG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoc29ja2V0LnBhdGNoZWQpXG4gICAgcmV0dXJuXG5cbiAgY29uc3QgcGF0aCA9IHNvY2tldC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgY29uc3QgUEhYX0xWX0RFQlVHID0gYHBoeDpsaXZlLXNvY2tldDpkZWJ1Zzoke3BhdGh9YFxuICBjb25zdCBQSFhfTFZfUFJPRklMRSA9IGBwaHg6bGl2ZS1zb2NrZXQ6cHJvZmlsaW5nOiR7cGF0aH1gXG4gIGNvbnN0IFBIWF9MVl9MQVRFTkNZX1NJTSA9IGBwaHg6bGl2ZS1zb2NrZXQ6bGF0ZW5jeS1zaW06JHtwYXRofWBcblxuICAvLyBMYXRlbmN5IFNpbXVsYXRpb25cblxuICBzb2NrZXQuZW5hYmxlTGF0ZW5jeVNpbSA9IGZ1bmN0aW9uKHVwcGVyQm91bmRNcyl7XG4gICAgY29uc29sZS5sb2coYGxhdGVuY3kgc2ltdWxhdG9yIGVuYWJsZWQgYXMgJHt1cHBlckJvdW5kTXN9bXMgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGlzIGJyb3dzZXIgc2Vzc2lvbi5gKVxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNLCB1cHBlckJvdW5kTXMpXG4gIH1cblxuICBzb2NrZXQuZGlzYWJsZUxhdGVuY3lTaW0gPSBmdW5jdGlvbigpeyBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSl9XG5cbiAgc29ja2V0LmdldExhdGVuY3lTaW0gPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgc3RyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfTEFURU5DWV9TSU0pXG4gICAgcmV0dXJuIHN0ciA/IHBhcnNlSW50KHN0cikgOiBudWxsXG4gIH1cblxuICAvLyBEZWJ1Z1xuXG4gIHNvY2tldC5pc0RlYnVnRW5hYmxlZCA9IGZ1bmN0aW9uKCl7IHJldHVybiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwidHJ1ZVwiIH1cblxuICBzb2NrZXQuZW5hYmxlRGVidWcgPSBmdW5jdGlvbigpeyBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJ0cnVlXCIpIH1cblxuICBzb2NrZXQuZGlzYWJsZURlYnVnID0gZnVuY3Rpb24oKXsgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfREVCVUcpIH1cblxuICAvLyBQcm9maWxlXG5cbiAgc29ja2V0LmlzUHJvZmlsZUVuYWJsZWQgPSBmdW5jdGlvbigpeyByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfUFJPRklMRSkgPT09IFwidHJ1ZVwiIH1cblxuICBzb2NrZXQuZW5hYmxlUHJvZmlsaW5nID0gZnVuY3Rpb24oKXsgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBzb2NrZXQuZGlzYWJsZVByb2ZpbGluZyA9IGZ1bmN0aW9uKCl7IHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX1BST0ZJTEUpIH1cblxuICBzb2NrZXQucGF0Y2hlZCA9IHRydWVcbn1cblxuY29uc3QgZGVidWcgPSAodmlldywga2luZCwgbXNnLCBvYmopID0+IHtcbiAgaWYgKHdpbmRvdy5saXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpIHtcbiAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH0gZWxzZSBpZiAodmlldy5pZCA9PSBcInBsYXlncm91bmRcIikge1xuICAgIG1heWJlUGF0Y2hTb2NrZXQodmlldy5saXZlU29ja2V0KVxuICAgIGlmICh2aWV3LmxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSlcbiAgICAgIGNvbnNvbGUubG9nKGAke3ZpZXcuaWR9ICR7a2luZH06ICR7bXNnfSAtIGAsIG9iailcbiAgfVxufVxuXG5Ib29rcy5JZnJhbWVCb2R5ID0ge1xuICBtb3VudGVkKCl7XG4gICAgY29uc3QgaWZyYW1lID0gdGhpcy5lbFxuICAgIGlmcmFtZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBlID0+IHtcbiAgICAgIGlmIChpZnJhbWUuaWQgPT0gXCJwbGF5Z3JvdW5kLWlmcmFtZVwiKSB7XG4gICAgICAgIGNvbnN0IHNvY2tldCA9IGlmcmFtZS5jb250ZW50V2luZG93LmxpdmVTb2NrZXRcbiAgICAgICAgbWF5YmVQYXRjaFNvY2tldChzb2NrZXQpXG4gICAgICAgIGluaXREZWJ1Z1Byb2ZpbGUoc29ja2V0KVxuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBzZW5kUmVzaXplO1xuICAgIGlmcmFtZS5jb250ZW50V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZSA9PiB7XG4gICAgICBpZiAoaWZyYW1lLmlkID09IFwicGxheWdyb3VuZC1pZnJhbWVcIikge1xuICAgICAgICBpZiAoaWZyYW1lLm9mZnNldFdpZHRoID4gaWZyYW1lLnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGgpXG4gICAgICAgICAgaWZyYW1lLnN0eWxlLndpZHRoID0gXCIxMDAlXCJcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpc1xuICAgICAgICBjbGVhclRpbWVvdXQoc2VuZFJlc2l6ZSlcbiAgICAgICAgc2VuZFJlc2l6ZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5wdXNoRXZlbnQoXCJwbGF5Z3JvdW5kX3Jlc2l6ZVwiLCB7aGVpZ2h0OiBpZnJhbWUuc3R5bGUuaGVpZ2h0LCB3aWR0aDogaWZyYW1lLnN0eWxlLndpZHRofSlcbiAgICAgICAgfSwgMzAwKVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Ib29rc1tcIkhpZ2hsaWdodFwiXSA9IHtcbiAgbW91bnRlZCgpIHtcbiAgICBQcmlzbS5oaWdobGlnaHRFbGVtZW50KHRoaXMuZWwpXG5cbiAgICAvLyBDYWxsIGl0IGFnYWluIHRvIGZpeCBtaXNwbGFjZWQgc2VsZWN0ZWQgbGluZXMgb24gcGFnZSByZWxvYWRcbiAgICBQcmlzbS5oaWdobGlnaHRFbGVtZW50KHRoaXMuZWwpXG4gIH0sXG4gIHVwZGF0ZWQoKSB7XG4gICAgUHJpc20uaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsKTtcbiAgfVxufVxuXG5Ib29rc1tcIk1lcm1haWRcIl0gPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgbWVybWFpZC5pbml0KHVuZGVmaW5lZCwgYCMke3RoaXMuZWwuaWR9YCk7XG4gIH1cbn1cblxuSG9va3NbXCJTZWN0aW9uSGVhZGluZ1wiXSA9IHtcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBgPGEgaHJlZj1cIiMke3RoaXMuZWwuaWR9XCIgY2xhc3M9XCJob3Zlci1saW5rXCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImljb24tbGlua1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMTYgMTZcIiB2ZXJzaW9uPVwiMS4xXCIgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PHBhdGggZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNNy43NzUgMy4yNzVhLjc1Ljc1IDAgMDAxLjA2IDEuMDZsMS4yNS0xLjI1YTIgMiAwIDExMi44MyAyLjgzbC0yLjUgMi41YTIgMiAwIDAxLTIuODMgMCAuNzUuNzUgMCAwMC0xLjA2IDEuMDYgMy41IDMuNSAwIDAwNC45NSAwbDIuNS0yLjVhMy41IDMuNSAwIDAwLTQuOTUtNC45NWwtMS4yNSAxLjI1em0tNC42OSA5LjY0YTIgMiAwIDAxMC0yLjgzbDIuNS0yLjVhMiAyIDAgMDEyLjgzIDAgLjc1Ljc1IDAgMDAxLjA2LTEuMDYgMy41IDMuNSAwIDAwLTQuOTUgMGwtMi41IDIuNWEzLjUgMy41IDAgMDA0Ljk1IDQuOTVsMS4yNS0xLjI1YS43NS43NSAwIDAwLTEuMDYtMS4wNmwtMS4yNSAxLjI1YTIgMiAwIDAxLTIuODMgMHpcIj48L3BhdGg+PC9zdmc+XG4gICAgICA8L3NwYW4+XG4gICAgPC9hPmBcbiAgICB0aGlzLmVsLmluc2VydEJlZm9yZSh0ZW1wbGF0ZS5maXJzdENoaWxkLCB0aGlzLmVsLmZpcnN0Q2hpbGQpXG4gIH1cbn1cblxubGV0IGNzcmZUb2tlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtZXRhW25hbWU9J2NzcmYtdG9rZW4nXVwiKS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpXG5sZXQgbGl2ZVNvY2tldCA9IG5ldyBMaXZlU29ja2V0KFwiL2xpdmVcIiwgU29ja2V0LCB7cGFyYW1zOiB7X2NzcmZfdG9rZW46IGNzcmZUb2tlbn0sIGhvb2tzOiBIb29rcywgdmlld0xvZ2dlcjogZGVidWd9KVxuXG4vLyBjb25uZWN0IGlmIHRoZXJlIGFyZSBhbnkgTGl2ZVZpZXdzIG9uIHRoZSBwYWdlXG5saXZlU29ja2V0LmNvbm5lY3QoKVxuXG4vLyBleHBvc2UgbGl2ZVNvY2tldCBvbiB3aW5kb3cgZm9yIHdlYiBjb25zb2xlIGRlYnVnIGxvZ3MgYW5kIGxhdGVuY3kgc2ltdWxhdGlvblxud2luZG93LmxpdmVTb2NrZXQgPSBsaXZlU29ja2V0XG5cbiJdLAogICJtYXBwaW5ncyI6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QUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxHQUFHLE1BQU8sR0FBRSxNQUFNLElBQUksa0JBQWtCLEdBQUcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxJQUFJLGlCQUFpQixHQUFHLEVBQUUsVUFBVSxFQUFFLEtBQUssT0FBTyxFQUFFLFFBQVEsRUFBRSxXQUFXLFNBQVMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFJLEdBQUUsRUFBRSxLQUFLLEdBQUcsRUFBRSxDQUFDLE9BQVEsS0FBSyxHQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTyxHQUFFLEtBQUssR0FBSSxHQUFFLEdBQUksR0FBRSxNQUFPLEdBQUUsRUFBRSxFQUFFLEtBQUssR0FBRyxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBUSxLQUFLLEdBQUUsR0FBRyxFQUFFLGVBQWUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFJLEdBQUUsRUFBRSxHQUFHLEVBQUUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDLEdBQUcsT0FBUSxHQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEdBQUksR0FBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxFQUFFLFFBQVEsT0FBTyxDQUFDLEdBQUksR0FBRSxFQUFFLFFBQVEsV0FBVyxNQUFNLGFBQWEsR0FBRyxFQUFFLFFBQVEsT0FBTyxFQUFFLFFBQVEsT0FBTyxFQUFFLEtBQUssT0FBUSxHQUFFLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLElBQUcsR0FBRyxFQUFFLE9BQU8sR0FBRyxFQUFFLE1BQU0sT0FBTyxFQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUksR0FBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLE9BQU8sR0FBRyxDQUFFLGFBQWEsSUFBRyxDQUFDLEdBQUksR0FBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFFLEdBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLE1BQU0sR0FBSSxJQUFFLEVBQUUsTUFBTSxHQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxFQUFFLEVBQUUsSUFBSSxHQUFHLEVBQUUsTUFBTSxPQUFPLEdBQUcsSUFBRyxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFLE1BQU0sT0FBTyxFQUFFLEVBQUUsRUFBRSxnQkFBaUIsR0FBRSxTQUFTLE9BQVEsSUFBRSxFQUFFLEtBQUksRUFBRSxNQUFPLEdBQUUsSUFBRyxBQUFVLE1BQU8sSUFBRSxPQUFuQixVQUEwQixHQUFFLEdBQUUsS0FBSyxJQUFJLEdBQUcsR0FBRSxNQUFNLE9BQU8sSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLFVBQVUsQ0FBRSxHQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxTQUFTLEdBQUksSUFBRSxFQUFFLE1BQU0sR0FBRSxFQUFFLEdBQUcsR0FBRSxFQUFFLE1BQU0sRUFBRSxJQUFHLEdBQUUsRUFBRSxNQUFNLEdBQUUsR0FBRSxRQUFRLEdBQUUsRUFBRSxFQUFFLE9BQU8sR0FBRyxHQUFFLEVBQUUsT0FBUSxHQUFFLE1BQU0sSUFBRyxHQUFJLElBQUUsRUFBRSxLQUFLLElBQUksSUFBRSxFQUFFLEVBQUUsR0FBRSxJQUFHLEdBQUcsR0FBRSxRQUFRLEVBQUUsRUFBRSxHQUFFLEdBQUcsR0FBSSxJQUFFLEdBQUksR0FBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEdBQUUsR0FBRyxHQUFFLEVBQUUsSUFBRyxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUUsSUFBRyxJQUFHLEVBQUUsRUFBRSxFQUFFLElBQUcsRUFBRSxFQUFFLENBQUMsR0FBSSxJQUFFLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLElBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFHLEdBQUcsR0FBRSxNQUFNLEVBQUUsT0FBUSxHQUFFLE1BQU0sR0FBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxHQUFHLFNBQVMsRUFBRSxDQUF3QixPQUFuQixHQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssS0FBVSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLE1BQU8sSUFBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUksR0FBRSxFQUFFLE1BQU0sSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEtBQUssSUFBSSxJQUFJLFNBQVMsRUFBRSxFQUFFLENBQUMsR0FBSSxHQUFFLEVBQUUsTUFBTSxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUUsT0FBTyxPQUFRLEdBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxNQUFNLEdBQUcsV0FBVyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsS0FBSyxRQUFRLEVBQUUsS0FBSyxNQUFNLEVBQUUsS0FBSyxPQUFPLEVBQUcsSUFBRyxJQUFJLE9BQU8sV0FBVyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsR0FBSSxHQUFFLEVBQUUsS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUksR0FBRSxFQUFFLEdBQUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLE1BQU0sR0FBRyxNQUFPLEdBQUUsWUFBWSxDQUFDLEdBQUksR0FBRSxDQUFDLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFLEtBQUssTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEtBQUssRUFBRSxLQUFLLEtBQUssRUFBRSxLQUFLLE9BQU8sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBSSxHQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBTyxHQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLENBQUMsT0FBUSxHQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxFQUFFLEtBQUssQUFBQyxHQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLFVBQVUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEFBQVUsTUFBTyxJQUFqQixTQUFtQixNQUFPLEdBQUUsR0FBRyxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQUksR0FBRSxHQUFHLE1BQU8sR0FBRSxRQUFRLFNBQVMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFJLEdBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxRQUFRLEVBQUUsRUFBRSxRQUFRLEdBQUcsSUFBSSxPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxXQUFXLEdBQUcsU0FBUyxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUksT0FBTSxRQUFRLEdBQUcsTUFBTSxVQUFVLEtBQUssTUFBTSxFQUFFLFFBQVEsR0FBRyxFQUFFLFFBQVEsS0FBSyxJQUFJLEVBQUUsTUFBTSxJQUFJLE9BQU8sR0FBRyxHQUFJLEdBQUUsR0FBRyxPQUFRLEtBQUssR0FBRSxXQUFXLEdBQUcsSUFBSSxFQUFFLEtBQU0sR0FBRSxXQUFXLElBQUksSUFBSSxRQUFRLEtBQUssVUFBVSxJQUFJLE1BQU0sSUFBSSxFQUFFLElBQUksV0FBVyxFQUFFLFFBQVEsS0FBSyxLQUFL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QUFJLEdBQUUsRUFBRSxNQUFNLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLGNBQWMsK0JBQStCLEVBQUUsT0FBTyxTQUFTLGNBQWMsT0FBTyxHQUFHLEVBQUUsS0FBSyxVQUFVLENBQUMsRUFBRSxhQUFhLGNBQWMsUUFBUSxFQUFFLGFBQWEsYUFBYSxHQUFHLEVBQUUsVUFBVyxJQUFHLElBQUksb0JBQW9CLEdBQUcsRUFBTSxRQUFRLFlBQVksQ0FBQyxHQUFJLEdBQUUsRUFBTSxRQUFRLFlBQVksUUFBUSxFQUFFLEdBQUcsRUFBRSxFQUFNLFFBQVEsWUFBWSxRQUFRLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFJLEdBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsTUFBTSxJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsR0FBSSxHQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxhQUFhLEtBQUssRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFLE1BQU0sT0FBTyxTQUFVLEdBQUUsS0FBSyxVQUFVLENBQUMsRUFBRSxhQUFhLGFBQWEsT0FBTyxJQUFJLEVBQUUsR0FBRyxFQUFFLGFBQWEsV0FBVyxPQUFPLElBQUksRUFBRSxNQUFNLElBQUssR0FBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEdBQUksT0FBTSxFQUFFLEVBQUUsR0FBRyxLQUFLO0FBQUEsS0FBUyxFQUFFLEtBQUssVUFBVSxDQUFDLEVBQUUsWUFBWSxPQUFPLEdBQUksR0FBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQU0sS0FBSyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLFVBQVUsQ0FBQyxFQUFFLFVBQVUsSUFBSSxLQUFLLEdBQUksR0FBRSxTQUFTLEVBQUUsYUFBYSxlQUFlLEtBQUssRUFBRSw0QkFBNEIsR0FBRyxRQUFRLFNBQVMsRUFBRSxFQUFFLENBQUMs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QVUsQ0FBRSxlQUFlLFdBQVcsSUFFaEUsRUFBTyxRQUFVLEdBR25CLEdBQU0sSUFBUSxDQUFDLEVBQU0sRUFBTSxFQUFLLElBQVEsQ0FDdEMsQUFBSSxPQUFPLFdBQVcsaUJBQ3BCLFFBQVEsSUFBSSxHQUFHLEVBQUssTUFBTSxNQUFTLE9BQVUsR0FDcEMsRUFBSyxJQUFNLGNBQ3BCLElBQWlCLEVBQUssWUFDbEIsRUFBSyxXQUFXLGtCQUNsQixRQUFRLElBQUksR0FBRyxFQUFLLE1BQU0sTUFBUyxPQUFVLEtBSW5ELEdBQU0sV0FBYSxDQUNqQixTQUFTLENBQ1AsR0FBTSxHQUFTLEtBQUssR0FDcEIsRUFBTyxpQkFBaUIsT0FBUSxHQUFLLENBQ25DLEdBQUksRUFBTyxJQUFNLG9CQUFxQixDQUNwQyxHQUFNLEdBQVMsRUFBTyxjQUFjLFdBQ3BDLEdBQWlCLEdBQ2pCLEdBQWlCLE1BR3JCLEdBQUksR0FDSixFQUFPLGNBQWMsaUJBQWlCLFNBQVUsR0FBSyxDQUNuRCxHQUFJLEVBQU8sSUFBTSxvQkFBcUIsQ0FDcEMsQUFBSSxFQUFPLFlBQWMsRUFBTyxjQUFjLGFBQzVDLEdBQU8sTUFBTSxNQUFRLFFBRXZCLEdBQU0sR0FBTyxLQUNiLGFBQWEsR0FDYixFQUFhLFdBQVcsVUFBVyxDQUNqQyxFQUFLLFVBQVUsb0JBQXFCLENBQUMsT0FBUSxFQUFPLE1BQU0sT0FBUSxNQUFPLEVBQU8sTUFBTSxTQUNyRixVQU1YLEdBQU0sVUFBZSxDQUNuQixTQUFVLENBQ1IsV0FBTSxpQkFBaUIsS0FBSyxJQUc1QixXQUFNLGlCQUFpQixLQUFLLEtBRTlCLFNBQVUsQ0FDUixXQUFNLGlCQUFpQixLQUFLLE1BSWhDLEdBQU0sUUFBYSxDQUNqQixTQUFVLENBQ1IsUUFBUSxLQUFLLE9BQVcsSUFBSSxLQUFLLEdBQUcsUUFJeEMsR0FBTSxlQUFvQixDQUN4QixTQUFVLENBQ1IsR0FBTSxHQUFXLFNBQVMsY0FBYyxPQUN4QyxFQUFTLFVBQVksYUFBYSxLQUFLLEdBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUsxQyxLQUFLLEdBQUcsYUFBYSxFQUFTLFdBQVksS0FBSyxHQUFHLGNBSXRELEdBQUksSUFBWSxTQUFTLGNBQWMsMkJBQTJCLGFBQWEsV0FDM0UsR0FBYSxHQUFJLElBQVcsUUFBUyxHQUFRLENBQUMsT0FBUSxDQUFDLFlBQWEsSUFBWSxNQUFPLEdBQU8sV0FBWSxLQUc5RyxHQUFXLFVBR1gsT0FBTyxXQUFhIiwKICAibmFtZXMiOiBbXQp9Cg==
